#!/usr/bin/env python3
"""
–£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ Notion –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö
"""

import os

import httpx
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()


def check_env_vars():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è."""
    required_vars = ["NOTION_TOKEN", "NOTION_DB_MEETINGS_ID", "COMMITS_DB_ID", "REVIEW_DB_ID"]

    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è:")
    print("=" * 50)

    missing = []
    for var in required_vars:
        value = os.getenv(var)
        if value:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            masked = f"{value[:8]}...{value[-4:]}" if len(value) > 12 else "***"
            print(f"‚úÖ {var}: {masked}")
        else:
            print(f"‚ùå {var}: –ù–ï –ù–ê–ô–î–ï–ù–ê")
            missing.append(var)

    if missing:
        print(f"\n‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: {', '.join(missing)}")
        return False

    print("\n‚úÖ –í—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–∞–π–¥–µ–Ω—ã!")
    return True


def create_notion_client():
    """–°–æ–∑–¥–∞–µ—Ç HTTP –∫–ª–∏–µ–Ω—Ç –¥–ª—è Notion API."""
    token = os.getenv("NOTION_TOKEN")
    if not token:
        raise RuntimeError("NOTION_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω")

    headers = {
        "Authorization": f"Bearer {token}",
        "Notion-Version": "2022-06-28",
        "Content-Type": "application/json",
    }
    return httpx.Client(timeout=30, headers=headers)


def check_database(client: httpx.Client, db_id: str, db_name: str):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
    print(f"\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã '{db_name}' (ID: {db_id[:8]}...{db_id[-4:]}):")
    print("-" * 60)

    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        response = client.get(f"https://api.notion.com/v1/databases/{db_id}")
        response.raise_for_status()

        data = response.json()
        title = data.get("title", [{}])[0].get("plain_text", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")

        print(f"‚úÖ –ë–∞–∑–∞ –¥–æ—Å—Ç—É–ø–Ω–∞: '{title}'")
        print(f"üìä –¢–∏–ø –æ–±—ä–µ–∫—Ç–∞: {data.get('object', 'unknown')}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤–æ–π—Å—Ç–≤–∞ (—Å—Ç–æ–ª–±—Ü—ã)
        properties = data.get("properties", {})
        print(f"üìã –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–æ–ª–±—Ü–æ–≤: {len(properties)}")

        print("\nüìù –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å—Ç–æ–ª–±—Ü–æ–≤:")
        for prop_name, prop_data in properties.items():
            prop_type = prop_data.get("type", "unknown")
            print(f"  ‚Ä¢ {prop_name}: {prop_type}")

            # –î–ª—è select –ø–æ–ª–µ–π –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–ø—Ü–∏–∏
            if prop_type == "select" and "select" in prop_data:
                options = prop_data["select"].get("options", [])
                if options:
                    option_names = [opt.get("name", "") for opt in options]
                    print(f"    –û–ø—Ü–∏–∏: {', '.join(option_names)}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –¥–ª—è –∑–∞–ø–∏—Å–∏
        print("\nüîí –ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞:")
        print(f"  ‚Ä¢ –ú–æ–∂–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å: {data.get('is_inline', False)}")

        return True

    except httpx.HTTPStatusError as e:
        print(f"‚ùå HTTP –æ—à–∏–±–∫–∞: {e.response.status_code} {e.response.reason_phrase}")
        if e.response.status_code == 404:
            print("   –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
            print("   - –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π ID –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
            print("   - –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É–¥–∞–ª–µ–Ω–∞")
            print("   - –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        elif e.response.status_code == 401:
            print("   –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
            print("   - –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π NOTION_TOKEN")
            print("   - –¢–æ–∫–µ–Ω –∏—Å—Ç–µ–∫")
        return False

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {type(e).__name__}: {e}")
        return False


def test_database_write(client: httpx.Client, db_id: str, db_name: str):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∑–∞–ø–∏—Å–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö."""
    print(f"\nüß™ –¢–µ—Å—Ç –∑–∞–ø–∏—Å–∏ –≤ –±–∞–∑—É '{db_name}':")
    print("-" * 40)

    try:
        # –ü—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        test_props = {"Name": {"title": [{"text": {"content": "üß™ Test Entry - Safe to Delete"}}]}}

        response = client.post(
            "https://api.notion.com/v1/pages",
            json={"parent": {"database_id": db_id}, "properties": test_props},
        )

        if response.status_code == 200:
            page_data = response.json()
            page_id = page_data["id"]
            print(f"‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–ø–∏—Å—å —Å–æ–∑–¥–∞–Ω–∞: {page_id}")

            # –°—Ä–∞–∑—É —É–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–ø–∏—Å—å
            delete_response = client.patch(
                f"https://api.notion.com/v1/pages/{page_id}", json={"archived": True}
            )

            if delete_response.status_code == 200:
                print("‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–ø–∏—Å—å —É–¥–∞–ª–µ–Ω–∞")
            else:
                print(f"‚ö†Ô∏è  –¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–ø–∏—Å—å —Å–æ–∑–¥–∞–Ω–∞, –Ω–æ –Ω–µ —É–¥–∞–ª–µ–Ω–∞ (ID: {page_id})")

            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {response.status_code}")
            print(f"   –û—Ç–≤–µ—Ç: {response.text}")
            return False

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏: {e}")
        return False


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏."""
    print("üîß Notion Database Diagnostics")
    print("=" * 50)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    if not check_env_vars():
        print("\n‚ùå –ò—Å–ø—Ä–∞–≤—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç
    try:
        client = create_notion_client()
        print("\n‚úÖ Notion –∫–ª–∏–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞: {e}")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    commits_id = os.getenv("COMMITS_DB_ID")
    review_id = os.getenv("REVIEW_DB_ID")

    databases = [
        (os.getenv("NOTION_DB_MEETINGS_ID"), "Meetings"),
        (commits_id, "Commits"),
        (review_id, "Review Queue"),
    ]

    results = []
    for db_id, db_name in databases:
        if db_id:
            success = check_database(client, db_id, db_name)
            results.append((db_name, success))

            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–ø–∏—Å—å —Ç–æ–ª—å–∫–æ –¥–ª—è Meetings (—Å–∞–º–∞—è –ø—Ä–æ—Å—Ç–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞)
            if success and db_name == "Meetings":
                test_database_write(client, db_id, db_name)
        else:
            print(f"\n‚ùå ID –±–∞–∑—ã '{db_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
            results.append((db_name, False))

    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print("\n" + "=" * 50)
    print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢:")
    print("=" * 50)

    for db_name, success in results:
        status = "‚úÖ OK" if success else "‚ùå –ü–†–û–ë–õ–ï–ú–ê"
        print(f"{status} {db_name}")

    if all(success for _, success in results):
        print("\nüéâ –í—Å–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
        print("   –ü—Ä–æ–±–ª–µ–º–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –ø–æ–ª–µ–π.")
        print("   –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python debug_notion.py --fields")
    else:
        print("\n‚ö†Ô∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å –±–∞–∑–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö.")
        print("   –ü—Ä–æ–≤–µ—Ä—å—Ç–µ ID –±–∞–∑ –∏ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –≤ Notion.")

    client.close()


if __name__ == "__main__":
    import sys

    if len(sys.argv) > 1 and sys.argv[1] == "--fields":
        print("üîß –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª–µ–π –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ—Å–Ω–æ–≤–Ω—É—é –∫–æ–º–∞–Ω–¥—É")

    main()
