#!/usr/bin/env python3
"""CLI —É—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π."""

import argparse
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –≤ PYTHONPATH
sys.path.insert(0, str(Path(__file__).parent.parent.parent))

from app.core.tagger_v1_scored import validate_rules
from app.core.tags import get_tagging_stats
from app.gateways.notion_meetings import fetch_meeting_page, validate_meeting_access


def show_detailed_stats() -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∏—Å—Ç–µ–º—ã —Ç–µ–≥–∏—Ä–æ–≤–∞–Ω–∏—è."""
    stats = get_tagging_stats()

    print("üìä –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã —Ç–µ–≥–∏—Ä–æ–≤–∞–Ω–∏—è")
    print("=" * 60)

    # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    print(f"üéØ –†–µ–∂–∏–º: {stats['current_mode']}")
    print(f"üîß Scored —Ç—ç–≥–≥–µ—Ä: {'‚úÖ' if stats.get('v1_scored_enabled') else '‚ùå'}")
    print(f"üéöÔ∏è –ü–æ—Ä–æ–≥ score: {stats.get('tags_min_score', 0.5)}")
    print()

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—ã–∑–æ–≤–æ–≤
    calls_stats = stats["stats"]
    print("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—ã–∑–æ–≤–æ–≤:")
    print(f"   –í—Å–µ–≥–æ: {calls_stats['total_calls']}")
    for mode, count in calls_stats["calls_by_mode"].items():
        print(f"   {mode}: {count}")
    print()

    # –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    if "performance" in stats:
        perf = stats["performance"]
        print("‚ö° –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:")
        print(f"   Uptime: {perf['uptime_hours']:.1f} —á–∞—Å–æ–≤")
        print(f"   –í—ã–∑–æ–≤–æ–≤/—á–∞—Å: {perf['calls_per_hour']:.1f}")
        print(f"   –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {perf['avg_response_time_ms']:.2f}–º—Å")
        print()

    # –ö—ç—à
    cache = stats["cache_info"]
    print("üíæ –ö—ç—à:")
    print(f"   Hit rate: {cache['hit_rate_percent']:.1f}%")
    print(f"   Hits/Misses: {cache['hits']}/{cache['misses']}")
    print(f"   –†–∞–∑–º–µ—Ä: {cache['currsize']}/{cache['maxsize']}")
    print()

    # –¢–æ–ø —Ç–µ–≥–∏
    if stats.get("top_tags"):
        print("üî• –¢–æ–ø —Ç–µ–≥–∏:")
        for tag, count in stats["top_tags"][:10]:
            print(f"   {tag}: {count}")
        print()

    # V1 —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    if "v1_stats" in stats:
        v1 = stats["v1_stats"]
        print("üè∑Ô∏è Tagger v1 Scored:")
        print(f"   –ü—Ä–∞–≤–∏–ª: {v1.get('total_rules', 0)}")
        print(f"   –ü–∞—Ç—Ç–µ—Ä–Ω–æ–≤: {v1.get('total_patterns', 0)}")
        print(f"   –ò—Å–∫–ª—é—á–µ–Ω–∏–π: {v1.get('total_excludes', 0)}")
        print(f"   –°—Ä–µ–¥–Ω–∏–π –≤–µ—Å: {v1.get('average_weight', 0):.2f}")


def validate_yaml() -> None:
    """–í–∞–ª–∏–¥–∏—Ä—É–µ—Ç YAML —Ñ–∞–π–ª –ø—Ä–∞–≤–∏–ª."""
    print("‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è YAML –ø—Ä–∞–≤–∏–ª —Ç–µ–≥–∏—Ä–æ–≤–∞–Ω–∏—è")
    print("=" * 50)

    errors = validate_rules()

    if not errors:
        print("üéâ –í—Å–µ –ø—Ä–∞–≤–∏–ª–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã!")
        print("‚Ä¢ Regex –ø–∞—Ç—Ç–µ—Ä–Ω—ã –≤–∞–ª–∏–¥–Ω—ã")
        print("‚Ä¢ –ù–µ—Ç –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ —Ç–µ–≥–æ–≤")
        print("‚Ä¢ –í–µ—Å–∞ –≤ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö –ø—Ä–µ–¥–µ–ª–∞—Ö")
        print("‚Ä¢ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ñ–∞–π–ª–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
    else:
        print(f"‚ùå –ù–∞–π–¥–µ–Ω–æ {len(errors)} –æ—à–∏–±–æ–∫:")
        print()
        for i, error in enumerate(errors, 1):
            print(f"{i:2d}. {error}")


def test_meeting_access(meeting_id: str) -> None:
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –¥–æ—Å—Ç—É–ø –∫ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –≤—Å—Ç—Ä–µ—á–∏."""
    print(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –≤—Å—Ç—Ä–µ—á–µ: {meeting_id}")
    print("-" * 50)

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø
        if validate_meeting_access(meeting_id):
            print("‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–æ—Å—Ç—É–ø–Ω–∞")

            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            page_data = fetch_meeting_page(meeting_id)
            print(f"üìÑ –ù–∞–∑–≤–∞–Ω–∏–µ: {page_data['title']}")
            print(f"üè∑Ô∏è –¢–µ–∫—É—â–∏–µ —Ç–µ–≥–∏ ({len(page_data['current_tags'])}):")
            for tag in page_data["current_tags"]:
                print(f"   ‚Ä¢ {tag}")
            print(f"üìù Summary: {len(page_data['summary_md'])} —Å–∏–º–≤–æ–ª–æ–≤")

        else:
            print("‚ùå –°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")


def dry_run_retag(meeting_id: str) -> None:
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç dry-run retag –¥–ª—è –≤—Å—Ç—Ä–µ—á–∏."""
    print(f"üîç Dry-run retag –¥–ª—è –≤—Å—Ç—Ä–µ—á–∏: {meeting_id}")
    print("-" * 50)

    try:
        from app.core.tags import tag_text

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        page_data = fetch_meeting_page(meeting_id)

        # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–µ–≥–∏
        summary_md = page_data.get("summary_md", "")
        if not summary_md:
            print("‚ùå –ù–µ—Ç summary –¥–ª—è –ø–µ—Ä–µ—Å—á–µ—Ç–∞ —Ç–µ–≥–æ–≤")
            return

        new_tags = set(tag_text(summary_md))
        old_tags = set(page_data.get("current_tags", []))

        # –í—ã—á–∏—Å–ª—è–µ–º diff
        tags_to_add = sorted(new_tags - old_tags)
        tags_to_remove = sorted(old_tags - new_tags)

        print(f"üìÑ –í—Å—Ç—Ä–µ—á–∞: {page_data['title']}")
        print(f"üìä –°—Ç–∞—Ä—ã—Ö —Ç–µ–≥–æ–≤: {len(old_tags)}")
        print(f"üìä –ù–æ–≤—ã—Ö —Ç–µ–≥–æ–≤: {len(new_tags)}")
        print()

        if tags_to_add:
            print(f"‚ûï –î–æ–±–∞–≤–∏—Ç—å ({len(tags_to_add)}):")
            for tag in tags_to_add:
                print(f"   ‚Ä¢ {tag}")
            print()

        if tags_to_remove:
            print(f"‚ûñ –£–¥–∞–ª–∏—Ç—å ({len(tags_to_remove)}):")
            for tag in tags_to_remove:
                print(f"   ‚Ä¢ {tag}")
            print()

        if not tags_to_add and not tags_to_remove:
            print("‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ—Ç - —Ç–µ–≥–∏ –∞–∫—Ç—É–∞–ª—å–Ω—ã")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")


def main() -> None:
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è CLI."""
    parser = argparse.ArgumentParser(
        description="CLI —É—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:

  # –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
  python -m app.tools.admin_cli --stats
  
  # –í–∞–ª–∏–¥–∞—Ü–∏—è YAML
  python -m app.tools.admin_cli --validate
  
  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –≤—Å—Ç—Ä–µ—á–µ
  python -m app.tools.admin_cli --test-access 12345678901234567890123456789012
  
  # Dry-run retag
  python -m app.tools.admin_cli --dry-retag 12345678901234567890123456789012
        """,
    )

    parser.add_argument(
        "--stats", action="store_true", help="–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∏—Å—Ç–µ–º—ã —Ç–µ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"
    )

    parser.add_argument(
        "--validate", action="store_true", help="–í–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å YAML —Ñ–∞–π–ª –ø—Ä–∞–≤–∏–ª —Ç–µ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"
    )

    parser.add_argument(
        "--test-access", metavar="MEETING_ID", help="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –≤—Å—Ç—Ä–µ—á–∏"
    )

    parser.add_argument(
        "--dry-retag", metavar="MEETING_ID", help="–í—ã–ø–æ–ª–Ω–∏—Ç—å dry-run retag –¥–ª—è –≤—Å—Ç—Ä–µ—á–∏"
    )

    args = parser.parse_args()

    try:
        if args.stats:
            show_detailed_stats()
        elif args.validate:
            validate_yaml()
        elif args.test_access:
            test_meeting_access(args.test_access)
        elif args.dry_retag:
            dry_run_retag(args.dry_retag)
        else:
            print("‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –æ–¥–Ω—É –∏–∑ –æ–ø—Ü–∏–π")
            parser.print_help()
            sys.exit(1)

    except KeyboardInterrupt:
        print("\nüëã –ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(0)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main()
