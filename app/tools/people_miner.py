#!/usr/bin/env python3
"""
CLI –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è —Ä—É—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –≤ —Å–ª–æ–≤–∞—Ä—å –ª—é–¥–µ–π.

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python -m app.tools.people_miner --top 20
    python -m app.tools.people_miner --stats
    python -m app.tools.people_miner --clear
"""

from __future__ import annotations

import argparse
import sys
from typing import NoReturn

from app.core.people_detect import propose_name_en, validate_person_entry
from app.core.people_store import (
    clear_candidates,
    get_candidate_stats,
    load_candidates,
    load_people,
    remove_candidate,
    save_people,
)


def _already_known_aliases_lower(people: list[dict]) -> set[str]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–æ —É–∂–µ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∞–ª–∏–∞—Å–æ–≤ –≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ."""
    aliases = set()
    for person in people:
        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –∞–ª–∏–∞—Å—ã
        for alias in person.get("aliases", []):
            if alias:
                aliases.add(alias.lower())
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–Ω–æ–Ω–∏—á–µ—Å–∫–æ–µ –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ –∏–º—è
        name_en = (person.get("name_en") or "").strip()
        if name_en:
            aliases.add(name_en.lower())
    
    return aliases


def _print_stats() -> None:
    """–í—ã–≤–æ–¥–∏—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞–º."""
    stats = get_candidate_stats()
    
    print("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤:")
    print(f"  –í—Å–µ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤: {stats['total']}")
    
    if stats['total'] > 0:
        print(f"  –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —á–∞—Å—Ç–æ—Ç–∞: {stats['max_count']}")
        print(f"  –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —á–∞—Å—Ç–æ—Ç–∞: {stats['min_count']}")
        print(f"  –°—Ä–µ–¥–Ω—è—è —á–∞—Å—Ç–æ—Ç–∞: {stats['avg_count']:.1f}")
    
    people_count = len(load_people())
    print(f"  –õ—é–¥–µ–π –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Å–ª–æ–≤–∞—Ä–µ: {people_count}")


def _clear_candidates() -> None:
    """–û—á–∏—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è."""
    candidates = load_candidates()
    if not candidates:
        print("‚ùå –°–ª–æ–≤–∞—Ä—å –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ —É–∂–µ –ø—É—Å—Ç.")
        return
    
    print(f"‚ö†Ô∏è  –í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å —É–¥–∞–ª–∏—Ç—å {len(candidates)} –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤.")
    confirm = input("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ (yes/no): ").strip().lower()
    
    if confirm in ("yes", "y", "–¥–∞", "–¥"):
        clear_candidates()
        print("‚úÖ –°–ª–æ–≤–∞—Ä—å –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –æ—á–∏—â–µ–Ω.")
    else:
        print("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")


def _review_candidates(top_k: int = 20) -> None:
    """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤."""
    candidates = load_candidates()
    
    if not candidates:
        print("‚ùå –ù–µ—Ç –Ω–æ–≤—ã—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.")
        return
    
    people = load_people()
    known_aliases = _already_known_aliases_lower(people)
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –ø–æ —á–∞—Å—Ç–æ—Ç–µ (—É–±—ã–≤–∞–Ω–∏–µ) –∏ –±–µ—Ä–µ–º —Ç–æ–ø-K
    sorted_candidates = sorted(
        candidates.items(), 
        key=lambda x: x[1], 
        reverse=True
    )[:top_k]
    
    print(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ø-{len(sorted_candidates)} –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤:")
    print("=" * 50)
    
    changes_made = False
    processed_count = 0
    
    for alias, frequency in sorted_candidates:
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —É–∂–µ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö (–Ω–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ —Å–ª–æ–≤–∞—Ä—å –æ–±–Ω–æ–≤–∏–ª—Å—è)
        if alias.lower() in known_aliases:
            remove_candidate(alias)  # –£–±–∏—Ä–∞–µ–º –∏–∑ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
            continue
        
        processed_count += 1
        name_en_suggestion = propose_name_en(alias)
        
        print(f"\nüìù –ö–∞–Ω–¥–∏–¥–∞—Ç #{processed_count}: {alias}")
        print(f"   –í—Å—Ç—Ä–µ—á–∞–ª—Å—è: {frequency} —Ä–∞–∑(–∞)")
        print(f"   –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º–æ–µ –∏–º—è: {name_en_suggestion}")
        
        while True:
            print("\n–í–∞—Ä–∏–∞–Ω—Ç—ã –¥–µ–π—Å—Ç–≤–∏–π:")
            print("  [Enter] - –ø—Ä–∏–Ω—è—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ")
            print("  [custom] - –≤–≤–µ—Å—Ç–∏ —Å–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç")
            print("  s - –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —ç—Ç–æ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞")
            print("  q - –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—Ç—É")
            
            action = input("–í–∞—à –≤—ã–±–æ—Ä: ").strip()
            
            if action.lower() == "q":
                print("üëã –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
                if changes_made:
                    save_people(people)
                    print("‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")
                return
            
            if action.lower() == "s":
                print(f"‚è≠Ô∏è  –ü—Ä–æ–ø—É—Å–∫–∞–µ–º {alias}")
                break
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –∏–º—è
            if action == "":
                final_name_en = name_en_suggestion
            else:
                final_name_en = action.strip()
            
            if not final_name_en:
                print("‚ùå –ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
                continue
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
            aliases_list = [alias]
            # –ï—Å–ª–∏ –∏–º—è –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç –∞–ª–∏–∞—Å–∞, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ —Ç–æ–∂–µ
            if final_name_en.lower() != alias.lower():
                aliases_list.append(final_name_en)
            
            new_person = {
                "name_en": final_name_en,
                "aliases": aliases_list
            }
            
            # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∑–∞–ø–∏—Å—å
            validation_errors = validate_person_entry(new_person)
            if validation_errors:
                print("‚ùå –û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏:")
                for error in validation_errors:
                    print(f"   - {error}")
                continue
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –ª—é–¥–µ–π
            people.append(new_person)
            known_aliases.add(alias.lower())
            known_aliases.add(final_name_en.lower())
            
            # –£–¥–∞–ª—è–µ–º –∏–∑ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
            remove_candidate(alias)
            
            changes_made = True
            print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: {final_name_en} ‚Üê {alias}")
            break
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    if changes_made:
        save_people(people)
        print(f"\n‚úÖ –°–ª–æ–≤–∞—Ä—å –æ–±–Ω–æ–≤–ª–µ–Ω. –î–æ–±–∞–≤–ª–µ–Ω–æ –ª—é–¥–µ–π: {sum(1 for p in people if any(alias == a for a in p.get('aliases', []) for alias, _ in sorted_candidates))}")
        print("üìÅ –§–∞–π–ª: app/dictionaries/people.json")
    else:
        print("\nüìù –ò–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ –±—ã–ª–æ —Å–¥–µ–ª–∞–Ω–æ.")


def _show_help() -> NoReturn:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø—Ä–∞–≤–∫—É –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é."""
    help_text = """
üîß People Miner - –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–ª–æ–≤–∞—Ä–µ–º –ª—é–¥–µ–π

–û–ü–ò–°–ê–ù–ò–ï:
    –≠—Ç–æ—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –ø–æ–º–æ–≥–∞–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å —Å–ª–æ–≤–∞—Ä–µ–º –ª—é–¥–µ–π, –ø–æ–∑–≤–æ–ª—è—è –ø—Ä–æ–≤–µ—Ä—è—Ç—å
    –∏ –¥–æ–±–∞–≤–ª—è—Ç—å –Ω–æ–≤—ã—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤, –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –≤ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞—Ö –≤—Å—Ç—Ä–µ—á.

–ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–ï:
    python -m app.tools.people_miner [–æ–ø—Ü–∏–∏]

–û–ü–¶–ò–ò:
    --top N         –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–æ–ø-N –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –ø–æ —á–∞—Å—Ç–æ—Ç–µ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 20)
    --stats         –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
    --clear         –û—á–∏—Å—Ç–∏—Ç—å —Å–ª–æ–≤–∞—Ä—å –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
    --help, -h      –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

–ü–†–ò–ú–ï–†–´:
    # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–æ–ø-10 –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
    python -m app.tools.people_miner --top 10
    
    # –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    python -m app.tools.people_miner --stats
    
    # –û—á–∏—Å—Ç–∏—Ç—å –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
    python -m app.tools.people_miner --clear

–§–ê–ô–õ–´:
    app/dictionaries/people.json           - –û—Å–Ω–æ–≤–Ω–æ–π —Å–ª–æ–≤–∞—Ä—å –ª—é–¥–µ–π
    app/dictionaries/people_candidates.json - –ö–∞–Ω–¥–∏–¥–∞—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    app/dictionaries/people_stopwords.json  - –°—Ç–æ–ø-—Å–ª–æ–≤–∞
"""
    print(help_text)
    sys.exit(0)


def main() -> None:
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è CLI."""
    parser = argparse.ArgumentParser(
        description="CLI –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–ª–æ–≤–∞—Ä–µ–º –ª—é–¥–µ–π",
        add_help=False  # –û—Ç–∫–ª—é—á–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é —Å–ø—Ä–∞–≤–∫—É
    )
    
    parser.add_argument(
        "--top", 
        type=int, 
        default=20,
        help="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–ø –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 20)"
    )
    
    parser.add_argument(
        "--stats", 
        action="store_true",
        help="–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤"
    )
    
    parser.add_argument(
        "--clear", 
        action="store_true",
        help="–û—á–∏—Å—Ç–∏—Ç—å —Å–ª–æ–≤–∞—Ä—å –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤"
    )
    
    parser.add_argument(
        "--help", "-h", 
        action="store_true",
        help="–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É"
    )
    
    args = parser.parse_args()
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã
    if args.help:
        _show_help()
    
    if args.stats:
        _print_stats()
        return
    
    if args.clear:
        _clear_candidates()
        return
    
    # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
    _review_candidates(top_k=args.top)


if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n\nüëã –†–∞–±–æ—Ç–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
        sys.exit(0)
    except Exception as e:
        print(f"\n‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)
