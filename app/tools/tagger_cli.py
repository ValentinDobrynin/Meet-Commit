#!/usr/bin/env python3
"""CLI —É—Ç–∏–ª–∏—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è scored —Ç—ç–≥–≥–µ—Ä–∞."""

import argparse
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –≤ PYTHONPATH
sys.path.insert(0, str(Path(__file__).parent.parent.parent))

from app.core.tagger_v1_scored import get_rules_stats, reload_rules, tag_text, tag_text_scored
from app.settings import settings


def test_text(text: str, show_scores: bool = False) -> None:
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ç–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞."""
    print(f"üìù –¢–µ–∫—Å—Ç: {text}")
    print(f"‚öôÔ∏è –†–µ–∂–∏–º: {settings.tags_mode}")
    print(f"üéØ –ü–æ—Ä–æ–≥: {settings.tags_min_score}")
    print("-" * 60)

    if show_scores:
        print("üìä Scored —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
        scored = tag_text_scored(text)
        if scored:
            for tag, score in scored:
                status = "‚úÖ" if score >= settings.tags_min_score else "‚ùå"
                print(f"  {status} {tag}: {score:.2f}")
        else:
            print("  –¢–µ–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        print()

    print("üè∑Ô∏è –§–∏–Ω–∞–ª—å–Ω—ã–µ —Ç–µ–≥–∏:")
    tags = tag_text(text)
    if tags:
        for tag in tags:
            print(f"  ‚Ä¢ {tag}")
    else:
        print("  –¢–µ–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")


def show_stats() -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç—ç–≥–≥–µ—Ä–∞."""
    stats = get_rules_stats()

    print("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ Tagger v1 Scored:")
    print("=" * 50)
    print(f"üìã –í—Å–µ–≥–æ –ø—Ä–∞–≤–∏–ª: {stats.get('total_rules', 0)}")
    print(f"üîç –í—Å–µ–≥–æ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤: {stats.get('total_patterns', 0)}")
    print(f"üö´ –í—Å–µ–≥–æ –∏—Å–∫–ª—é—á–µ–Ω–∏–π: {stats.get('total_excludes', 0)}")
    print(f"‚öñÔ∏è –°—Ä–µ–¥–Ω–∏–π –≤–µ—Å: {stats.get('average_weight', 0):.2f}")

    if stats.get("last_reload_time"):
        import datetime

        reload_time = datetime.datetime.fromtimestamp(stats["last_reload_time"])
        print(f"üîÑ –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞: {reload_time.strftime('%Y-%m-%d %H:%M:%S')}")


def reload_rules_cli() -> None:
    """–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ—Ç –ø—Ä–∞–≤–∏–ª–∞ —Ç–µ–≥–∏—Ä–æ–≤–∞–Ω–∏—è."""
    print("üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∞–≤–∏–ª...")
    count = reload_rules()
    print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {count} –ø—Ä–∞–≤–∏–ª")


def main() -> None:
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è CLI."""
    parser = argparse.ArgumentParser(
        description="CLI —É—Ç–∏–ª–∏—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è scored —Ç—ç–≥–≥–µ—Ä–∞",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:

  # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
  python -m app.tools.tagger_cli "–û–±—Å—É–¥–∏–ª–∏ –∞—É–¥–∏—Ç IFRS –¥–ª—è Lavka"
  
  # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –ø–æ–∫–∞–∑–æ–º scores
  python -m app.tools.tagger_cli "–û–±—Å—É–¥–∏–ª–∏ –∞—É–¥–∏—Ç IFRS –¥–ª—è Lavka" --scores
  
  # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
  python -m app.tools.tagger_cli --stats
  
  # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∞–≤–∏–ª
  python -m app.tools.tagger_cli --reload
        """,
    )

    parser.add_argument("text", nargs="?", help="–¢–µ–∫—Å—Ç –¥–ª—è —Ç–µ–≥–∏—Ä–æ–≤–∞–Ω–∏—è")

    parser.add_argument(
        "--scores", action="store_true", help="–ü–æ–∫–∞–∑–∞—Ç—å scores –¥–ª—è –≤—Å–µ—Ö –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ç–µ–≥–æ–≤"
    )

    parser.add_argument("--stats", action="store_true", help="–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç—ç–≥–≥–µ—Ä–∞")

    parser.add_argument("--reload", action="store_true", help="–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–∞–≤–∏–ª–∞ —Ç–µ–≥–∏—Ä–æ–≤–∞–Ω–∏—è")

    parser.add_argument(
        "--threshold",
        type=float,
        help=f"–ò–∑–º–µ–Ω–∏—Ç—å –ø–æ—Ä–æ–≥ score (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {settings.tags_min_score})",
    )

    args = parser.parse_args()

    # –ò–∑–º–µ–Ω—è–µ–º –ø–æ—Ä–æ–≥ –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
    if args.threshold is not None:
        settings.tags_min_score = args.threshold
        print(f"üéØ –ü–æ—Ä–æ–≥ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {args.threshold}")

    try:
        if args.reload:
            reload_rules_cli()
            return

        if args.stats:
            show_stats()
            return

        if not args.text:
            print("‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å —Ç–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å --stats/--reload")
            parser.print_help()
            sys.exit(1)

        test_text(args.text, show_scores=args.scores)

    except KeyboardInterrupt:
        print("\nüëã –ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(0)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main()
