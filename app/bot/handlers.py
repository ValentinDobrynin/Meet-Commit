# app/bot/handlers.py
from __future__ import annotations

import asyncio
import logging
import re
from pathlib import Path
from typing import Any

from aiogram import F, Router
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, Message
from aiogram.utils.keyboard import InlineKeyboardBuilder

from app.core.commit_normalize import (
    build_key,
    build_title,
    normalize_assignees,
    normalize_commits,
    validate_date_iso,
)
from app.core.commit_validate import validate_and_partition
from app.core.constants import REVIEW_STATUS_DROPPED, REVIEW_STATUS_RESOLVED
from app.core.llm_extract_commits import extract_commits
from app.core.llm_summarize import run as summarize_run
from app.core.normalize import run as normalize_run
from app.core.people_store import canonicalize_list
from app.core.review_queue import list_open_reviews
from app.core.tags import tag_text_for_meeting
from app.gateways.notion_commits import upsert_commits
from app.gateways.notion_gateway import upsert_meeting
from app.gateways.notion_review import (
    enqueue_with_upsert,
    get_by_short_id,
    set_status,
    update_fields,
)

logger = logging.getLogger(__name__)

router = Router()

PROMPTS_DIR = Path(__file__).resolve().parent.parent.parent / "prompts" / "summarization"
MAX_PREVIEW_LINES = 12


async def _send_empty_queue_message_with_menu(msg: Message) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—É—Å—Ç–æ–π –æ—á–µ—Ä–µ–¥–∏ —Å –≥–ª–∞–≤–Ω—ã–º –º–µ–Ω—é."""
    from app.bot.handlers_inline import build_main_menu_kb

    await msg.answer(
        "üìã Review queue –ø—É—Å—Ç–∞.\n\n" "üí° <i>–ì–æ—Ç–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–æ–≤—É—é –≤—Å—Ç—Ä–µ—á—É!</i>",
        reply_markup=build_main_menu_kb(),
    )


class IngestStates(StatesGroup):
    waiting_prompt = State()
    waiting_extra = State()


def _prompts_kb() -> InlineKeyboardMarkup:
    kb = InlineKeyboardBuilder()
    # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –∫–∞–∫ .txt, —Ç–∞–∫ –∏ .md —Ñ–∞–π–ª—ã
    txt_files = list(PROMPTS_DIR.glob("*.txt"))
    md_files = list(PROMPTS_DIR.glob("*.md"))
    prompts = sorted(txt_files + md_files)
    for p in prompts:
        kb.button(text=p.stem, callback_data=f"prompt:{p.name}")
    kb.adjust(1)
    return kb.as_markup()


def _skip_kb() -> InlineKeyboardMarkup:
    kb = InlineKeyboardBuilder()
    kb.button(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="extra:skip")
    kb.adjust(1)
    return kb.as_markup()


@router.message(F.text == "/start")
async def cmd_start(msg: Message, state: FSMContext):
    await state.clear()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö
    from app.bot.user_storage import add_user

    chat_id = msg.chat.id
    username = msg.from_user.username if msg.from_user else None
    first_name = msg.from_user.first_name if msg.from_user else None

    is_new_user = add_user(chat_id, username, first_name)
    if is_new_user:
        logger.info(f"New user registered: {chat_id} (@{username})")

    await msg.answer(
        "ü§ñ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Meet-Commit!</b>\n\n"
        "üìã <b>–Ø –ø–æ–º–æ–≥—É –≤–∞–º:</b>\n"
        "‚Ä¢ üìù –°—É–º–º–∞—Ä–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤—Å—Ç—Ä–µ—á–∏ —á–µ—Ä–µ–∑ AI\n"
        "‚Ä¢ üéØ –ò–∑–≤–ª–µ—á—å –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞ –∏ –¥–µ–π—Å—Ç–≤–∏—è\n"
        "‚Ä¢ üìä –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—Å–µ –≤ Notion —Å —É–º–Ω–æ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–µ–π\n"
        "‚Ä¢ üîç –£–ø—Ä–∞–≤–ª—è—Ç—å –æ—á–µ—Ä–µ–¥—å—é –∑–∞–¥–∞—á –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É\n\n"
        "üìé <b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –≤—Å—Ç—Ä–µ—á–∏ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã</b>\n\n"
        "üéØ <b>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:</b>\n"
        "‚Ä¢ üìÑ –¢–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã (.txt)\n"
        "‚Ä¢ üìã PDF –¥–æ–∫—É–º–µ–Ω—Ç—ã (.pdf)\n"
        "‚Ä¢ üìù Word –¥–æ–∫—É–º–µ–Ω—Ç—ã (.docx)\n"
        "‚Ä¢ üì∫ –°—É–±—Ç–∏—Ç—Ä—ã (.vtt, .webvtt)\n\n"
        "üí° <i>–ü—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ—Ç–∞—â–∏—Ç–µ —Ñ–∞–π–ª –≤ —á–∞—Ç –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏—è</i>"
    )


@router.message(F.text == "/help")
async def cmd_help(msg: Message, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞."""
    help_text = (
        "ü§ñ <b>Meet-Commit Bot</b>\n\n"
        "üìã <b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
        "üè† <code>/start</code> - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ\n"
        "‚ùì <code>/help</code> - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n"
        "üìÑ <code>/process</code> - –û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–∞–π–ª –≤—Å—Ç—Ä–µ—á–∏\n\n"
        "üìé <b>–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤:</b>\n"
        "‚Ä¢ –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –≤—Å—Ç—Ä–µ—á–∏ –≤ —á–∞—Ç\n"
        "‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è: .txt, .pdf, .docx, .vtt, .webvtt\n"
        "‚Ä¢ –ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–∑–≤–ª–µ—á–µ—Ç –∫–æ–º–º–∏—Ç—ã –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç –≤ Notion\n\n"
        "üéØ <b>–ß—Ç–æ –¥–µ–ª–∞–µ—Ç –±–æ—Ç:</b>\n"
        "‚Ä¢ üìù –°—É–º–º–∞—Ä–∏–∑–∏—Ä—É–µ—Ç –≤—Å—Ç—Ä–µ—á–∏ —á–µ—Ä–µ–∑ AI\n"
        "‚Ä¢ üéØ –ò–∑–≤–ª–µ–∫–∞–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞ –∏ –¥–µ–π—Å—Ç–≤–∏—è\n"
        "‚Ä¢ üè∑Ô∏è –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞—Å—Å—Ç–∞–≤–ª—è–µ—Ç —Ç–µ–≥–∏\n"
        "‚Ä¢ üìä –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—Å–µ –≤ Notion —Å —É–º–Ω–æ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–µ–π\n"
        "‚Ä¢ üîç –£–ø—Ä–∞–≤–ª—è–µ—Ç –æ—á–µ—Ä–µ–¥—å—é –∑–∞–¥–∞—á –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É\n\n"
        "üí° <i>–î–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /admin_help</i>"
    )
    await msg.answer(help_text)


@router.message(F.text == "/process")
async def cmd_process(msg: Message, state: FSMContext):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞ –≤—Å—Ç—Ä–µ—á–∏."""
    await msg.answer(
        "üìé <b>–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞ –≤—Å—Ç—Ä–µ—á–∏</b>\n\n"
        "üìã <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:</b>\n"
        "1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª —Å –∑–∞–ø–∏—Å—å—é –≤—Å—Ç—Ä–µ—á–∏\n"
        "2. –ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç –µ–≥–æ\n"
        "3. –†–µ–∑—É–ª—å—Ç–∞—Ç –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ Notion\n\n"
        "üéØ <b>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:</b>\n"
        "‚Ä¢ üìÑ –¢–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã (.txt)\n"
        "‚Ä¢ üìã PDF –¥–æ–∫—É–º–µ–Ω—Ç—ã (.pdf)\n"
        "‚Ä¢ üìù Word –¥–æ–∫—É–º–µ–Ω—Ç—ã (.docx)\n"
        "‚Ä¢ üì∫ –°—É–±—Ç–∏—Ç—Ä—ã (.vtt, .webvtt)\n\n"
        "üí° <i>–ü—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ—Ç–∞—â–∏—Ç–µ —Ñ–∞–π–ª –≤ —á–∞—Ç!</i>"
    )


@router.message(F.text == "/cancel")
async def cmd_cancel(msg: Message, state: FSMContext):
    await state.clear()
    await msg.answer("–û–∫. –°–±—Ä–æ—Å–∏–ª —Å–æ—Å—Ç–æ—è–Ω–∏–µ.")


@router.message(F.document | (F.text & ~F.text.startswith("/")))
async def receive_input(msg: Message, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞—Ö–æ–¥–∏–º—Å—è –ª–∏ –º—ã –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞
    current_state = await state.get_state()
    if current_state == IngestStates.waiting_extra:
        # –ï—Å–ª–∏ –¥–∞, —Ç–æ —ç—Ç–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç, –ø–µ—Ä–µ–¥–∞–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–º—É –æ–±—Ä–∞–±–æ—Ç—á–∏–∫—É
        await extra_entered(msg, state)
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞—Ö–æ–¥–∏–º—Å—è –ª–∏ –º—ã –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ People Miner
    from app.bot.states.people_states import PeopleStates

    if current_state == PeopleStates.waiting_assign_en:
        # –ï—Å–ª–∏ –¥–∞, —Ç–æ —ç—Ç–æ –≤–≤–æ–¥ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ –∏–º–µ–Ω–∏ –¥–ª—è People Miner
        # –ü–µ—Ä–µ–¥–∞–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–º—É –æ–±—Ä–∞–±–æ—Ç—á–∏–∫—É
        from app.bot.handlers_people import set_en_name_handler

        await set_en_name_handler(msg, state)
        return

    raw_bytes: bytes | None = None
    text: str | None = None
    filename = "message.txt"

    if msg.document:
        if not msg.bot:
            await msg.answer("–û—à–∏–±–∫–∞: –±–æ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return
        file = await msg.bot.get_file(msg.document.file_id)
        if not file.file_path:
            await msg.answer("–û—à–∏–±–∫–∞: –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        bytes_io = await msg.bot.download_file(file.file_path)
        if bytes_io:
            raw_bytes = bytes_io.read()
        else:
            await msg.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª")
            return
        filename = msg.document.file_name or "meeting.txt"
    else:
        text = msg.text or ""

    await state.update_data(raw_bytes=raw_bytes, text=text, filename=filename)
    await state.set_state(IngestStates.waiting_prompt)
    await msg.answer("–í—ã–±–µ—Ä–∏ —à–∞–±–ª–æ–Ω —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏:", reply_markup=_prompts_kb())


@router.callback_query(F.data.startswith("prompt:"))
async def choose_prompt(cb: CallbackQuery, state: FSMContext):
    try:
        data = await state.get_data()

        if not data.get("raw_bytes") and not data.get("text"):
            await cb.answer("–ù–µ—Ç –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö. –ü—Ä–∏—à–ª–∏ —Ñ–∞–π–ª –∏–ª–∏ —Ç–µ–∫—Å—Ç.", show_alert=True)
            return

        if not cb.data:
            await cb.answer("–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ callback –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", show_alert=True)
            return

        prompt_file = cb.data.split("prompt:", 1)[1]
        await state.update_data(prompt_file=prompt_file)
        await state.set_state(IngestStates.waiting_extra)

        if cb.message:
            await cb.message.answer(
                "–î–æ–±–∞–≤–∏—Ç—å —É—Ç–æ—á–Ω–µ–Ω–∏–µ –∫ –ø—Ä–æ–º–ø—Ç—É? –ù–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç –∏–ª–∏ –Ω–∞–∂–º–∏ ¬´–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å¬ª.",
                reply_markup=_skip_kb(),
            )
        await cb.answer()
    except Exception as e:
        # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        try:
            await cb.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.")
        except Exception:
            pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ callback
        print(f"Error in choose_prompt: {e}")


@router.callback_query(F.data == "extra:skip")
async def extra_skip(cb: CallbackQuery, state: FSMContext):
    try:
        await cb.answer()  # –û—Ç–≤–µ—á–∞–µ–º —Å—Ä–∞–∑—É –Ω–∞ callback
        if cb.message and isinstance(cb.message, Message):
            await run_pipeline(cb.message, state, extra=None)
    except Exception as e:
        # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        try:
            await cb.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.")
        except Exception:
            pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ callback
        print(f"Error in extra_skip: {e}")


@router.message(IngestStates.waiting_extra, F.text)
async def extra_entered(msg: Message, state: FSMContext):
    await run_pipeline(msg, state, extra=msg.text)


def _extract_page_id_from_url(notion_url: str) -> str:
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç page_id –∏–∑ Notion URL –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π UUID.

    Args:
        notion_url: URL —Å—Ç—Ä–∞–Ω–∏—Ü—ã Notion

    Returns:
        Page ID –≤ —Ñ–æ—Ä–º–∞—Ç–µ UUID –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ API

    Example:
        https://notion.so/mock-tr6-272344c5676681a6b2a4f9c9df62305f -> 272344c5-6766-81a6-b2a4-f9c9df62305f
    """
    # Notion URLs –æ–±—ã—á–Ω–æ –∏–º–µ—é—Ç —Ñ–æ—Ä–º–∞—Ç: https://notion.so/{page_id}
    # –∏–ª–∏ https://www.notion.so/{workspace}/{page_id}
    parts = notion_url.rstrip("/").split("/")
    page_id_raw = parts[-1]

    # –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å—ã –∏ –∏–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ hex —á–∞—Å—Ç—å
    if len(page_id_raw) == 36 and page_id_raw.count("-") == 4:
        # –£–∂–µ –≤ UUID —Ñ–æ—Ä–º–∞—Ç–µ
        return page_id_raw
    elif len(page_id_raw) > 32:
        # –ï—Å—Ç—å –ø—Ä–µ—Ñ–∏–∫—Å, –±–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 32 hex —Å–∏–º–≤–æ–ª–∞
        hex_part = page_id_raw[-32:]
    else:
        # –£–±–∏—Ä–∞–µ–º –≤—Å–µ –¥–µ—Ñ–∏—Å—ã –∏ —Ä–∞–±–æ—Ç–∞–µ–º —Å hex
        hex_part = page_id_raw.replace("-", "")

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤ UUID: XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX
    if len(hex_part) == 32:
        formatted_uuid = (
            f"{hex_part[:8]}-{hex_part[8:12]}-{hex_part[12:16]}-{hex_part[16:20]}-{hex_part[20:32]}"
        )
        return formatted_uuid
    else:
        # –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
        return page_id_raw


async def run_commits_pipeline(
    meeting_page_id: str,
    meeting_text: str,
    attendees_en: list[str],
    meeting_date_iso: str,
    meeting_tags: list[str] | None,
    msg: Message | None = None,
) -> dict[str, int]:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–º–∏—Ç—ã –¥–ª—è –≤—Å—Ç—Ä–µ—á–∏: –∏–∑–≤–ª–µ–∫–∞–µ—Ç, –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç, –≤–∞–ª–∏–¥–∏—Ä—É–µ—Ç –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç.

    Args:
        meeting_page_id: ID —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤—Å—Ç—Ä–µ—á–∏ –≤ Notion
        meeting_text: –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç –≤—Å—Ç—Ä–µ—á–∏
        attendees_en: –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –∫–∞–Ω–æ–Ω–∏—á–µ—Å–∫–∏—Ö EN –∏–º–µ–Ω–∞—Ö
        meeting_date_iso: –î–∞—Ç–∞ –≤—Å—Ç—Ä–µ—á–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD
        meeting_tags: –¢–µ–≥–∏ –≤—Å—Ç—Ä–µ—á–∏ –¥–ª—è –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è

    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π: {"created": int, "updated": int, "review": int}

    Pipeline:
        1. extract_commits() - –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–æ–º–º–∏—Ç–æ–≤ —á–µ—Ä–µ–∑ LLM
        2. normalize_commits() - –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π –∏ –¥–µ–¥–ª–∞–π–Ω–æ–≤
        3. validate_and_partition() - –≤–∞–ª–∏–¥–∞—Ü–∏—è –∏ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è –ø–æ –∫–∞—á–µ—Å—Ç–≤—É
        4. upsert_commits() - —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∫–æ–º–º–∏—Ç–æ–≤
        5. enqueue() - –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –∫–æ–º–º–∏—Ç–æ–≤ –≤ Review Queue
    """
    try:
        logger.info(f"Starting commits pipeline for meeting {meeting_page_id}")

        # 1) LLM –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–æ–º–º–∏—Ç–æ–≤ (–≤ executor, —Ç.–∫. —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π)
        extracted_commits = await asyncio.get_event_loop().run_in_executor(
            None,
            lambda: extract_commits(
                text=meeting_text,
                attendees_en=attendees_en,
                meeting_date_iso=meeting_date_iso,
            ),
        )
        logger.info(f"Extracted {len(extracted_commits)} commits from LLM")

        # 2) –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è (–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏, –¥–µ–¥–ª–∞–π–Ω—ã, title, key)
        normalized_commits = normalize_commits(
            extracted_commits,
            attendees_en=attendees_en,
            meeting_date_iso=meeting_date_iso,
        )
        logger.info(f"Normalized {len(normalized_commits)} commits")

        # 3) –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –ø–æ –∫–∞—á–µ—Å—Ç–≤—É
        partition_result = validate_and_partition(
            normalized_commits,
            attendees_en=attendees_en,
            meeting_date_iso=meeting_date_iso,
            meeting_tags=meeting_tags or [],
        )
        logger.info(
            f"Partitioned commits: {len(partition_result.to_commits)} to store, {len(partition_result.to_review)} to review"
        )

        # 4) –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∫–æ–º–º–∏—Ç–æ–≤ –≤ Commits (–≤ executor, —Ç.–∫. —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π)
        commits_result: dict[str, list[str]] = {"created": [], "updated": []}
        if partition_result.to_commits:
            commits_dict = [commit.__dict__ for commit in partition_result.to_commits]
            commits_result = await asyncio.get_event_loop().run_in_executor(
                None, lambda: upsert_commits(meeting_page_id, commits_dict)
            )

        # 5) –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–º–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–æ–º–º–∏—Ç–æ–≤ –≤ Review Queue —Å –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–µ–π (–≤ executor, —Ç.–∫. —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π)
        review_stats = {"created": 0, "updated": 0}

        if partition_result.to_review:
            try:
                # to_review —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–ª–æ–≤–∞—Ä–∏, —Ç–æ–ª—å–∫–æ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–æ–ª—è
                review_items: list[dict[str, Any]] = []
                for review_dict in partition_result.to_review:
                    # review_dict —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è —Å–ª–æ–≤–∞—Ä–µ–º –∏–∑ commit_validate.py
                    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–æ–ª—è –¥–ª—è Review Queue
                    review_item = review_dict.copy()  # –ö–æ–ø–∏—Ä—É–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å

                    # –î–æ–±–∞–≤–ª—è–µ–º reason –∏–∑ —Ñ–ª–∞–≥–æ–≤ –µ—Å–ª–∏ –µ—Å—Ç—å
                    if "reason" not in review_item:
                        review_item["reason"] = (
                            ", ".join(review_dict.get("flags", [])) or "Low confidence"
                        )

                    # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é key –¥–ª—è –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏
                    if "key" not in review_item:
                        review_item["key"] = build_key(
                            review_dict.get("text", ""),
                            review_dict.get("assignees", []),
                            review_dict.get("due_iso"),
                        )

                    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–≥–∏ –≤—Å—Ç—Ä–µ—á–∏
                    review_item["tags"] = review_dict.get("tags", []) + meeting_tags

                    review_items.append(review_item)

                # –ò—Å–ø–æ–ª—å–∑—É–µ–º upsert —Å –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–µ–π –ø–æ –∫–ª—é—á—É
                review_stats = await asyncio.get_event_loop().run_in_executor(
                    None, lambda: enqueue_with_upsert(review_items, meeting_page_id)
                )

            except Exception as e:
                logger.error(f"Error enqueueing review items: {e}")
                # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É –¥–∞–∂–µ –µ—Å–ª–∏ Review Queue –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç

        stats = {
            "created": len(commits_result.get("created", [])),
            "updated": len(commits_result.get("updated", [])),
            "review_created": review_stats.get("created", 0),
            "review_updated": review_stats.get("updated", 0),
        }

        logger.info(f"Commits pipeline completed: {stats}")
        return stats

    except Exception as e:
        logger.exception(f"Error in commits pipeline for meeting {meeting_page_id}: {e}")
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω—É–ª–µ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–∏ –æ—à–∏–±–∫–µ
        return {"created": 0, "updated": 0, "review_created": 0, "review_updated": 0}


async def run_pipeline(msg: Message, state: FSMContext, extra: str | None):
    try:
        data = await state.get_data()
        raw_bytes = data.get("raw_bytes")
        text = data.get("text")
        filename = data.get("filename") or "meeting.txt"
        prompt_file = data.get("prompt_file")

        if not prompt_file:
            await msg.answer("–ù–µ –≤—ã–±—Ä–∞–Ω —à–∞–±–ª–æ–Ω. –ù–∞—á–Ω–∏ –∑–∞–Ω–æ–≤–æ: –ø—Ä–∏—à–ª–∏ —Ñ–∞–π–ª/—Ç–µ–∫—Å—Ç.")
            await state.clear()
            return

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        await msg.answer("üîÑ <b>–ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É...</b>\n\nüìÑ –ò–∑–≤–ª–µ–∫–∞—é —Ç–µ–∫—Å—Ç –∏–∑ —Ñ–∞–π–ª–∞...")

        # 1) normalize
        meta = normalize_run(raw_bytes=raw_bytes, text=text, filename=filename)

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏
        await msg.answer("ü§ñ <b>–°—É–º–º–∞—Ä–∏–∑–∏—Ä—É—é —á–µ—Ä–µ–∑ AI...</b>\n\n‚è≥ –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å 1-4 –º–∏–Ω—É—Ç—ã...")

        # 2) summarize
        prompt_path = (PROMPTS_DIR / prompt_file).as_posix()
        summary_md = await summarize_run(text=meta["text"], prompt_path=prompt_path, extra=extra)

        # 3) —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ç–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ (v0/v1/both –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫)
        tags = tag_text_for_meeting(summary_md, meta)
        logger.info(f"Meeting tagged with {len(tags)} canonical tags using unified system")

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ Notion
        await msg.answer("üíæ <b>–°–æ—Ö—Ä–∞–Ω—è—é –≤ Notion...</b>\n\nüìù –°–æ–∑–¥–∞—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")

        # 4) –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è Notion
        # –ö–∞–Ω–æ–Ω–∏–∑–∏—Ä—É–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫ EN –∏–º–µ–Ω–∞–º
        raw_attendees = meta.get("attendees", [])
        attendees_en = canonicalize_list(raw_attendees)
        logger.info(f"Attendees processing: raw={raw_attendees} ‚Üí canonical={attendees_en}")

        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∏ –ø–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞—Ç—É –≤—Å—Ç—Ä–µ—á–∏
        raw_date = meta.get("date", "").strip()
        meeting_date_iso = validate_date_iso(raw_date)

        if not meeting_date_iso:
            # –ï—Å–ª–∏ –¥–∞—Ç–∞ –Ω–µ–≤–∞–ª–∏–¥–Ω–∞ –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞—Ç—É —Å–æ–æ–±—â–µ–Ω–∏—è
            meeting_date_iso = msg.date.date().isoformat()
            if raw_date:
                logger.warning(
                    f"Invalid date format '{raw_date}', using message date: {meeting_date_iso}"
                )
            else:
                logger.info(f"No date found in transcript, using message date: {meeting_date_iso}")

        # Notion upsert —Å –∫–∞–Ω–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        notion_url = upsert_meeting(
            {
                "title": meta["title"],
                "date": meeting_date_iso,
                "attendees": attendees_en,  # –ö–∞–Ω–æ–Ω–∏—á–µ—Å–∫–∏–µ EN –∏–º–µ–Ω–∞
                "source": "telegram",
                "raw_hash": meta["raw_hash"],
                "summary_md": summary_md,
                "tags": tags,
            }
        )

        # 5) –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–º–∏—Ç–æ–≤
        await msg.answer(
            "üîç <b>–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∫–æ–º–º–∏—Ç—ã...</b>\n\nü§ñ –ò–∑–≤–ª–µ–∫–∞—é –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞ –∏–∑ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞..."
        )

        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º page_id –∏–∑ URL –¥–ª—è —Å–≤—è–∑–∏ –∫–æ–º–º–∏—Ç–æ–≤ —Å –≤—Å—Ç—Ä–µ—á–µ–π
            meeting_page_id = _extract_page_id_from_url(notion_url)

            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞–π–ø–ª–∞–π–Ω –∫–æ–º–º–∏—Ç–æ–≤ —Å —Ç–µ–º–∏ –∂–µ –∫–∞–Ω–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            stats = await run_commits_pipeline(
                meeting_page_id=meeting_page_id,
                meeting_text=meta["text"],
                attendees_en=attendees_en,  # –¢–µ –∂–µ –∫–∞–Ω–æ–Ω–∏—á–µ—Å–∫–∏–µ EN –∏–º–µ–Ω–∞
                meeting_date_iso=meeting_date_iso,  # –í–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω–∞—è ISO –¥–∞—Ç–∞
                meeting_tags=tags,
                msg=msg,  # –ü–µ—Ä–µ–¥–∞–µ–º message –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            )

            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç –ø–æ –∫–æ–º–º–∏—Ç–∞–º
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ —Ä–µ–≤—å—é
            total_review = stats.get("review_created", 0) + stats.get("review_updated", 0)

            commits_report = (
                f"üìä <b>–ö–æ–º–º–∏—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã:</b>\n"
                f"‚Ä¢ ‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {stats['created'] + stats['updated']}\n"
                f"‚Ä¢ üÜï –°–æ–∑–¥–∞–Ω–æ: {stats['created']}\n"
                f"‚Ä¢ üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {stats['updated']}\n"
                f"‚Ä¢ üîç –ù–∞ —Ä–µ–≤—å—é: {total_review}"
            )

            # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª–∏ –ø–æ —Ä–µ–≤—å—é –µ—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
            if total_review > 0:
                commits_report += (
                    f" (üÜï{stats.get('review_created', 0)} üîÑ{stats.get('review_updated', 0)})"
                )

        except Exception as e:
            logger.exception(f"Error in commits pipeline: {e}")
            # –ë–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—à–∏–±–∫–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            if "COMMITS_DB_ID" in str(e) or "REVIEW_DB_ID" in str(e):
                commits_report = "‚ö†Ô∏è <b>–ö–æ–º–º–∏—Ç—ã:</b> –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö Notion (COMMITS_DB_ID/REVIEW_DB_ID)."
            elif "400 Bad Request" in str(e):
                commits_report = (
                    "‚ö†Ô∏è <b>–ö–æ–º–º–∏—Ç—ã:</b> –æ—à–∏–±–∫–∞ Notion API (–ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö)."
                )
            else:
                commits_report = "‚ö†Ô∏è <b>–ö–æ–º–º–∏—Ç—ã:</b> –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏, –≤—Å—Ç—Ä–µ—á–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞."

        # 6) –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç —Å –∫—Ä–∞—Å–∏–≤—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        from app.bot.formatters import format_meeting_card, format_success_card

        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤—Å—Ç—Ä–µ—á–∏ –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏
        meeting_data = {
            "title": filename.replace("_", " ").replace(".txt", ""),
            "date": meta.get("meeting_date"),
            "attendees": attendees_en,
            "tags": tags,
            "url": notion_url,
        }

        # –ö—Ä–∞—Å–∏–≤–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ –≤—Å—Ç—Ä–µ—á–∏
        meeting_card = format_meeting_card(meeting_data)

        # –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä
        preview = "\n".join(summary_md.splitlines()[:MAX_PREVIEW_LINES])
        preview_card = f"üìã <b>–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä:</b>\n\n" f"<pre>{preview}</pre>"

        chunks = [
            format_success_card("–í—Å—Ç—Ä–µ—á–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!"),
            meeting_card,
            preview_card,
            commits_report,
        ]
        for part in chunks:
            await msg.answer(part, parse_mode="HTML")

        # 7) –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ —Ä–µ–≤—å—é —Ç–µ–≥–æ–≤ (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ)
        tags_review_started = False
        try:
            from app.bot.handlers_tags_review import start_tags_review

            meeting_page_id = _extract_page_id_from_url(notion_url)
            user_id = msg.from_user.id if msg.from_user else 0

            await start_tags_review(
                meeting_id=meeting_page_id,
                original_tags=tags,
                user_id=user_id,
                message=msg,
                state=state,
            )
            tags_review_started = True

        except Exception as e:
            logger.warning(f"Failed to start tags review: {e}")
            # –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–æ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—ã—á–Ω–æ–µ –º–µ–Ω—é
            from app.bot.handlers_inline import build_main_menu_kb

            await msg.answer("üéØ <b>–ß—Ç–æ –¥–∞–ª—å—à–µ?</b>", reply_markup=build_main_menu_kb())

        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ä–µ–≤—å—é —Ç–µ–≥–æ–≤ –ù–ï –±—ã–ª–æ –∑–∞–ø—É—â–µ–Ω–æ
        if not tags_review_started:
            await state.clear()

    except Exception as e:
        await msg.answer(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å. –ü—Ä–∏—á–∏–Ω–∞: {type(e).__name__}: {e}")
        await state.clear()  # –ü—Ä–∏ –æ—à–∏–±–∫–µ –≤—Å–µ–≥–¥–∞ –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ


# ====== –ö–û–ú–ê–ù–î–´ –î–õ–Ø –£–ü–†–ê–í–õ–ï–ù–ò–Ø REVIEW QUEUE ======


def _clean_sid(s: str) -> str:
    """–û—á–∏—â–∞–µ—Ç short ID –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ 6 —Å–∏–º–≤–æ–ª–æ–≤."""
    return re.sub(r"[^0-9A-Za-z]", "", s)[-6:]


@router.message(F.text.regexp(r"^/review(\s+\d+)?$"))
async def cmd_review(msg: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –æ—Ç–∫—Ä—ã—Ç—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ Review queue."""
    try:
        parts = (msg.text or "").strip().split()
        limit = int(parts[1]) if len(parts) > 1 else 5

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é –ª–æ–≥–∏–∫—É —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –∑–∞–ø–∏—Å–µ–π
        items = list_open_reviews(limit=limit)

        if not items:
            await _send_empty_queue_message_with_menu(msg)
            return

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤–æ–µ –∫—Ä–∞—Å–∏–≤–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∫–Ω–æ–ø–∫–æ–π "Confirm All"
        from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup

        from app.bot.formatters import format_review_card
        from app.bot.handlers_inline import build_review_item_kb

        confirm_all_kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text="‚úÖ Confirm All", callback_data="review_confirm_all"),
                    InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="main_review"),
                ]
            ]
        )

        await msg.answer(
            f"üìã <b>Review Queue ({len(items)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤):</b>\n\n"
            f"üí° <i>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∫–æ–º–º–∏—Ç—ã:</i>",
            reply_markup=confirm_all_kb,
        )

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç —Å –∫–Ω–æ–ø–∫–∞–º–∏
        for item in items:
            short_id = item["short_id"]
            formatted_card = format_review_card(item)
            await msg.answer(
                formatted_card, parse_mode="HTML", reply_markup=build_review_item_kb(short_id)
            )

    except Exception as e:
        logger.error(f"Error in cmd_review: {e}")
        await msg.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ review.")


@router.message(F.text.regexp(r"^/flip\s+\S+$", flags=re.I))
async def cmd_flip(msg: Message):
    """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç direction –º–µ–∂–¥—É mine –∏ theirs."""
    try:
        short_id = _clean_sid((msg.text or "").strip().split()[1])
        item = get_by_short_id(short_id)

        if not item:
            await msg.answer(f"‚ùå –ö–∞—Ä—Ç–æ—á–∫–∞ [{short_id}] –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ /review.")
            return

        current_direction = item["direction"] or "theirs"
        new_direction = "mine" if current_direction == "theirs" else "theirs"

        try:
            success = update_fields(item["page_id"], direction=new_direction)
            if success:
                await msg.answer(f"‚úÖ [{short_id}] Direction ‚Üí {new_direction}")
            else:
                await msg.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å direction –¥–ª—è [{short_id}].")
        except Exception as e:
            logger.error(f"Error updating direction: {e}")
            await msg.answer(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è direction: {e}")

    except Exception as e:
        logger.error(f"Error in cmd_flip: {e}")
        await msg.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ flip.")


@router.message(F.text.regexp(r"^/assign\s+\S+\s+.+$", flags=re.I))
async def cmd_assign(msg: Message):
    """–ù–∞–∑–Ω–∞—á–∞–µ—Ç –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –Ω–∞ –∫–∞—Ä—Ç–æ—á–∫—É."""
    try:
        parts = (msg.text or "").strip().split(maxsplit=2)
        if len(parts) < 3:
            await msg.answer("–°–∏–Ω—Ç–∞–∫—Å–∏—Å: /assign <id> <–∏–º—è>")
            return

        short_id = _clean_sid(parts[1])
        raw_names = parts[2]
        item = get_by_short_id(short_id)

        if not item:
            await msg.answer(f"‚ùå –ö–∞—Ä—Ç–æ—á–∫–∞ [{short_id}] –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ /review.")
            return

        # –†–∞–∑–±–∏—Ä–∞–µ–º –∏–º–µ–Ω–∞ (—á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª –∏–ª–∏ –∑–∞–ø—è—Ç—É—é)
        raw_list = [x.strip() for x in raw_names.replace(",", " ").split() if x.strip()]

        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —á–µ—Ä–µ–∑ —Å–ª–æ–≤–∞—Ä—å people.json
        normalized_assignees = normalize_assignees(raw_list, attendees_en=[])

        if not normalized_assignees:
            await msg.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è(–µ–π): {raw_names}")
            return

        success = update_fields(item["page_id"], assignees=normalized_assignees)

        if success:
            assignees_str = ", ".join(normalized_assignees)
            await msg.answer(f"‚úÖ [{short_id}] Assignee ‚Üí {assignees_str}")
        else:
            await msg.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å assignee –¥–ª—è [{short_id}].")

    except Exception as e:
        logger.error(f"Error in cmd_assign: {e}")
        await msg.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ assign.")


@router.message(F.text.regexp(r"^/delete\s+\S+$", flags=re.I))
async def cmd_delete(msg: Message):
    """–ü–æ–º–µ—á–∞–µ—Ç –∫–∞—Ä—Ç–æ—á–∫—É –∫–∞–∫ dropped."""
    try:
        short_id = _clean_sid((msg.text or "").strip().split()[1])
        item = get_by_short_id(short_id)

        if not item:
            await msg.answer(f"‚ùå –ö–∞—Ä—Ç–æ—á–∫–∞ [{short_id}] –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ /review.")
            return

        try:
            # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
            from app.core.review_queue import validate_review_action

            is_valid, error_msg = validate_review_action(item, "delete")
            if not is_valid:
                await msg.answer(f"‚ùå {error_msg}")
                return

            set_status(item["page_id"], REVIEW_STATUS_DROPPED)
            await msg.answer(f"‚úÖ [{short_id}] –£–¥–∞–ª–µ–Ω–æ (dropped).")
            logger.info(f"Review item {short_id} marked as dropped")
        except Exception as e:
            logger.error(f"Error setting status: {e}")
            await msg.answer(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {e}")

    except Exception as e:
        logger.error(f"Error in cmd_delete: {e}")
        await msg.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ delete.")


@router.message(F.text.regexp(r"^/confirm\s+\S+.*$", flags=re.I))
async def cmd_confirm(msg: Message):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –∫–∞—Ä—Ç–æ—á–∫—É –∏ —Å–æ–∑–¥–∞–µ—Ç –∫–æ–º–º–∏—Ç."""
    try:
        parts = (msg.text or "").strip().split()
        if len(parts) < 2:
            await msg.answer("‚ùå –°–∏–Ω—Ç–∞–∫—Å–∏—Å: /confirm <short_id>")
            return

        if len(parts) > 2:
            await msg.answer(
                f"‚ùå –ö–æ–º–∞–Ω–¥–∞ /confirm –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ç–æ–ª—å–∫–æ ID –∫–∞—Ä—Ç–æ—á–∫–∏.\n"
                f"–°–∏–Ω—Ç–∞–∫—Å–∏—Å: /confirm <short_id>\n"
                f"–í–æ–∑–º–æ–∂–Ω–æ, –≤—ã —Ö–æ—Ç–µ–ª–∏: /assign {parts[1]} {' '.join(parts[2:])}"
            )
            return

        short_id = _clean_sid(parts[1])
        item = get_by_short_id(short_id)

        if not item:
            await msg.answer(f"‚ùå –ö–∞—Ä—Ç–æ—á–∫–∞ [{short_id}] –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ /review.")
            return

        # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–æ–º–º–∏—Ç–∞
        text = item["text"] or ""
        direction = item["direction"] or "theirs"
        assignees = item["assignees"] or []
        due_iso = item["due_iso"]

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º title –∏ key
        title = build_title(direction, text, assignees, due_iso)
        key = build_key(text, assignees, due_iso)

        # –°–æ–∑–¥–∞–µ–º –∫–æ–º–º–∏—Ç
        commit_item = {
            "title": title,
            "text": text,
            "direction": direction,
            "assignees": assignees,
            "due_iso": due_iso,
            "confidence": item["confidence"] or 0.6,
            "flags": [],
            "key": key,
            "tags": [],  # TODO: –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ —Ç–µ–≥–æ–≤ –∏–∑ Meeting
            "status": "open",
        }

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Commits
        meeting_page_id = item["meeting_page_id"]
        if not meeting_page_id:
            await msg.answer(f"‚ùå [{short_id}] –ù–µ –Ω–∞–π–¥–µ–Ω meeting_page_id.")
            return

        result = upsert_commits(meeting_page_id, [commit_item])
        created = len(result.get("created", []))
        updated = len(result.get("updated", []))

        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
        from app.core.review_queue import validate_review_action

        is_valid, error_msg = validate_review_action(item, "confirm")
        if not is_valid:
            await msg.answer(f"‚ùå {error_msg}")
            return

        if created or updated:
            # –ü–æ–ª—É—á–∞–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ/–æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –∫–æ–º–º–∏—Ç–∞
            commit_ids = result.get("created", []) + result.get("updated", [])
            commit_id = commit_ids[0] if commit_ids else None

            # –ü–æ–º–µ—á–∞–µ–º review –∫–∞–∫ resolved —Å –ø—Ä–∏–≤—è–∑–∫–æ–π –∫ –∫–æ–º–º–∏—Ç—É
            try:
                set_status(item["page_id"], REVIEW_STATUS_RESOLVED, linked_commit_id=commit_id)
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —É—Å–ø–µ—Ö–∞
                from app.bot.formatters import format_success_card

                success_details = {
                    "created": created,
                    "updated": updated,
                    "commit_id": commit_id,
                    "review_status": "resolved",
                }

                formatted_response = format_success_card(
                    f"[{short_id}] –ö–æ–º–º–∏—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω", success_details
                )
                await msg.answer(formatted_response, parse_mode="HTML")
                logger.info(
                    f"Review item {short_id} confirmed, linked to commit {commit_id[:8] if commit_id else 'none'}"
                )
            except Exception as e:
                logger.error(f"Error setting resolved status: {e}")
                await msg.answer(
                    f"‚úÖ [{short_id}] –ö–æ–º–º–∏—Ç —Å–æ–∑–¥–∞–Ω, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å: {e}"
                )
        else:
            await msg.answer(f"‚ùå [{short_id}] –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–æ–º–º–∏—Ç.")

    except Exception as e:
        logger.error(f"Error in cmd_confirm: {e}")
        await msg.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ confirm.")


@router.message(F.text.regexp(r"^/(review|flip|assign|delete|confirm)\b", flags=re.I))
async def cmd_review_fallback(msg: Message):
    """Fallback –¥–ª—è –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ –∫–æ–º–∞–Ω–¥ review."""
    text = (msg.text or "").strip()

    if text.startswith("/review"):
        await msg.answer("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å.\n" "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /review [–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ]")
    elif text.startswith("/flip"):
        await msg.answer("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å.\n" "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /flip <short_id>")
    elif text.startswith("/assign"):
        await msg.answer("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å.\n" "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /assign <short_id> <–∏–º—è>")
    elif text.startswith("/delete"):
        await msg.answer("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å.\n" "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /delete <short_id>")
    elif text.startswith("/confirm"):
        await msg.answer("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å.\n" "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /confirm <short_id>")
