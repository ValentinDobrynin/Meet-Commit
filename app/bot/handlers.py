# app/bot/handlers.py
from __future__ import annotations

from pathlib import Path

from aiogram import F, Router
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, Message
from aiogram.utils.keyboard import InlineKeyboardBuilder

from app.core.llm_summarize import run as summarize_run
from app.core.normalize import run as normalize_run
from app.core.tagger import run as tagger_run
from app.gateways.notion_gateway import upsert_meeting

router = Router()

PROMPTS_DIR = Path(__file__).resolve().parent.parent / "prompts"
MAX_PREVIEW_LINES = 12


class IngestStates(StatesGroup):
    waiting_prompt = State()
    waiting_extra = State()


def _prompts_kb() -> InlineKeyboardMarkup:
    kb = InlineKeyboardBuilder()
    # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –∫–∞–∫ .txt, —Ç–∞–∫ –∏ .md —Ñ–∞–π–ª—ã
    txt_files = list(PROMPTS_DIR.glob("*.txt"))
    md_files = list(PROMPTS_DIR.glob("*.md"))
    prompts = sorted(txt_files + md_files)
    for p in prompts:
        kb.button(text=p.stem, callback_data=f"prompt:{p.name}")
    kb.adjust(1)
    return kb.as_markup()


def _skip_kb() -> InlineKeyboardMarkup:
    kb = InlineKeyboardBuilder()
    kb.button(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="extra:skip")
    kb.adjust(1)
    return kb.as_markup()


@router.message(F.text == "/start")
async def cmd_start(msg: Message, state: FSMContext):
    await state.clear()
    await msg.answer("–ü—Ä–∏—à–ª–∏ —Ñ–∞–π–ª –∏–ª–∏ —Ç–µ–∫—Å—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞. –ó–∞—Ç–µ–º –≤—ã–±–µ—Ä–∏ —à–∞–±–ª–æ–Ω —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏.")


@router.message(F.text == "/cancel")
async def cmd_cancel(msg: Message, state: FSMContext):
    await state.clear()
    await msg.answer("–û–∫. –°–±—Ä–æ—Å–∏–ª —Å–æ—Å—Ç–æ—è–Ω–∏–µ.")


@router.message(F.document | (F.text & ~F.text.startswith("/")))
async def receive_input(msg: Message, state: FSMContext):
    raw_bytes: bytes | None = None
    text: str | None = None
    filename = "message.txt"

    if msg.document:
        file = await msg.bot.get_file(msg.document.file_id)
        bytes_io = await msg.bot.download_file(file.file_path)
        raw_bytes = bytes_io.read()
        filename = msg.document.file_name or "meeting.txt"
    else:
        text = msg.text or ""

    await state.update_data(raw_bytes=raw_bytes, text=text, filename=filename)
    await state.set_state(IngestStates.waiting_prompt)
    await msg.answer("–í—ã–±–µ—Ä–∏ —à–∞–±–ª–æ–Ω —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏:", reply_markup=_prompts_kb())


@router.callback_query(F.data.startswith("prompt:"))
async def choose_prompt(cb: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    
    if not data.get("raw_bytes") and not data.get("text"):
        await cb.answer("–ù–µ—Ç –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö. –ü—Ä–∏—à–ª–∏ —Ñ–∞–π–ª –∏–ª–∏ —Ç–µ–∫—Å—Ç.", show_alert=True)
        return

    prompt_file = cb.data.split("prompt:", 1)[1]
    await state.update_data(prompt_file=prompt_file)
    await state.set_state(IngestStates.waiting_extra)
    await cb.message.answer(
        "–î–æ–±–∞–≤–∏—Ç—å —É—Ç–æ—á–Ω–µ–Ω–∏–µ –∫ –ø—Ä–æ–º–ø—Ç—É? –ù–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç –∏–ª–∏ –Ω–∞–∂–º–∏ ¬´–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å¬ª.",
        reply_markup=_skip_kb(),
    )
    await cb.answer()


@router.callback_query(F.data == "extra:skip")
async def extra_skip(cb: CallbackQuery, state: FSMContext):
    await run_pipeline(cb.message, state, extra=None)
    await cb.answer()



@router.message(IngestStates.waiting_extra, F.text)
async def extra_entered(msg: Message, state: FSMContext):
    await run_pipeline(msg, state, extra=msg.text)


async def run_pipeline(msg: Message, state: FSMContext, extra: str | None):
    try:
        data = await state.get_data()
        raw_bytes = data.get("raw_bytes")
        text = data.get("text")
        filename = data.get("filename") or "meeting.txt"
        prompt_file = data.get("prompt_file")

        if not prompt_file:
            await msg.answer("–ù–µ –≤—ã–±—Ä–∞–Ω —à–∞–±–ª–æ–Ω. –ù–∞—á–Ω–∏ –∑–∞–Ω–æ–≤–æ: –ø—Ä–∏—à–ª–∏ —Ñ–∞–π–ª/—Ç–µ–∫—Å—Ç.")
            await state.clear()
            return

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        await msg.answer("üîÑ <b>–ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É...</b>\n\nüìÑ –ò–∑–≤–ª–µ–∫–∞—é —Ç–µ–∫—Å—Ç –∏–∑ —Ñ–∞–π–ª–∞...")

        # 1) normalize
        meta = normalize_run(raw_bytes=raw_bytes, text=text, filename=filename)

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏
        await msg.answer("ü§ñ <b>–°—É–º–º–∞—Ä–∏–∑–∏—Ä—É—é —á–µ—Ä–µ–∑ AI...</b>\n\n‚è≥ –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å 30-60 —Å–µ–∫—É–Ω–¥...")

        # 2) summarize
        prompt_path = (PROMPTS_DIR / prompt_file).as_posix()
        summary_md = summarize_run(text=meta["text"], prompt_path=prompt_path, extra=extra)

        # 3) tagger v0
        tags = tagger_run(summary_md=summary_md, meta=meta)

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ Notion
        await msg.answer("üíæ <b>–°–æ—Ö—Ä–∞–Ω—è—é –≤ Notion...</b>\n\nüìù –°–æ–∑–¥–∞—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")

        # 4) Notion upsert
        notion_url = upsert_meeting(
            {
                "title": meta["title"],
                "date": meta["date"],
                "attendees": meta.get("attendees", []),
                "source": "telegram",
                "raw_hash": meta["raw_hash"],
                "summary_md": summary_md,
                "tags": tags,
            }
        )

        # 5) –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
        preview = "\n".join(summary_md.splitlines()[:MAX_PREVIEW_LINES])
        chunks = [
            f"‚úÖ <b>–ì–æ—Ç–æ–≤–æ!</b>\n\nüìã <b>–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä:</b>\n<pre>{preview}</pre>",
            f"üîó <a href='{notion_url}'>–û—Ç–∫—Ä—ã—Ç—å –ø–æ–ª–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ Notion</a>",
        ]
        for part in chunks:
            await msg.answer(part)

    except Exception as e:
        await msg.answer(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å. –ü—Ä–∏—á–∏–Ω–∞: {type(e).__name__}: {e}")
    finally:
        await state.clear()
