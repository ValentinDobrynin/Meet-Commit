"""
–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è people.json —á–µ—Ä–µ–∑ –±–æ—Ç–∞.
–ü–æ–∑–≤–æ–ª—è–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å –Ω–æ–≤—ã—Ö –ª—é–¥–µ–π, —É–ø—Ä–∞–≤–ª—è—Ç—å –∞–ª–∏–∞—Å–∞–º–∏, –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤.
"""

import json
import logging
from pathlib import Path
from typing import Any

from aiogram import F, Router
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup, Message

from app.core.commit_normalize import normalize_assignees
from app.core.llm_alias_suggestions import generate_alias_suggestions
from app.settings import settings

logger = logging.getLogger(__name__)

people_admin_router = Router()

# –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º
PEOPLE_JSON_PATH = Path("app/dictionaries/people.json")
CANDIDATES_JSON_PATH = Path("app/dictionaries/people_candidates.json")


class PeopleAdminStates(StatesGroup):
    """FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª—é–¥—å–º–∏."""
    
    # –û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
    main_menu = State()
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞
    add_person_name = State()
    add_person_aliases = State()
    
    # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º —á–µ–ª–æ–≤–µ–∫–æ–º
    manage_person_select = State()
    manage_person_menu = State()
    manage_person_add_alias = State()
    
    # –†–∞–±–æ—Ç–∞ —Å –∫–∞–Ω–¥–∏–¥–∞—Ç–∞–º–∏
    candidates_review = State()
    candidates_select_person = State()
    candidates_add_aliases = State()
    
    # –†–∞–±–æ—Ç–∞ —Å LLM –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏
    llm_suggestions_review = State()
    llm_suggestions_select = State()
    
    # –í–≤–æ–¥ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    add_role_input = State()
    add_company_input = State()
    final_confirmation = State()


def load_people_json() -> list[dict[str, Any]]:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç people.json."""
    try:
        with open(PEOPLE_JSON_PATH, encoding='utf-8') as f:
            return json.load(f)  # type: ignore[no-any-return]
    except Exception as e:
        logger.error(f"Error loading people.json: {e}")
        return []


def save_people_json(data: list[dict[str, Any]]) -> bool:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç people.json."""
    try:
        with open(PEOPLE_JSON_PATH, 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
        logger.info(f"Saved people.json with {len(data)} entries")
        return True
    except Exception as e:
        logger.error(f"Error saving people.json: {e}")
        return False


def load_candidates_json() -> dict[str, Any]:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç people_candidates.json."""
    try:
        with open(CANDIDATES_JSON_PATH, encoding='utf-8') as f:
            return json.load(f)  # type: ignore[no-any-return]
    except Exception as e:
        logger.error(f"Error loading candidates.json: {e}")
        return {}


def get_person_by_name(people: list[dict[str, Any]], name: str) -> dict[str, Any] | None:
    """–ù–∞—Ö–æ–¥–∏—Ç —á–µ–ª–æ–≤–µ–∫–∞ –ø–æ –∏–º–µ–Ω–∏ –∏–ª–∏ –∞–ª–∏–∞—Å—É."""
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º normalize_assignees –¥–ª—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –∏–º–µ–Ω–∏
    normalized_names = normalize_assignees([name], [])
    if not normalized_names:
        return None
    
    normalized_name = normalized_names[0]
    
    for person in people:
        if person["name_en"].lower() == normalized_name.lower():
            return person
        for alias in person.get("aliases", []):
            if alias.lower() == normalized_name.lower():
                return person
    return None


def get_suggested_aliases(name: str, candidates: dict[str, Any]) -> list[str]:
    """–ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–µ –∞–ª–∏–∞—Å—ã –¥–ª—è –∏–º–µ–Ω–∏ –∏–∑ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤."""
    suggestions = []
    name_parts = name.split()
    
    # –ò—â–µ–º –≤ candidates –ø–æ —á–∞—Å—Ç—è–º –∏–º–µ–Ω–∏
    candidates_dict = candidates.get("candidates", {})
    
    for candidate, freq in candidates_dict.items():
        if freq < 2:  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Ä–µ–¥–∫–∏–µ –∫–∞–Ω–¥–∏–¥–∞—Ç—ã
            continue
            
        candidate_lower = candidate.lower()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
        match_found = False
        
        # 1. –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å —á–∞—Å—Ç—å—é –∏–º–µ–Ω–∏
        for part in name_parts:
            if part.lower() == candidate_lower:
                match_found = True
                break
        
        # 2. –ö–∞–Ω–¥–∏–¥–∞—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç —á–∞—Å—Ç—å –∏–º–µ–Ω–∏
        if not match_found:
            for part in name_parts:
                if len(part) >= 3 and part.lower() in candidate_lower:
                    match_found = True
                    break
        
        # 3. –ß–∞—Å—Ç—å –∏–º–µ–Ω–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
        if not match_found:
            for part in name_parts:
                if len(candidate) >= 3 and candidate_lower in part.lower():
                    match_found = True
                    break
        
        # 4. –û–±—â–∏–µ —Å–∏–º–≤–æ–ª—ã (–¥–ª—è –∫–∏—Ä–∏–ª–ª–∏—Ü—ã/–ª–∞—Ç–∏–Ω–∏—Ü—ã)
        if not match_found:
            for part in name_parts:
                if len(part) >= 3 and len(candidate) >= 3:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ —Å–∏–º–≤–æ–ª–æ–≤
                    part_chars = set(part.lower())
                    candidate_chars = set(candidate_lower)
                    common_chars = part_chars & candidate_chars
                    if len(common_chars) >= min(3, len(part) // 2, len(candidate) // 2):
                        match_found = True
                        break
        
        if match_found:
            suggestions.append(candidate)
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —á–∞—Å—Ç–æ—Ç–µ
    suggestions.sort(key=lambda x: candidates_dict.get(x, 0), reverse=True)
    return suggestions[:10]  # –ú–∞–∫—Å–∏–º—É–º 10 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π


def build_main_menu_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª—é–¥—å–º–∏."""
    buttons = [
        [InlineKeyboardButton(text="üë§ –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞", callback_data="people_add_new")],
        [InlineKeyboardButton(text="‚úèÔ∏è –£–ø—Ä–∞–≤–ª—è—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º", callback_data="people_manage_existing")],
        [InlineKeyboardButton(text="üîç –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤", callback_data="people_review_candidates")],
        [InlineKeyboardButton(text="üß© –ü–µ—Ä–µ–Ω–µ—Å—Ç–∏ –∏–∑ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤", callback_data="people_miner_start")],
        [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="people_stats")],
        [InlineKeyboardButton(text="‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="people_close")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)


def build_person_list_keyboard(people: list[dict[str, Any]], page: int = 0, per_page: int = 8) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º –ª—é–¥–µ–π."""
    start_idx = page * per_page
    end_idx = start_idx + per_page
    page_people = people[start_idx:end_idx]
    
    buttons = []
    for person in page_people:
        name = person["name_en"]
        alias_count = len(person.get("aliases", []))
        text = f"{name} ({alias_count} –∞–ª–∏–∞—Å–æ–≤)"
        buttons.append([InlineKeyboardButton(text=text, callback_data=f"people_select_{name}")])
    
    # –ù–∞–≤–∏–≥–∞—Ü–∏—è
    nav_buttons = []
    if page > 0:
        nav_buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"people_list_page_{page-1}"))
    if end_idx < len(people):
        nav_buttons.append(InlineKeyboardButton(text="‚û°Ô∏è –î–∞–ª–µ–µ", callback_data=f"people_list_page_{page+1}"))
    
    if nav_buttons:
        buttons.append(nav_buttons)
    
    buttons.append([InlineKeyboardButton(text="üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="people_main_menu")])
    
    return InlineKeyboardMarkup(inline_keyboard=buttons)


def build_person_menu_keyboard(person_name: str) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º —á–µ–ª–æ–≤–µ–∫–æ–º."""
    buttons = [
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–ª–∏–∞—Å", callback_data=f"people_add_alias_{person_name}")],
        [InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∞–ª–∏–∞—Å", callback_data=f"people_remove_alias_{person_name}")],
        [InlineKeyboardButton(text="üîç –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∞–ª–∏–∞—Å—ã", callback_data=f"people_suggest_aliases_{person_name}")],
        [InlineKeyboardButton(text="üè¢ –ò–∑–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å", callback_data=f"people_edit_role_{person_name}")],
        [InlineKeyboardButton(text="üè¢ –ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–º–ø–∞–Ω–∏—é", callback_data=f"people_edit_company_{person_name}")],
        [InlineKeyboardButton(text="üîô –ö —Å–ø–∏—Å–∫—É –ª—é–¥–µ–π", callback_data="people_manage_existing")],
        [InlineKeyboardButton(text="üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="people_main_menu")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)


def build_aliases_keyboard(aliases: list[str], person_name: str, action: str) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –∞–ª–∏–∞—Å–æ–≤."""
    buttons = []
    for alias in aliases[:10]:  # –ú–∞–∫—Å–∏–º—É–º 10 –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
        emoji = "‚úÖ" if action == "add" else "‚ùå"
        buttons.append([InlineKeyboardButton(
            text=f"{emoji} {alias}", 
            callback_data=f"people_{action}_alias_confirm_{person_name}_{alias}"
        )])
    
    buttons.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"people_select_{person_name}")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)


def _build_suggestions_keyboard(suggestions: list[str], selected: list[str]) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –∞–ª–∏–∞—Å–æ–≤."""
    buttons = []
    
    # –ê–ª–∏–∞—Å—ã (–º–∞–∫—Å–∏–º—É–º 12 –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞)
    for alias in suggestions[:12]:
        emoji = "‚úÖ" if alias in selected else "‚òê"
        buttons.append([InlineKeyboardButton(
            text=f"{emoji} {alias}",
            callback_data=f"people_toggle_alias_{alias}"
        )])
    
    # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    control_buttons = []
    if selected:
        control_buttons.append(InlineKeyboardButton(
            text=f"‚û°Ô∏è –î–∞–ª–µ–µ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ ({len(selected)})",
            callback_data="people_proceed_with_selected"
        ))
    
    if control_buttons:
        buttons.append(control_buttons)
    
    buttons.append([
        InlineKeyboardButton(text="‚è≠Ô∏è –¢–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω–æ–µ –∏–º—è", callback_data="people_skip_aliases"),
        InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="people_main_menu")
    ])
    
    return InlineKeyboardMarkup(inline_keyboard=buttons)


@people_admin_router.message(Command("people_admin"))
async def cmd_people_admin(message: Message, state: FSMContext) -> None:
    """–ì–ª–∞–≤–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è people.json."""
    user_id = message.from_user.id if message.from_user else 0
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if not settings.is_admin(user_id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    await state.set_state(PeopleAdminStates.main_menu)
    
    people = load_people_json()
    text = (
        "üßë‚Äçüíº **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–∑–æ–π –ª—é–¥–µ–π**\n\n"
        f"üìä –í—Å–µ–≥–æ –ª—é–¥–µ–π –≤ –±–∞–∑–µ: **{len(people)}**\n"
        f"üìù –í—Å–µ–≥–æ –∞–ª–∏–∞—Å–æ–≤: **{sum(len(p.get('aliases', [])) for p in people)}**\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )
    
    await message.answer(
        text,
        reply_markup=build_main_menu_keyboard(),
        parse_mode="Markdown"
    )


@people_admin_router.callback_query(F.data == "people_main_menu")
async def callback_main_menu(callback: CallbackQuery, state: FSMContext) -> None:
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    await state.set_state(PeopleAdminStates.main_menu)
    
    people = load_people_json()
    text = (
        "üßë‚Äçüíº **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–∑–æ–π –ª—é–¥–µ–π**\n\n"
        f"üìä –í—Å–µ–≥–æ –ª—é–¥–µ–π –≤ –±–∞–∑–µ: **{len(people)}**\n"
        f"üìù –í—Å–µ–≥–æ –∞–ª–∏–∞—Å–æ–≤: **{sum(len(p.get('aliases', [])) for p in people)}**\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )
    
    await callback.message.edit_text(
        text,
        reply_markup=build_main_menu_keyboard(),
        parse_mode="Markdown"
    )


@people_admin_router.callback_query(F.data == "people_add_new")
async def callback_add_new_person(callback: CallbackQuery, state: FSMContext) -> None:
    """–ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞."""
    await state.set_state(PeopleAdminStates.add_person_name)
    
    text = (
        "üë§ **–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞**\n\n"
        "–í–≤–µ–¥–∏—Ç–µ **–∫–∞–Ω–æ–Ω–∏—á–µ—Å–∫–æ–µ –∏–º—è** –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ\n"
        "(–Ω–∞–ø—Ä–∏–º–µ—Ä: `John Smith`, `Maria Garcia`):"
    )
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="people_main_menu")]
    ])
    
    await callback.message.edit_text(
        text,
        reply_markup=keyboard,
        parse_mode="Markdown"
    )


@people_admin_router.message(PeopleAdminStates.add_person_name)
async def process_add_person_name(message: Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –Ω–æ–≤–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞."""
    name = message.text.strip()
    
    if not name:
        await message.answer("‚ùå –ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —á–µ–ª–æ–≤–µ–∫ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    people = load_people_json()
    if get_person_by_name(people, name):
        await message.answer(f"‚ùå –ß–µ–ª–æ–≤–µ–∫ —Å –∏–º–µ–Ω–µ–º '{name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –∏–º—è:")
        return
    
    await state.update_data(new_person_name=name)
    await state.set_state(PeopleAdminStates.llm_suggestions_review)
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–º–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ LLM
    await message.answer("ü§ñ –ì–µ–Ω–µ—Ä–∏—Ä—É—é —É–º–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∞–ª–∏–∞—Å–æ–≤ —á–µ—Ä–µ–∑ –ò–ò...")
    
    llm_suggestions = generate_alias_suggestions(name, [name])
    
    # –¢–∞–∫–∂–µ –ø–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏–∑ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
    candidates = load_candidates_json()
    candidates_suggestions = get_suggested_aliases(name, candidates)
    
    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è (LLM –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–µ–µ)
    all_suggestions = []
    seen_lower = set()
    
    # –°–Ω–∞—á–∞–ª–∞ LLM –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
    for alias in llm_suggestions:
        if alias.lower() not in seen_lower:
            all_suggestions.append(alias)
            seen_lower.add(alias.lower())
    
    # –ó–∞—Ç–µ–º –∏–∑ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ (–µ—Å–ª–∏ –Ω–µ –¥—É–±–ª–∏—Ä—É—é—Ç—Å—è)
    for alias in candidates_suggestions:
        if alias.lower() not in seen_lower:
            all_suggestions.append(alias)
            seen_lower.add(alias.lower())
    
    await state.update_data(suggested_aliases=all_suggestions)
    
    text = (
        f"‚úÖ **–ò–º—è –ø—Ä–∏–Ω—è—Ç–æ:** `{name}`\n\n"
        "ü§ñ **–£–º–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∞–ª–∏–∞—Å–æ–≤**\n\n"
    )
    
    if all_suggestions:
        text += f"–ù–∞–π–¥–µ–Ω–æ **{len(all_suggestions)}** –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π:\n"
        for i, alias in enumerate(all_suggestions[:10], 1):
            text += f"{i}. `{alias}`\n"
        
        if len(all_suggestions) > 10:
            text += f"... –∏ –µ—â–µ {len(all_suggestions) - 10}\n"
        
        text += "\n**–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:**"
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –í—ã–±—Ä–∞—Ç—å –∞–ª–∏–∞—Å—ã", callback_data="people_select_aliases")],
            [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤—Ä—É—á–Ω—É—é", callback_data="people_manual_aliases")],
            [InlineKeyboardButton(text="‚è≠Ô∏è –¢–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω–æ–µ –∏–º—è", callback_data="people_skip_aliases")],
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="people_main_menu")]
        ])
    else:
        text += "‚ùå –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.\n\n"
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤—Ä—É—á–Ω—É—é", callback_data="people_manual_aliases")],
            [InlineKeyboardButton(text="‚è≠Ô∏è –¢–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω–æ–µ –∏–º—è", callback_data="people_skip_aliases")],
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="people_main_menu")]
        ])
    
    await message.answer(
        text,
        reply_markup=keyboard,
        parse_mode="Markdown"
    )


@people_admin_router.message(PeopleAdminStates.add_person_aliases)
async def process_add_person_aliases(message: Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∞–ª–∏–∞—Å–æ–≤ –¥–ª—è –Ω–æ–≤–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞."""
    data = await state.get_data()
    name = data.get("new_person_name")
    
    if not name:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –∏–º—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        await state.set_state(PeopleAdminStates.main_menu)
        return
    
    # –ü–∞—Ä—Å–∏–º –∞–ª–∏–∞—Å—ã
    aliases_text = (message.text or "").strip()
    if aliases_text.lower() == "/skip":
        manual_aliases = []  # –¢–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω–æ–µ –∏–º—è
    else:
        # –†–∞–∑–¥–µ–ª—è–µ–º –ø–æ –∑–∞–ø—è—Ç—ã–º –∏–ª–∏ –Ω–æ–≤—ã–º —Å—Ç—Ä–æ–∫–∞–º
        manual_aliases: list[str] = []
        for line in aliases_text.split('\n'):
            for alias in line.split(','):
                alias = alias.strip()
                if alias and alias != name:  # –ò—Å–∫–ª—é—á–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –∏–º—è
                    manual_aliases.append(alias)
    
    # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å —É–∂–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ –∞–ª–∏–∞—Å–∞–º–∏
    selected_aliases = data.get("selected_aliases", [])
    all_aliases = selected_aliases + manual_aliases
    
    # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
    unique_aliases = []
    seen_lower = set()
    for alias in all_aliases:
        if alias.lower() not in seen_lower:
            unique_aliases.append(alias)
            seen_lower.add(alias.lower())
    
    await state.update_data(selected_aliases=unique_aliases)
    await state.set_state(PeopleAdminStates.add_role_input)
    
    text = (
        f"‚úÖ **–ê–ª–∏–∞—Å—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã**\n\n"
        f"üë§ **–ò–º—è:** `{name}`\n"
        f"üìù **–ê–ª–∏–∞—Å—ã ({len(unique_aliases) + 1}):**\n"
        f"‚Ä¢ `{name}` (–æ—Å–Ω–æ–≤–Ω–æ–µ)\n"
    )
    
    for alias in unique_aliases:
        text += f"‚Ä¢ `{alias}`\n"
    
    text += (
        "\nüè¢ **–í–≤–µ–¥–∏—Ç–µ —Ä–æ–ª—å/–¥–æ–ª–∂–Ω–æ—Å—Ç—å —á–µ–ª–æ–≤–µ–∫–∞**\n"
        "(–Ω–∞–ø—Ä–∏–º–µ—Ä: `Senior Developer`, `Product Manager`, `CEO`):\n\n"
        "–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ `/skip` —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å."
    )
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ä–æ–ª—å", callback_data="people_skip_role")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="people_main_menu")]
    ])
    
    await message.answer(
        text,
        reply_markup=keyboard,
        parse_mode="Markdown"
    )


@people_admin_router.callback_query(F.data == "people_select_aliases")
async def callback_select_aliases(callback: CallbackQuery, state: FSMContext) -> None:
    """–ü–æ–∫–∞–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –∞–ª–∏–∞—Å–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞."""
    data = await state.get_data()
    name = data.get("new_person_name")
    suggestions = data.get("suggested_aliases", [])
    
    if not name or not suggestions:
        await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return
    
    await state.set_state(PeopleAdminStates.llm_suggestions_select)
    await state.update_data(selected_aliases=[])
    
    text = (
        f"‚úÖ **–í—ã–±–æ—Ä –∞–ª–∏–∞—Å–æ–≤ –¥–ª—è {name}**\n\n"
        "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∞–ª–∏–∞—Å—ã –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–∏—Ç–µ **–û–°–¢–ê–í–ò–¢–¨**.\n"
        "–í—ã–±—Ä–∞–Ω–Ω—ã–µ –∞–ª–∏–∞—Å—ã –±—É–¥—É—Ç –æ—Ç–º–µ—á–µ–Ω—ã ‚úÖ\n\n"
        "**–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–µ –∞–ª–∏–∞—Å—ã:**"
    )
    
    keyboard = _build_suggestions_keyboard(suggestions, [])
    
    await callback.message.edit_text(
        text,
        reply_markup=keyboard,
        parse_mode="Markdown"
    )


@people_admin_router.callback_query(F.data.startswith("people_toggle_alias_"))
async def callback_toggle_alias(callback: CallbackQuery, state: FSMContext) -> None:
    """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –∞–ª–∏–∞—Å–∞."""
    alias = callback.data.replace("people_toggle_alias_", "")
    
    data = await state.get_data()
    selected_aliases = data.get("selected_aliases", [])
    suggestions = data.get("suggested_aliases", [])
    name = data.get("new_person_name")
    
    # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –≤—ã–±–æ—Ä
    if alias in selected_aliases:
        selected_aliases.remove(alias)
    else:
        selected_aliases.append(alias)
    
    await state.update_data(selected_aliases=selected_aliases)
    
    text = (
        f"‚úÖ **–í—ã–±–æ—Ä –∞–ª–∏–∞—Å–æ–≤ –¥–ª—è {name}**\n\n"
        "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∞–ª–∏–∞—Å—ã –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–∏—Ç–µ **–û–°–¢–ê–í–ò–¢–¨**.\n"
        "–í—ã–±—Ä–∞–Ω–Ω—ã–µ –∞–ª–∏–∞—Å—ã –±—É–¥—É—Ç –æ—Ç–º–µ—á–µ–Ω—ã ‚úÖ\n\n"
        "**–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–µ –∞–ª–∏–∞—Å—ã:**"
    )
    
    keyboard = _build_suggestions_keyboard(suggestions, selected_aliases)
    
    await callback.message.edit_text(
        text,
        reply_markup=keyboard,
        parse_mode="Markdown"
    )


@people_admin_router.callback_query(F.data == "people_proceed_with_selected")
async def callback_proceed_with_selected(callback: CallbackQuery, state: FSMContext) -> None:
    """–ü–µ—Ä–µ—Ö–æ–¥ –∫ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–º—É –≤–≤–æ–¥—É –∞–ª–∏–∞—Å–æ–≤ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö."""
    data = await state.get_data()
    name = data.get("new_person_name")
    selected_aliases = data.get("selected_aliases", [])
    
    if not name:
        await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞: –∏–º—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É —Ä–æ–ª–∏
    await state.set_state(PeopleAdminStates.add_role_input)
    
    text = (
        f"‚úÖ **–í—ã–±—Ä–∞–Ω–Ω—ã–µ –∞–ª–∏–∞—Å—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã**\n\n"
        f"üë§ **–ò–º—è:** `{name}`\n"
        f"üìù **–ê–ª–∏–∞—Å—ã ({len(selected_aliases) + 1}):**\n"
        f"‚Ä¢ `{name}` (–æ—Å–Ω–æ–≤–Ω–æ–µ)\n"
    )
    
    for alias in selected_aliases:
        text += f"‚Ä¢ `{alias}`\n"
    
    text += "\n**–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:**"
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ –∞–ª–∏–∞—Å—ã", callback_data="people_add_more_aliases")],
        [InlineKeyboardButton(text="‚û°Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∫ —Ä–æ–ª–∏", callback_data="people_proceed_to_role")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="people_main_menu")]
    ])
    
    await callback.message.edit_text(
        text,
        reply_markup=keyboard,
        parse_mode="Markdown"
    )


@people_admin_router.callback_query(F.data == "people_manual_aliases")
async def callback_manual_aliases(callback: CallbackQuery, state: FSMContext) -> None:
    """–ü–µ—Ä–µ—Ö–æ–¥ –∫ —Ä—É—á–Ω–æ–º—É –≤–≤–æ–¥—É –∞–ª–∏–∞—Å–æ–≤."""
    await state.set_state(PeopleAdminStates.add_person_aliases)
    
    data = await state.get_data()
    name = data.get("new_person_name")
    
    text = (
        f"‚úèÔ∏è **–†—É—á–Ω–æ–π –≤–≤–æ–¥ –∞–ª–∏–∞—Å–æ–≤ –¥–ª—è {name}**\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –∞–ª–∏–∞—Å—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –∏–ª–∏ –∫–∞–∂–¥—ã–π —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏.\n"
        "–ú–æ–∂–µ—Ç–µ —Ç–∞–∫–∂–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å `/skip` —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω–æ–µ –∏–º—è.\n\n"
        "**–ü—Ä–∏–º–µ—Ä:**\n"
        "`John, –î–∂–æ–Ω, Johnny, –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á`"
    )
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∞–ª–∏–∞—Å—ã", callback_data="people_skip_aliases")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="people_main_menu")]
    ])
    
    await callback.message.edit_text(
        text,
        reply_markup=keyboard,
        parse_mode="Markdown"
    )


@people_admin_router.message(PeopleAdminStates.add_role_input)
async def process_role_input(message: Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ä–æ–ª–∏."""
    role = (message.text or "").strip()
    
    if role.lower() == "/skip":
        role = ""
    
    data = await state.get_data()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∂–∏–º: —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ
    if data.get("edit_person"):
        # –†–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞
        await _update_person_field_direct(message, state, "role", role, is_callback=False)
    else:
        # –†–µ–∂–∏–º —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞
        await state.update_data(person_role=role)
        await state.set_state(PeopleAdminStates.add_company_input)
        
        text = (
            f"‚úÖ **–†–æ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞:** `{role or '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}`\n\n"
            f"üè¢ **–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–ø–∞–Ω–∏—é —á–µ–ª–æ–≤–µ–∫–∞**\n"
            "(–Ω–∞–ø—Ä–∏–º–µ—Ä: `Yandex`, `Google`, `Freelancer`):\n\n"
            "–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ `/skip` —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å."
        )
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∫–æ–º–ø–∞–Ω–∏—é", callback_data="people_skip_company")],
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="people_main_menu")]
        ])
        
        await message.answer(
            text,
            reply_markup=keyboard,
            parse_mode="Markdown"
        )


@people_admin_router.callback_query(F.data == "people_add_more_aliases")
async def callback_add_more_aliases(callback: CallbackQuery, state: FSMContext) -> None:
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∞–ª–∏–∞—Å–æ–≤ –≤—Ä—É—á–Ω—É—é."""
    await state.set_state(PeopleAdminStates.add_person_aliases)
    
    data = await state.get_data()
    name = data.get("new_person_name")
    selected_aliases = data.get("selected_aliases", [])
    
    text = (
        f"‚ûï **–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∞–ª–∏–∞—Å–æ–≤ –¥–ª—è {name}**\n\n"
        f"üìù **–£–∂–µ –≤—ã–±—Ä–∞–Ω–æ ({len(selected_aliases) + 1}):**\n"
        f"‚Ä¢ `{name}` (–æ—Å–Ω–æ–≤–Ω–æ–µ)\n"
    )
    
    for alias in selected_aliases:
        text += f"‚Ä¢ `{alias}`\n"
    
    text += (
        "\n‚úèÔ∏è **–í–≤–µ–¥–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∞–ª–∏–∞—Å—ã**\n"
        "—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –∏–ª–∏ –∫–∞–∂–¥—ã–π —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏:\n\n"
        "**–ü—Ä–∏–º–µ—Ä:** `Johnny, –î–∂–æ–Ω–Ω–∏, J.Smith`"
    )
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="people_proceed_to_role")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="people_main_menu")]
    ])
    
    await callback.message.edit_text(
        text,
        reply_markup=keyboard,
        parse_mode="Markdown"
    )


@people_admin_router.callback_query(F.data == "people_proceed_to_role")
async def callback_proceed_to_role(callback: CallbackQuery, state: FSMContext) -> None:
    """–ü–µ—Ä–µ—Ö–æ–¥ –∫ –≤–≤–æ–¥—É —Ä–æ–ª–∏."""
    await state.set_state(PeopleAdminStates.add_role_input)
    
    data = await state.get_data()
    name = data.get("new_person_name")
    selected_aliases = data.get("selected_aliases", [])
    
    text = (
        f"üè¢ **–í–≤–æ–¥ —Ä–æ–ª–∏ –¥–ª—è {name}**\n\n"
        f"üìù **–ê–ª–∏–∞—Å—ã ({len(selected_aliases) + 1}):** –≥–æ—Ç–æ–≤—ã\n\n"
        "üè¢ **–í–≤–µ–¥–∏—Ç–µ —Ä–æ–ª—å/–¥–æ–ª–∂–Ω–æ—Å—Ç—å —á–µ–ª–æ–≤–µ–∫–∞**\n"
        "(–Ω–∞–ø—Ä–∏–º–µ—Ä: `Senior Developer`, `Product Manager`, `CEO`):\n\n"
        "–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ `/skip` —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å."
    )
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ä–æ–ª—å", callback_data="people_skip_role")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="people_main_menu")]
    ])
    
    await callback.message.edit_text(
        text,
        reply_markup=keyboard,
        parse_mode="Markdown"
    )


@people_admin_router.callback_query(F.data == "people_skip_role")
async def callback_skip_role(callback: CallbackQuery, state: FSMContext) -> None:
    """–ü—Ä–æ–ø—É—Å–∫ –≤–≤–æ–¥–∞ —Ä–æ–ª–∏."""
    await state.update_data(person_role="")
    await state.set_state(PeopleAdminStates.add_company_input)
    
    text = (
        "‚è≠Ô∏è **–†–æ–ª—å –ø—Ä–æ–ø—É—â–µ–Ω–∞**\n\n"
        "üè¢ **–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–ø–∞–Ω–∏—é —á–µ–ª–æ–≤–µ–∫–∞**\n"
        "(–Ω–∞–ø—Ä–∏–º–µ—Ä: `Yandex`, `Google`, `Freelancer`):\n\n"
        "–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ `/skip` —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å."
    )
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∫–æ–º–ø–∞–Ω–∏—é", callback_data="people_skip_company")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="people_main_menu")]
    ])
    
    await callback.message.edit_text(
        text,
        reply_markup=keyboard,
        parse_mode="Markdown"
    )


@people_admin_router.message(PeopleAdminStates.add_company_input)
async def process_company_input(message: Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–æ–º–ø–∞–Ω–∏–∏."""
    company = (message.text or "").strip()
    
    if company.lower() == "/skip":
        company = ""
    
    data = await state.get_data()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∂–∏–º: —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ
    if data.get("edit_person"):
        # –†–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞
        await _update_person_field_direct(message, state, "company", company, is_callback=False)
    else:
        # –†–µ–∂–∏–º —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞
        await state.update_data(person_company=company)
        await _finalize_person_creation(message, state, is_callback=False)


@people_admin_router.callback_query(F.data == "people_skip_company")
async def callback_skip_company(callback: CallbackQuery, state: FSMContext) -> None:
    """–ü—Ä–æ–ø—É—Å–∫ –≤–≤–æ–¥–∞ –∫–æ–º–ø–∞–Ω–∏–∏."""
    await state.update_data(person_company="")
    await _finalize_person_creation(callback.message, state, is_callback=True)


async def _finalize_person_creation(message, state: FSMContext, is_callback: bool = False) -> None:
    """–§–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —á–µ–ª–æ–≤–µ–∫–∞ —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π."""
    data = await state.get_data()
    name = data.get("new_person_name")
    selected_aliases = data.get("selected_aliases", [])
    role = data.get("person_role", "")
    company = data.get("person_company", "")
    
    if not name:
        error_text = "‚ùå –û—à–∏–±–∫–∞: –∏–º—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
        if is_callback:
            await message.edit_text(error_text)
        else:
            await message.answer(error_text)
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –∞–ª–∏–∞—Å—ã
    final_aliases = [name]
    for alias in selected_aliases:
        if alias not in final_aliases:
            final_aliases.append(alias)
    
    # –°–æ–∑–¥–∞–µ–º —á–µ–ª–æ–≤–µ–∫–∞ —Å –Ω–æ–≤—ã–º–∏ –ø–æ–ª—è–º–∏
    people = load_people_json()
    new_person = {
        "name_en": name,
        "aliases": final_aliases
    }
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ä–æ–ª—å –∏ –∫–æ–º–ø–∞–Ω–∏—é –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω—ã
    if role:
        new_person["role"] = role
    if company:
        new_person["company"] = company
    
    people.append(new_person)
    
    if save_people_json(people):
        text = (
            f"‚úÖ **–ß–µ–ª–æ–≤–µ–∫ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!**\n\n"
            f"üë§ **–ò–º—è:** `{name}`\n"
            f"üìù **–ê–ª–∏–∞—Å—ã ({len(final_aliases)}):**\n"
        )
        for alias in final_aliases:
            text += f"‚Ä¢ `{alias}`\n"
        
        if role:
            text += f"\nüè¢ **–†–æ–ª—å:** `{role}`"
        if company:
            text += f"\nüè¢ **–ö–æ–º–ø–∞–Ω–∏—è:** `{company}`"
        
        logger.info(f"Admin {message.from_user.id if hasattr(message, 'from_user') else 'unknown'} added new person: {name} with {len(final_aliases)} aliases, role: {role}, company: {company}")
    else:
        text = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="people_main_menu")]
    ])
    
    if is_callback:
        await message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")
    else:
        await message.answer(text, reply_markup=keyboard, parse_mode="Markdown")
    
    await state.set_state(PeopleAdminStates.main_menu)


@people_admin_router.callback_query(F.data == "people_skip_aliases")
async def callback_skip_aliases(callback: CallbackQuery, state: FSMContext) -> None:
    """–ü—Ä–æ–ø—É—Å–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–ª–∏–∞—Å–æ–≤ - –ø–µ—Ä–µ—Ö–æ–¥ –∫ –≤–≤–æ–¥—É —Ä–æ–ª–∏."""
    await state.update_data(selected_aliases=[])
    await state.set_state(PeopleAdminStates.add_role_input)
    
    data = await state.get_data()
    name = data.get("new_person_name")
    
    text = (
        f"‚è≠Ô∏è **–ê–ª–∏–∞—Å—ã –ø—Ä–æ–ø—É—â–µ–Ω—ã**\n\n"
        f"üë§ **–ò–º—è:** `{name}`\n"
        f"üìù **–ê–ª–∏–∞—Å—ã:** —Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω–æ–µ –∏–º—è\n\n"
        "üè¢ **–í–≤–µ–¥–∏—Ç–µ —Ä–æ–ª—å/–¥–æ–ª–∂–Ω–æ—Å—Ç—å —á–µ–ª–æ–≤–µ–∫–∞**\n"
        "(–Ω–∞–ø—Ä–∏–º–µ—Ä: `Senior Developer`, `Product Manager`, `CEO`):\n\n"
        "–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ `/skip` —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å."
    )
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ä–æ–ª—å", callback_data="people_skip_role")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="people_main_menu")]
    ])
    
    await callback.message.edit_text(
        text,
        reply_markup=keyboard,
        parse_mode="Markdown"
    )


@people_admin_router.callback_query(F.data.startswith("people_list_page_"))
async def callback_list_page(callback: CallbackQuery, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ —Å–ø–∏—Å–∫–∞ –ª—é–¥–µ–π."""
    page = int(callback.data.replace("people_list_page_", ""))
    
    await state.set_state(PeopleAdminStates.manage_person_select)
    
    people = load_people_json()
    if not people:
        text = "üì≠ –ë–∞–∑–∞ –ª—é–¥–µ–π –ø—É—Å—Ç–∞. –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞!"
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üë§ –î–æ–±–∞–≤–∏—Ç—å —á–µ–ª–æ–≤–µ–∫–∞", callback_data="people_add_new")],
            [InlineKeyboardButton(text="üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="people_main_menu")]
        ])
    else:
        text = f"üë• **–í—ã–±–µ—Ä–∏—Ç–µ —á–µ–ª–æ–≤–µ–∫–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è** ({len(people)} –≤—Å–µ–≥–æ, —Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1}):"
        keyboard = build_person_list_keyboard(people, page)
    
    await callback.message.edit_text(
        text,
        reply_markup=keyboard,
        parse_mode="Markdown"
    )


@people_admin_router.callback_query(F.data == "people_manage_existing")
async def callback_manage_existing(callback: CallbackQuery, state: FSMContext) -> None:
    """–ü–æ–∫–∞–∑ —Å–ø–∏—Å–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ª—é–¥–µ–π –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è."""
    await state.set_state(PeopleAdminStates.manage_person_select)
    
    people = load_people_json()
    if not people:
        text = "üì≠ –ë–∞–∑–∞ –ª—é–¥–µ–π –ø—É—Å—Ç–∞. –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞!"
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üë§ –î–æ–±–∞–≤–∏—Ç—å —á–µ–ª–æ–≤–µ–∫–∞", callback_data="people_add_new")],
            [InlineKeyboardButton(text="üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="people_main_menu")]
        ])
    else:
        text = f"üë• **–í—ã–±–µ—Ä–∏—Ç–µ —á–µ–ª–æ–≤–µ–∫–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è** ({len(people)} –≤—Å–µ–≥–æ):"
        keyboard = build_person_list_keyboard(people)
    
    await callback.message.edit_text(
        text,
        reply_markup=keyboard,
        parse_mode="Markdown"
    )


@people_admin_router.callback_query(F.data.startswith("people_select_"))
async def callback_select_person(callback: CallbackQuery, state: FSMContext) -> None:
    """–í—ã–±–æ—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è."""
    person_name = callback.data.replace("people_select_", "")
    
    people = load_people_json()
    person = get_person_by_name(people, person_name)
    
    if not person:
        await callback.answer("‚ùå –ß–µ–ª–æ–≤–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    await state.update_data(selected_person=person_name)
    await state.set_state(PeopleAdminStates.manage_person_menu)
    
    aliases = person.get("aliases", [])
    role = person.get("role", "")
    company = person.get("company", "")
    
    text = (
        f"üë§ **{person['name_en']}**\n\n"
        f"üìù **–ê–ª–∏–∞—Å—ã ({len(aliases)}):**\n"
    )
    
    for alias in aliases:
        text += f"‚Ä¢ `{alias}`\n"
    
    if role:
        text += f"\nüè¢ **–†–æ–ª—å:** `{role}`"
    if company:
        text += f"\nüè¢ **–ö–æ–º–ø–∞–Ω–∏—è:** `{company}`"
    
    text += "\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    
    await callback.message.edit_text(
        text,
        reply_markup=build_person_menu_keyboard(person_name),
        parse_mode="Markdown"
    )


@people_admin_router.callback_query(F.data == "people_stats")
async def callback_people_stats(callback: CallbackQuery) -> None:
    """–ü–æ–∫–∞–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –±–∞–∑–µ –ª—é–¥–µ–π."""
    people = load_people_json()
    candidates = load_candidates_json()
    
    if not people:
        text = "üì≠ –ë–∞–∑–∞ –ª—é–¥–µ–π –ø—É—Å—Ç–∞."
    else:
        total_aliases = sum(len(p.get("aliases", [])) for p in people)
        avg_aliases = total_aliases / len(people)
        
        # –¢–æ–ø –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∞–ª–∏–∞—Å–æ–≤
        top_people = sorted(people, key=lambda x: len(x.get("aliases", [])), reverse=True)[:5]
        
        text = (
            f"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –ª—é–¥–µ–π**\n\n"
            f"üë• –í—Å–µ–≥–æ –ª—é–¥–µ–π: **{len(people)}**\n"
            f"üìù –í—Å–µ–≥–æ –∞–ª–∏–∞—Å–æ–≤: **{total_aliases}**\n"
            f"üìà –°—Ä–µ–¥–Ω–µ–µ –∞–ª–∏–∞—Å–æ–≤ –Ω–∞ —á–µ–ª–æ–≤–µ–∫–∞: **{avg_aliases:.1f}**\n\n"
            f"üèÜ **–¢–æ–ø –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∞–ª–∏–∞—Å–æ–≤:**\n"
        )
        
        for i, person in enumerate(top_people, 1):
            alias_count = len(person.get("aliases", []))
            text += f"{i}. `{person['name_en']}` ‚Äî {alias_count} –∞–ª–∏–∞—Å–æ–≤\n"
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
    candidates_count = len(candidates.get("candidates", {}))
    text += f"\nüîç **–ö–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:** {candidates_count}"
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="people_main_menu")]
    ])
    
    await callback.message.edit_text(
        text,
        reply_markup=keyboard,
        parse_mode="Markdown"
    )


@people_admin_router.callback_query(F.data.startswith("people_add_alias_"))
async def callback_add_alias(callback: CallbackQuery, state: FSMContext) -> None:
    """–ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–ª–∏–∞—Å–∞."""
    person_name = callback.data.replace("people_add_alias_", "")
    
    await state.update_data(selected_person=person_name, action="add_alias")
    await state.set_state(PeopleAdminStates.manage_person_add_alias)
    
    text = (
        f"‚ûï **–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–ª–∏–∞—Å–∞ –¥–ª—è {person_name}**\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∞–ª–∏–∞—Å –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∞–ª–∏–∞—Å–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:"
    )
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"people_select_{person_name}")]
    ])
    
    await callback.message.edit_text(
        text,
        reply_markup=keyboard,
        parse_mode="Markdown"
    )


@people_admin_router.message(PeopleAdminStates.manage_person_add_alias)
async def process_add_alias(message: Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–ª–∏–∞—Å–∞."""
    data = await state.get_data()
    person_name = data.get("selected_person")
    
    if not person_name:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: —á–µ–ª–æ–≤–µ–∫ –Ω–µ –≤—ã–±—Ä–∞–Ω.")
        return
    
    # –ü–∞—Ä—Å–∏–º –Ω–æ–≤—ã–µ –∞–ª–∏–∞—Å—ã
    aliases_text = message.text.strip()
    new_aliases = []
    for line in aliases_text.split('\n'):
        for alias in line.split(','):
            alias = alias.strip()
            if alias:
                new_aliases.append(alias)
    
    if not new_aliases:
        await message.answer("‚ùå –ù–µ –≤–≤–µ–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∞–ª–∏–∞—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–∑—É
    people = load_people_json()
    person = get_person_by_name(people, person_name)
    
    if not person:
        await message.answer("‚ùå –ß–µ–ª–æ–≤–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ.")
        return
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –∞–ª–∏–∞—Å—ã (–∏–∑–±–µ–≥–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç–æ–≤)
    existing_aliases = [a.lower() for a in person.get("aliases", [])]
    added_aliases = []
    
    for alias in new_aliases:
        if alias.lower() not in existing_aliases:
            person.setdefault("aliases", []).append(alias)
            added_aliases.append(alias)
            existing_aliases.append(alias.lower())
    
    if added_aliases and save_people_json(people):
        text = (
            f"‚úÖ **–ê–ª–∏–∞—Å—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –¥–ª—è {person_name}!**\n\n"
            f"‚ûï **–î–æ–±–∞–≤–ª–µ–Ω–æ ({len(added_aliases)}):**\n"
        )
        for alias in added_aliases:
            text += f"‚Ä¢ `{alias}`\n"
        
        if len(added_aliases) < len(new_aliases):
            skipped = len(new_aliases) - len(added_aliases)
            text += f"\n‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ {skipped} –¥—É–±–ª–∏–∫–∞—Ç–æ–≤"
        
        logger.info(f"Admin {message.from_user.id} added {len(added_aliases)} aliases to {person_name}")
    else:
        text = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∞–ª–∏–∞—Å—ã (–≤–æ–∑–º–æ–∂–Ω–æ, –≤—Å–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç)."
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üë§ –ö –ø—Ä–æ—Ñ–∏–ª—é", callback_data=f"people_select_{person_name}")],
        [InlineKeyboardButton(text="üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="people_main_menu")]
    ])
    
    await message.answer(
        text,
        reply_markup=keyboard,
        parse_mode="Markdown"
    )
    await state.set_state(PeopleAdminStates.manage_person_menu)


@people_admin_router.callback_query(F.data.startswith("people_remove_alias_"))
async def callback_remove_alias(callback: CallbackQuery, state: FSMContext) -> None:
    """–ü–æ–∫–∞–∑ –∞–ª–∏–∞—Å–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è."""
    person_name = callback.data.replace("people_remove_alias_", "")
    
    people = load_people_json()
    person = get_person_by_name(people, person_name)
    
    if not person:
        await callback.answer("‚ùå –ß–µ–ª–æ–≤–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    aliases = person.get("aliases", [])
    if len(aliases) <= 1:
        await callback.answer("‚ùå –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –∞–ª–∏–∞—Å—ã")
        return
    
    # –ò—Å–∫–ª—é—á–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –∏–º—è –∏–∑ —É–¥–∞–ª–µ–Ω–∏—è
    removable_aliases = [a for a in aliases if a != person["name_en"]]
    
    if not removable_aliases:
        await callback.answer("‚ùå –ù–µ—Ç –∞–ª–∏–∞—Å–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
        return
    
    text = (
        f"üóëÔ∏è **–£–¥–∞–ª–µ–Ω–∏–µ –∞–ª–∏–∞—Å–æ–≤ –¥–ª—è {person_name}**\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∞–ª–∏–∞—Å—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:"
    )
    
    keyboard = build_aliases_keyboard(removable_aliases, person_name, "remove")
    
    await callback.message.edit_text(
        text,
        reply_markup=keyboard,
        parse_mode="Markdown"
    )


@people_admin_router.callback_query(F.data.startswith("people_remove_alias_confirm_"))
async def callback_remove_alias_confirm(callback: CallbackQuery, state: FSMContext) -> None:
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –∞–ª–∏–∞—Å–∞."""
    parts = callback.data.replace("people_remove_alias_confirm_", "").split("_", 1)
    if len(parts) != 2:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö")
        return
    
    person_name, alias_to_remove = parts
    
    people = load_people_json()
    person = get_person_by_name(people, person_name)
    
    if not person:
        await callback.answer("‚ùå –ß–µ–ª–æ–≤–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    aliases = person.get("aliases", [])
    if alias_to_remove in aliases and alias_to_remove != person["name_en"]:
        aliases.remove(alias_to_remove)
        
        if save_people_json(people):
            await callback.answer(f"‚úÖ –ê–ª–∏–∞—Å '{alias_to_remove}' —É–¥–∞–ª–µ–Ω")
            logger.info(f"Admin {callback.from_user.id} removed alias '{alias_to_remove}' from {person_name}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            text = (
                f"üë§ **{person['name_en']}**\n\n"
                f"üìù **–ê–ª–∏–∞—Å—ã ({len(aliases)}):**\n"
            )
            
            for alias in aliases:
                text += f"‚Ä¢ `{alias}`\n"
            
            text += "\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
            
            await callback.message.edit_text(
                text,
                reply_markup=build_person_menu_keyboard(person_name),
                parse_mode="Markdown"
            )
        else:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏")
    else:
        await callback.answer("‚ùå –ê–ª–∏–∞—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å")


@people_admin_router.callback_query(F.data.startswith("people_suggest_aliases_"))
async def callback_suggest_aliases(callback: CallbackQuery, state: FSMContext) -> None:
    """–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∞–ª–∏–∞—Å–æ–≤ –∏–∑ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤."""
    person_name = callback.data.replace("people_suggest_aliases_", "")
    
    people = load_people_json()
    person = get_person_by_name(people, person_name)
    
    if not person:
        await callback.answer("‚ùå –ß–µ–ª–æ–≤–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    candidates = load_candidates_json()
    suggested_aliases = get_suggested_aliases(person_name, candidates)
    
    # –ò—Å–∫–ª—é—á–∞–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∞–ª–∏–∞—Å—ã
    existing_aliases = [a.lower() for a in person.get("aliases", [])]
    new_suggestions = [a for a in suggested_aliases if a.lower() not in existing_aliases]
    
    if not new_suggestions:
        text = (
            f"ü§ñ **–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∞–ª–∏–∞—Å–æ–≤ –¥–ª—è {person_name}**\n\n"
            "‚ùå –ù–æ–≤—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.\n"
            "–í—Å–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –∞–ª–∏–∞—Å—ã —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã."
        )
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"people_select_{person_name}")]
        ])
    else:
        text = (
            f"ü§ñ **–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∞–ª–∏–∞—Å–æ–≤ –¥–ª—è {person_name}**\n\n"
            f"–ù–∞–π–¥–µ–Ω–æ {len(new_suggestions)} –Ω–æ–≤—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –∏–∑ –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–∫—Å—Ç–æ–≤.\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –∞–ª–∏–∞—Å—ã –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:"
        )
        keyboard = build_aliases_keyboard(new_suggestions, person_name, "add")
    
    await callback.message.edit_text(
        text,
        reply_markup=keyboard,
        parse_mode="Markdown"
    )


@people_admin_router.callback_query(F.data.startswith("people_add_alias_confirm_"))
async def callback_add_alias_confirm(callback: CallbackQuery, state: FSMContext) -> None:
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–≥–æ –∞–ª–∏–∞—Å–∞."""
    parts = callback.data.replace("people_add_alias_confirm_", "").split("_", 1)
    if len(parts) != 2:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö")
        return
    
    person_name, alias_to_add = parts
    
    people = load_people_json()
    person = get_person_by_name(people, person_name)
    
    if not person:
        await callback.answer("‚ùå –ß–µ–ª–æ–≤–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    aliases = person.get("aliases", [])
    if alias_to_add.lower() not in [a.lower() for a in aliases]:
        aliases.append(alias_to_add)
        
        if save_people_json(people):
            await callback.answer(f"‚úÖ –ê–ª–∏–∞—Å '{alias_to_add}' –¥–æ–±–∞–≤–ª–µ–Ω")
            logger.info(f"Admin {callback.from_user.id} added suggested alias '{alias_to_add}' to {person_name}")
        else:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏")
    else:
        await callback.answer("‚ùå –ê–ª–∏–∞—Å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")


@people_admin_router.callback_query(F.data == "people_review_candidates")
async def callback_review_candidates(callback: CallbackQuery, state: FSMContext) -> None:
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –∏–∑ people_candidates.json."""
    candidates = load_candidates_json()
    candidates_dict = candidates.get("candidates", {})
    
    if not candidates_dict:
        text = "üì≠ –ö–∞–Ω–¥–∏–¥–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –∞–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–æ–≤ (people_miner_v2)."
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="people_main_menu")]
        ])
    else:
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —á–∞—Å—Ç–æ—Ç–µ
        sorted_candidates = sorted(candidates_dict.items(), key=lambda x: x[1], reverse=True)
        top_candidates = sorted_candidates[:20]  # –¢–æ–ø 20
        
        text = (
            f"üîç **–ê–Ω–∞–ª–∏–∑ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤**\n\n"
            f"üìä –í—Å–µ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤: **{len(candidates_dict)}**\n"
            f"üèÜ –¢–æ–ø-20 –ø–æ —á–∞—Å—Ç–æ—Ç–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π:\n\n"
        )
        
        for candidate, freq in top_candidates:
            text += f"‚Ä¢ `{candidate}` ‚Äî {freq} —Ä–∞–∑\n"
        
        text += (
            "\nüí° **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**\n"
            "‚Ä¢ –ö–∞–Ω–¥–∏–¥–∞—Ç—ã —Å —á–∞—Å—Ç–æ—Ç–æ–π 3+ –º–æ–≥—É—Ç –±—ã—Ç—å –∏–º–µ–Ω–∞–º–∏\n"
            "‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤ –∏—Å—Ö–æ–¥–Ω—ã—Ö —Ç–µ–∫—Å—Ç–∞—Ö\n"
            "‚Ä¢ –î–æ–±–∞–≤—å—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ —á–µ—Ä–µ–∑ '–î–æ–±–∞–≤–∏—Ç—å —á–µ–ª–æ–≤–µ–∫–∞'"
        )
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="people_main_menu")]
        ])
    
    await callback.message.edit_text(
        text,
        reply_markup=keyboard,
        parse_mode="Markdown"
    )


@people_admin_router.callback_query(F.data == "people_miner_start")
async def callback_miner_start(callback: CallbackQuery, state: FSMContext) -> None:
    """–ó–∞–ø—É—Å–∫ people_miner v2 –∏–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ people_admin."""
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º People Miner v2 (–Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤)
    try:
        from app.bot.handlers_people_v2 import _show_candidate_page
        from app.bot.states.people_states import PeopleStates
        from app.core.people_miner2 import list_candidates
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç—ã –≤ –Ω–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
        items, total = list_candidates(sort="freq", page=1, per_page=1)
        
        if not items or total == 0:
            text = (
                "üß© **People Miner v2 - –ü–µ—Ä–µ–Ω–æ—Å –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤**\n\n"
                "‚ùå –ö–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ—Ç.\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–æ—Ç–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Å—Ç—Ä–µ—á, —á—Ç–æ–±—ã —Å–æ–±—Ä–∞—Ç—å –Ω–æ–≤—ã—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤.\n\n"
                "üí° **–°–æ–≤–µ—Ç:** –î–æ–±–∞–≤—å—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤—Å—Ç—Ä–µ—á —Å —Ç–µ–∫—Å—Ç–æ–º, —Å–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞–π–¥–µ—Ç –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –ª—é–¥–µ–π."
            )
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="people_main_menu")]
            ])
            
            await callback.message.edit_text(
                text,
                reply_markup=keyboard,
                parse_mode="Markdown"
            )
        else:
            # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ People Miner v2
            await state.set_state(PeopleStates.v2_reviewing)
            await state.update_data(current_page=1, sort_mode="freq")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
            await _show_candidate_page(callback, 1, "freq", edit_message=True)
        
        logger.info(f"Admin {callback.from_user.id} started people_miner from people_admin")
        
    except ImportError as e:
        logger.error(f"Failed to import people_miner_v2 functions: {e}")
        await callback.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å People Miner v2.\n"
            "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á—Ç–æ –º–æ–¥—É–ª—å handlers_people_v2 –¥–æ—Å—Ç—É–ø–µ–Ω."
        )


@people_admin_router.callback_query(F.data == "people_close")
async def callback_close(callback: CallbackQuery, state: FSMContext) -> None:
    """–ó–∞–∫—Ä—ã—Ç–∏–µ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª—é–¥—å–º–∏."""
    await state.clear()
    await callback.message.edit_text("‚úÖ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª—é–¥—å–º–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.")


# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –≤ help
@people_admin_router.message(Command("people_help"))
async def cmd_people_help(message: Message) -> None:
    """–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª—é–¥—å–º–∏."""
    user_id = message.from_user.id if message.from_user else 0
    
    if not settings.is_admin(user_id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —ç—Ç–æ–π —Å–ø—Ä–∞–≤–∫–∏.")
        return
    
    text = (
        "üßë‚Äçüíº **–°–ø—Ä–∞–≤–∫–∞ –ø–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –ª—é–¥—å–º–∏**\n\n"
        "**–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**\n"
        "‚Ä¢ `/people_admin` ‚Äî –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è\n"
        "‚Ä¢ `/people_help` ‚Äî —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n\n"
        "**–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**\n"
        "üë§ **–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ª—é–¥–µ–π** ‚Äî —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π\n"
        "‚úèÔ∏è **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–ª–∏–∞—Å–∞–º–∏** ‚Äî –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ/—É–¥–∞–ª–µ–Ω–∏–µ\n"
        "ü§ñ **–£–º–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è** ‚Äî –∞–ª–∏–∞—Å—ã –∏–∑ –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–∫—Å—Ç–æ–≤\n"
        "üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞** ‚Äî –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∞–∑–µ\n\n"
        "**–ò—Å—Ç–æ—á–Ω–∏–∫–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π:**\n"
        "‚Ä¢ –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–æ–≤ –≤—Å—Ç—Ä–µ—á (people_miner_v2)\n"
        "‚Ä¢ –ß–∞—Å—Ç–æ—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π\n"
        "‚Ä¢ –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è\n\n"
        "–í—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ `people.json` –∏ —Å—Ä–∞–∑—É –¥–æ—Å—Ç—É–ø–Ω—ã –±–æ—Ç—É."
    )
    
    await message.answer(text, parse_mode="Markdown")


# =============== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–Ø –†–û–õ–ò –ò –ö–û–ú–ü–ê–ù–ò–ò ===============

@people_admin_router.callback_query(F.data.startswith("people_edit_role_"))
async def callback_edit_role(callback: CallbackQuery, state: FSMContext) -> None:
    """–ù–∞—á–∞–ª–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–æ–ª–∏."""
    person_name = callback.data.replace("people_edit_role_", "")
    
    people = load_people_json()
    person = get_person_by_name(people, person_name)
    
    if not person:
        await callback.answer("‚ùå –ß–µ–ª–æ–≤–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    await state.update_data(edit_person=person_name, edit_field="role")
    await state.set_state(PeopleAdminStates.add_role_input)
    
    current_role = person.get("role", "")
    
    text = (
        f"üè¢ **–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–æ–ª–∏ –¥–ª—è {person_name}**\n\n"
        f"üìã **–¢–µ–∫—É—â–∞—è —Ä–æ–ª—å:** `{current_role or '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}`\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ä–æ–ª—å/–¥–æ–ª–∂–Ω–æ—Å—Ç—å:\n"
        "(–Ω–∞–ø—Ä–∏–º–µ—Ä: `Senior Developer`, `Product Manager`, `CEO`)\n\n"
        "–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ `/skip` —á—Ç–æ–±—ã –æ—á–∏—Å—Ç–∏—Ç—å —Ä–æ–ª—å."
    )
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å —Ä–æ–ª—å", callback_data="people_clear_role")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"people_select_{person_name}")]
    ])
    
    await callback.message.edit_text(
        text,
        reply_markup=keyboard,
        parse_mode="Markdown"
    )


@people_admin_router.callback_query(F.data.startswith("people_edit_company_"))
async def callback_edit_company(callback: CallbackQuery, state: FSMContext) -> None:
    """–ù–∞—á–∞–ª–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏–∏."""
    person_name = callback.data.replace("people_edit_company_", "")
    
    people = load_people_json()
    person = get_person_by_name(people, person_name)
    
    if not person:
        await callback.answer("‚ùå –ß–µ–ª–æ–≤–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    await state.update_data(edit_person=person_name, edit_field="company")
    await state.set_state(PeopleAdminStates.add_company_input)
    
    current_company = person.get("company", "")
    
    text = (
        f"üè¢ **–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ –¥–ª—è {person_name}**\n\n"
        f"üìã **–¢–µ–∫—É—â–∞—è –∫–æ–º–ø–∞–Ω–∏—è:** `{current_company or '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}`\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –∫–æ–º–ø–∞–Ω–∏—é:\n"
        "(–Ω–∞–ø—Ä–∏–º–µ—Ä: `Yandex`, `Google`, `Freelancer`)\n\n"
        "–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ `/skip` —á—Ç–æ–±—ã –æ—á–∏—Å—Ç–∏—Ç—å –∫–æ–º–ø–∞–Ω–∏—é."
    )
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∫–æ–º–ø–∞–Ω–∏—é", callback_data="people_clear_company")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"people_select_{person_name}")]
    ])
    
    await callback.message.edit_text(
        text,
        reply_markup=keyboard,
        parse_mode="Markdown"
    )


@people_admin_router.callback_query(F.data == "people_clear_role")
async def callback_clear_role(callback: CallbackQuery, state: FSMContext) -> None:
    """–û—á–∏—Å—Ç–∫–∞ —Ä–æ–ª–∏."""
    await _update_person_field(callback, state, "role", "")


@people_admin_router.callback_query(F.data == "people_clear_company")
async def callback_clear_company(callback: CallbackQuery, state: FSMContext) -> None:
    """–û—á–∏—Å—Ç–∫–∞ –∫–æ–º–ø–∞–Ω–∏–∏."""
    await _update_person_field(callback, state, "company", "")


async def _update_person_field(callback: CallbackQuery, state: FSMContext, field: str, value: str) -> None:
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—è —á–µ–ª–æ–≤–µ–∫–∞ (–¥–ª—è callback)."""
    data = await state.get_data()
    person_name = data.get("edit_person")
    
    if not person_name:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞: —á–µ–ª–æ–≤–µ–∫ –Ω–µ –≤—ã–±—Ä–∞–Ω")
        return
    
    people = load_people_json()
    person = get_person_by_name(people, person_name)
    
    if not person:
        await callback.answer("‚ùå –ß–µ–ª–æ–≤–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–µ
    if value:
        person[field] = value
    elif field in person:
        del person[field]
    
    if save_people_json(people):
        field_name = "—Ä–æ–ª—å" if field == "role" else "–∫–æ–º–ø–∞–Ω–∏—é"
        action = "–æ–±–Ω–æ–≤–ª–µ–Ω–∞" if value else "–æ—á–∏—â–µ–Ω–∞"
        
        await callback.answer(f"‚úÖ {field_name.capitalize()} {action}")
        logger.info(f"Admin {callback.from_user.id} updated {field} for {person_name}: '{value}'")
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–æ—Ñ–∏–ª—é —á–µ–ª–æ–≤–µ–∫–∞
        await callback_select_person(callback, state)
    else:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏")


async def _update_person_field_direct(message, state: FSMContext, field: str, value: str, is_callback: bool = False) -> None:
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—è —á–µ–ª–æ–≤–µ–∫–∞ (–¥–ª—è –ø—Ä—è–º–æ–≥–æ –≤–≤–æ–¥–∞)."""
    data = await state.get_data()
    person_name = data.get("edit_person")
    
    if not person_name:
        error_text = "‚ùå –û—à–∏–±–∫–∞: —á–µ–ª–æ–≤–µ–∫ –Ω–µ –≤—ã–±—Ä–∞–Ω"
        if is_callback:
            await message.edit_text(error_text)
        else:
            await message.answer(error_text)
        return
    
    people = load_people_json()
    person = get_person_by_name(people, person_name)
    
    if not person:
        error_text = "‚ùå –ß–µ–ª–æ–≤–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω"
        if is_callback:
            await message.edit_text(error_text)
        else:
            await message.answer(error_text)
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–µ
    if value:
        person[field] = value
    elif field in person:
        del person[field]
    
    if save_people_json(people):
        field_name = "—Ä–æ–ª—å" if field == "role" else "–∫–æ–º–ø–∞–Ω–∏—é"
        action = "–æ–±–Ω–æ–≤–ª–µ–Ω–∞" if value else "–æ—á–∏—â–µ–Ω–∞"
        
        text = f"‚úÖ {field_name.capitalize()} {action}: `{value or '–æ—á–∏—â–µ–Ω–æ'}`"
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üë§ –ö –ø—Ä–æ—Ñ–∏–ª—é", callback_data=f"people_select_{person_name}")],
            [InlineKeyboardButton(text="üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="people_main_menu")]
        ])
        
        if is_callback:
            await message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")
        else:
            await message.answer(text, reply_markup=keyboard, parse_mode="Markdown")
        
        logger.info(f"Admin {message.from_user.id if hasattr(message, 'from_user') else 'unknown'} updated {field} for {person_name}: '{value}'")
        await state.set_state(PeopleAdminStates.manage_person_menu)
    else:
        error_text = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏"
        if is_callback:
            await message.edit_text(error_text)
        else:
            await message.answer(error_text)
