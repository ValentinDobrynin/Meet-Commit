import asyncio
import fcntl
import logging
import os
import sys
import tempfile
from pathlib import Path

from aiogram.fsm.storage.memory import MemoryStorage
from dotenv import load_dotenv

from .handlers import router
from .handlers_admin import router as admin_router
from .handlers_admin_monitoring import router as admin_monitoring_router
from .handlers_agenda import router as agenda_router
from .handlers_direct_commit import router as direct_commit_router
from .handlers_inline import router as inline_router
from .handlers_llm_commit import router as llm_commit_router
from .handlers_people import router as people_router
from .handlers_queries import router as queries_router
from .handlers_tags_review import router as tags_review_router
from .init import build_bot

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞ –ü–ï–†–ï–î –∏–º–ø–æ—Ä—Ç–∞–º–∏
load_dotenv()


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
def setup_logging():
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –±–æ—Ç–∞."""
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤ –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    log_dir = Path("logs")
    log_dir.mkdir(exist_ok=True)

    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    log_format = "%(asctime)s - %(name)s - %(levelname)s - %(message)s"
    date_format = "%Y-%m-%d %H:%M:%S"

    # –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    all_logs_handler = logging.FileHandler("logs/bot.log", encoding="utf-8")
    all_logs_handler.setLevel(logging.INFO)

    error_logs_handler = logging.FileHandler("logs/bot_errors.log", encoding="utf-8")
    error_logs_handler.setLevel(logging.ERROR)

    console_handler = logging.StreamHandler(sys.stdout)
    console_handler.setLevel(logging.INFO)

    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä—ã
    formatter = logging.Formatter(log_format, date_format)
    all_logs_handler.setFormatter(formatter)
    error_logs_handler.setFormatter(formatter)
    console_handler.setFormatter(formatter)

    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–≥–µ—Ä—ã
    logging.basicConfig(
        level=logging.INFO,  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º INFO —É—Ä–æ–≤–µ–Ω—å
        handlers=[all_logs_handler, error_logs_handler, console_handler],
    )

    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —É—Ä–æ–≤–Ω–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –º–æ–¥—É–ª–µ–π
    logging.getLogger("aiogram").setLevel(logging.WARNING)
    logging.getLogger("httpx").setLevel(logging.WARNING)
    logging.getLogger("httpcore").setLevel(logging.WARNING)

    # –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –ª–æ–≥–≥–µ—Ä –¥–ª—è –±–æ—Ç–∞
    logger = logging.getLogger("meet_commit_bot")
    logger.setLevel(logging.INFO)

    return logger


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logger = setup_logging()

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
try:
    TELEGRAM_TOKEN = os.environ["TELEGRAM_TOKEN"]
except KeyError:
    raise ValueError("TELEGRAM_TOKEN not found in environment variables") from None

bot, dp = build_bot(TELEGRAM_TOKEN, MemoryStorage())
# –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–æ—É—Ç–µ—Ä—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –ü–ï–†–ï–î –æ—Å–Ω–æ–≤–Ω—ã–º
dp.include_router(tags_review_router)  # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è FSM —Å–æ—Å—Ç–æ—è–Ω–∏–π
dp.include_router(direct_commit_router)  # –ü—Ä—è–º—ã–µ –∫–æ–º–º–∏—Ç—ã —Å FSM
dp.include_router(llm_commit_router)  # LLM –∫–æ–º–º–∏—Ç—ã (–±–µ–∑ FSM)
dp.include_router(agenda_router)  # –°–∏—Å—Ç–µ–º–∞ –ø–æ–≤–µ—Å—Ç–æ–∫ —Å FSM
dp.include_router(queries_router)  # –ö–æ–º–∞–Ω–¥—ã –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –∫–æ–º–º–∏—Ç–∞–º
dp.include_router(inline_router)
dp.include_router(admin_router)
dp.include_router(admin_monitoring_router)  # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –∞–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã
dp.include_router(people_router)
dp.include_router(router)  # –û—Å–Ω–æ–≤–Ω–æ–π —Ä–æ—É—Ç–µ—Ä –ø–æ—Å–ª–µ–¥–Ω–∏–º


def acquire_lock():
    """–°–æ–∑–¥–∞–µ—Ç lock-—Ñ–∞–π–ª –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∑–∞–ø—É—Å–∫–æ–≤"""
    lock_file = Path(tempfile.gettempdir()) / "meet_commit_bot.lock"

    try:
        # –°–æ–∑–¥–∞–µ–º lock-—Ñ–∞–π–ª
        lock_fd = os.open(lock_file, os.O_CREAT | os.O_WRONLY | os.O_TRUNC)
        fcntl.flock(lock_fd, fcntl.LOCK_EX | fcntl.LOCK_NB)

        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º PID –ø—Ä–æ—Ü–µ—Å—Å–∞
        os.write(lock_fd, str(os.getpid()).encode())
        os.close(lock_fd)

        logger.info(f"Lock acquired. PID: {os.getpid()}")
        return True

    except OSError as e:
        if e.errno == 11:  # EAGAIN - —Ñ–∞–π–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω
            logger.error("Bot is already running! Another instance is active.")
            logger.info("To stop the existing bot, run: pkill -f 'python app/bot/main.py'")
            return False
        else:
            logger.error(f"Failed to acquire lock: {e}")
            return False


def release_lock():
    """–û—Å–≤–æ–±–æ–∂–¥–∞–µ—Ç lock-—Ñ–∞–π–ª"""
    lock_file = Path(tempfile.gettempdir()) / "meet_commit_bot.lock"
    try:
        if lock_file.exists():
            lock_file.unlink()
            logger.info("Lock released.")
    except Exception as e:
        logger.warning(f"Could not release lock: {e}")


async def run() -> None:
    """–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞"""
    try:
        logger.info("ü§ñ Starting bot in polling mode...")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –∞–∫—Ç–∏–≤–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
        from app.bot.startup_greeting import send_startup_greetings_safe

        logger.info("Sending startup greetings to active users...")
        await send_startup_greetings_safe(bot)

        logger.info("Bot polling started. Waiting for messages...")
        await dp.start_polling(bot, allowed_updates=["message", "callback_query"])
    except Exception as e:
        logger.error(f"Bot error: {e}", exc_info=True)
        raise


if __name__ == "__main__":
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–ø—É—â–µ–Ω –ª–∏ —É–∂–µ –±–æ—Ç
    if not acquire_lock():
        sys.exit(1)

    try:
        logger.info("üöÄ Meet-Commit Bot starting...")
        asyncio.run(run())
    except KeyboardInterrupt:
        logger.info("‚èπÔ∏è  Bot stopped by user")
    except Exception as e:
        logger.error(f"Error starting bot: {e}", exc_info=True)
    finally:
        release_lock()
        logger.info("Bot shutdown completed")
