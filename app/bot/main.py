import asyncio
import fcntl
import os
import sys
import tempfile
from pathlib import Path

from aiogram.fsm.storage.memory import MemoryStorage
from dotenv import load_dotenv

from .handlers import router
from .init import build_bot

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞ –ü–ï–†–ï–î –∏–º–ø–æ—Ä—Ç–∞–º–∏
load_dotenv()

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
try:
    TELEGRAM_TOKEN = os.environ["TELEGRAM_TOKEN"]
except KeyError:
    raise ValueError("TELEGRAM_TOKEN not found in environment variables") from None

bot, dp = build_bot(TELEGRAM_TOKEN, MemoryStorage())
dp.include_router(router)


def acquire_lock():
    """–°–æ–∑–¥–∞–µ—Ç lock-—Ñ–∞–π–ª –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∑–∞–ø—É—Å–∫–æ–≤"""
    lock_file = Path(tempfile.gettempdir()) / "meet_commit_bot.lock"

    try:
        # –°–æ–∑–¥–∞–µ–º lock-—Ñ–∞–π–ª
        lock_fd = os.open(lock_file, os.O_CREAT | os.O_WRONLY | os.O_TRUNC)
        fcntl.flock(lock_fd, fcntl.LOCK_EX | fcntl.LOCK_NB)

        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º PID –ø—Ä–æ—Ü–µ—Å—Å–∞
        os.write(lock_fd, str(os.getpid()).encode())
        os.close(lock_fd)

        print(f"Lock acquired. PID: {os.getpid()}")
        return True

    except OSError as e:
        if e.errno == 11:  # EAGAIN - —Ñ–∞–π–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω
            print("‚ùå Bot is already running! Another instance is active.")
            print("   To stop the existing bot, run: pkill -f 'python app/bot/main.py'")
            return False
        else:
            print(f"‚ùå Failed to acquire lock: {e}")
            return False


def release_lock():
    """–û—Å–≤–æ–±–æ–∂–¥–∞–µ—Ç lock-—Ñ–∞–π–ª"""
    lock_file = Path(tempfile.gettempdir()) / "meet_commit_bot.lock"
    try:
        if lock_file.exists():
            lock_file.unlink()
            print("Lock released.")
    except Exception as e:
        print(f"Warning: Could not release lock: {e}")


async def run() -> None:
    """–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞"""
    try:
        print("ü§ñ Starting bot in polling mode...")
        await dp.start_polling(bot, allowed_updates=["message", "callback_query"])
    except Exception as e:
        print(f"‚ùå Bot error: {e}")
        raise


if __name__ == "__main__":
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–ø—É—â–µ–Ω –ª–∏ —É–∂–µ –±–æ—Ç
    if not acquire_lock():
        sys.exit(1)

    try:
        print("üöÄ Meet-Commit Bot starting...")
        asyncio.run(run())
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è  Bot stopped by user")
    except Exception as e:
        print(f"‚ùå Error starting bot: {e}")
    finally:
        release_lock()
