"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã /assign —Å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏.

–†–µ–∞–ª–∏–∑—É–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≤—ã–±–æ—Ä–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ /agenda:
- –ö–Ω–æ–ø–∫–∏ —Å —á–∞—Å—Ç–æ—Ç–Ω—ã–º–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏
- –ü–∞–≥–∏–Ω–∞—Ü–∏—è –¥–ª—è "Other people"
- –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –∫–∞–∫ –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç
"""

from __future__ import annotations

import logging
import re

from aiogram import F, Router
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup, Message

from app.gateways.notion_review import get_by_short_id, update_fields

logger = logging.getLogger(__name__)
router = Router()


class AssignStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è."""

    waiting_for_assignee = State()


def _clean_sid(raw_sid: str) -> str:
    """–û—á–∏—â–∞–µ—Ç short_id –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤."""
    return raw_sid.strip().lstrip("#").lower()


def _build_assignee_keyboard(short_id: str) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤—ã–±–æ—Ä–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ Commits."""
    from app.core.people_activity import get_top_people_by_activity

    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø –ª—é–¥–µ–π –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (3-8 –∞–¥–∞–ø—Ç–∏–≤–Ω–æ)
        top_people = get_top_people_by_activity(min_count=3, max_count=8, min_score=1.0)

        logger.info(f"Building assignee keyboard with {len(top_people)} top people for {short_id}")

        buttons = []

        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ø –ª—é–¥–µ–π (–ø–æ 2 –≤ —Ä—è–¥ –¥–ª—è –∫–æ–º–ø–∞–∫—Ç–Ω–æ—Å—Ç–∏)
        for i in range(0, len(top_people), 2):
            row = []
            for j in range(i, min(i + 2, len(top_people))):
                person = top_people[j]
                row.append(
                    InlineKeyboardButton(
                        text=f"üë§ {person}", callback_data=f"assign:{short_id}:person:{person}"
                    )
                )
            if row:
                buttons.append(row)

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "Other people" –µ—Å–ª–∏ –µ—Å—Ç—å –µ—â–µ –ª—é–¥–∏
        from app.core.people_activity import get_all_people_from_dictionary

        other_people = get_all_people_from_dictionary(exclude_top=top_people)

        if other_people:
            buttons.append(
                [
                    InlineKeyboardButton(
                        text="üë• Other people...", callback_data=f"assign:{short_id}:people:other"
                    )
                ]
            )

        # –ö–Ω–æ–ø–∫–∞ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ (–∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç)
        buttons.append(
            [
                InlineKeyboardButton(
                    text="‚úèÔ∏è –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é", callback_data=f"assign:{short_id}:manual"
                )
            ]
        )

        # –ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã
        buttons.append(
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"assign:{short_id}:cancel")]
        )

        return InlineKeyboardMarkup(inline_keyboard=buttons)

    except Exception as e:
        logger.error(f"Error building assignee keyboard: {e}")
        # Fallback - –ø—Ä–æ—Å—Ç–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ä—É—á–Ω—ã–º –≤–≤–æ–¥–æ–º
        return _build_fallback_assignee_keyboard(short_id)


def _build_fallback_assignee_keyboard(short_id: str) -> InlineKeyboardMarkup:
    """Fallback –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ª—é–¥–µ–π."""
    from app.core.people_activity import get_fallback_top_people

    try:
        fallback_people = get_fallback_top_people()
        buttons = []

        # –î–æ–±–∞–≤–ª—è–µ–º fallback –ª—é–¥–µ–π
        for person in fallback_people:
            buttons.append(
                [
                    InlineKeyboardButton(
                        text=f"üë§ {person}", callback_data=f"assign:{short_id}:person:{person}"
                    )
                ]
            )

        # –ö–Ω–æ–ø–∫–∞ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞
        buttons.append(
            [
                InlineKeyboardButton(
                    text="‚úèÔ∏è –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é", callback_data=f"assign:{short_id}:manual"
                )
            ]
        )

        # –ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã
        buttons.append(
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"assign:{short_id}:cancel")]
        )

        return InlineKeyboardMarkup(inline_keyboard=buttons)

    except Exception as e:
        logger.error(f"Error building fallback assignee keyboard: {e}")
        # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
        return InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="‚úèÔ∏è –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é", callback_data=f"assign:{short_id}:manual"
                    )
                ],
                [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"assign:{short_id}:cancel")],
            ]
        )


def _build_other_people_keyboard(short_id: str, page: int = 0) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π –¥–ª—è –¥—Ä—É–≥–∏—Ö –ª—é–¥–µ–π."""
    try:
        from app.core.people_activity import (
            get_all_people_from_dictionary,
            get_top_people_by_activity,
        )

        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø –ª—é–¥–µ–π –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è
        top_people = get_top_people_by_activity()
        other_people = get_all_people_from_dictionary(exclude_top=top_people)

        if not other_people:
            # –ï—Å–ª–∏ –Ω–µ—Ç –¥—Ä—É–≥–∏—Ö –ª—é–¥–µ–π, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–Ω–æ–ø–∫—É –Ω–∞–∑–∞–¥
            return InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"assign:{short_id}:back")]
                ]
            )

        # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
        per_page = 8
        total_pages = (len(other_people) + per_page - 1) // per_page
        page = max(0, min(page, total_pages - 1))  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω

        start_idx = page * per_page
        end_idx = start_idx + per_page
        page_people = other_people[start_idx:end_idx]

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        buttons = []

        # –î–æ–±–∞–≤–ª—è–µ–º –ª—é–¥–µ–π —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–ø–æ 2 –≤ —Ä—è–¥)
        for i in range(0, len(page_people), 2):
            row = []
            for j in range(i, min(i + 2, len(page_people))):
                person = page_people[j]
                row.append(
                    InlineKeyboardButton(
                        text=f"üë§ {person}", callback_data=f"assign:{short_id}:person:{person}"
                    )
                )
            if row:
                buttons.append(row)

        # –ù–∞–≤–∏–≥–∞—Ü–∏—è
        nav_row = []
        if page > 0:
            nav_row.append(
                InlineKeyboardButton(
                    text="‚Üê –ù–∞–∑–∞–¥", callback_data=f"assign:{short_id}:people:other:page:{page-1}"
                )
            )

        nav_row.append(InlineKeyboardButton(text=f"{page+1}/{total_pages}", callback_data="noop"))

        if page < total_pages - 1:
            nav_row.append(
                InlineKeyboardButton(
                    text="–í–ø–µ—Ä–µ–¥ ‚Üí", callback_data=f"assign:{short_id}:people:other:page:{page+1}"
                )
            )

        if nav_row:
            buttons.append(nav_row)

        # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É –º–µ–Ω—é
        buttons.append(
            [
                InlineKeyboardButton(
                    text="üîô –ö –≤—ã–±–æ—Ä—É –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è", callback_data=f"assign:{short_id}:back"
                )
            ]
        )

        return InlineKeyboardMarkup(inline_keyboard=buttons)

    except Exception as e:
        logger.error(f"Error building other people keyboard: {e}")
        # Fallback
        return InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"assign:{short_id}:back")]
            ]
        )


# ====== –ù–û–í–´–ô –ò–ù–¢–ï–†–ê–ö–¢–ò–í–ù–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö /assign ======


@router.message(F.text.regexp(r"^/assign\s+\S+$", flags=re.I))
async def cmd_assign_interactive(msg: Message, state: FSMContext):
    """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è —Å –∫–Ω–æ–ø–∫–∞–º–∏."""

    try:
        parts = (msg.text or "").strip().split()
        if len(parts) != 2:
            await msg.answer(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: <code>/assign &lt;id&gt;</code>\n"
                "–î–ª—è —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞: <code>/assign &lt;id&gt; &lt;–∏–º—è&gt;</code>",
                parse_mode="HTML",
            )
            return

        short_id = _clean_sid(parts[1])
        item = get_by_short_id(short_id)

        if not item:
            await msg.answer(f"‚ùå –ö–∞—Ä—Ç–æ—á–∫–∞ [{short_id}] –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ /review.")
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º short_id –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(assign_short_id=short_id)

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
        task_text = item.get("text", "")[:100]
        if len(item.get("text", "")) > 100:
            task_text += "..."

        await msg.answer(
            f"üë§ <b>–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è</b>\n\n"
            f"üìã <b>–ó–∞–¥–∞—á–∞ [{short_id}]:</b>\n"
            f"<i>{task_text}</i>\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è:",
            parse_mode="HTML",
            reply_markup=_build_assignee_keyboard(short_id),
        )

        logger.info(
            f"Started interactive assign for {short_id} by user {msg.from_user.id if msg.from_user else 'unknown'}"
        )

    except Exception as e:
        logger.error(f"Error in cmd_assign_interactive: {e}")
        await msg.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã assign.")


# ====== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò CALLBACK'–û–í ======


@router.callback_query(F.data.startswith("assign:") & F.data.contains(":person:"))
async def callback_assign_person(callback: CallbackQuery, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –∏–∑ –∫–Ω–æ–ø–æ–∫."""
    try:
        callback_data = callback.data or ""
        parts = callback_data.split(":")

        if len(parts) < 4:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö callback", show_alert=True)
            return

        short_id = parts[1]
        person_name = ":".join(parts[3:])  # –ù–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ –≤ –∏–º–µ–Ω–∏ –µ—Å—Ç—å ":"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∑–∞–¥–∞—á–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        item = get_by_short_id(short_id)
        if not item:
            await callback.answer(f"‚ùå –ö–∞—Ä—Ç–æ—á–∫–∞ [{short_id}] –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return

        # –ù–∞–∑–Ω–∞—á–∞–µ–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
        from app.core.commit_normalize import normalize_assignees

        normalized_assignees = normalize_assignees([person_name], attendees_en=[])

        if not normalized_assignees:
            await callback.answer(
                f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è: {person_name}", show_alert=True
            )
            return

        success = update_fields(item["page_id"], assignees=normalized_assignees)

        if success:
            assignees_str = ", ".join(normalized_assignees)

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            await callback.message.edit_text(  # type: ignore[union-attr]
                f"‚úÖ <b>–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –Ω–∞–∑–Ω–∞—á–µ–Ω</b>\n\n"
                f"üìã <b>–ó–∞–¥–∞—á–∞ [{short_id}]:</b> {item.get('text', '')[:100]}{'...' if len(item.get('text', '')) > 100 else ''}\n"
                f"üë§ <b>–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å:</b> {assignees_str}\n\n"
                f"üí° –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–¥–∞—á—É –∫–æ–º–∞–Ω–¥–æ–π <code>/confirm {short_id}</code>",
                parse_mode="HTML",
            )

            await callback.answer(f"‚úÖ –ù–∞–∑–Ω–∞—á–µ–Ω: {assignees_str}")

            logger.info(f"Assigned {assignees_str} to task {short_id} via interactive button")
        else:
            await callback.answer(
                f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –¥–ª—è [{short_id}]", show_alert=True
            )

        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()

    except Exception as e:
        logger.error(f"Error in callback_assign_person: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è", show_alert=True)


@router.callback_query(F.data.startswith("assign:") & F.data.contains(":people:other"))
async def callback_assign_other_people(callback: CallbackQuery) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥—Ä—É–≥–∏—Ö –ª—é–¥–µ–π (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ 1)."""
    try:
        callback_data = callback.data or ""
        parts = callback_data.split(":")
        short_id = parts[1]

        await _show_other_people_page(callback, short_id, page=0)
        await callback.answer()

    except Exception as e:
        logger.error(f"Error in callback_assign_other_people: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥—Ä—É–≥–∏—Ö –ª—é–¥–µ–π", show_alert=True)


@router.callback_query(F.data.startswith("assign:") & F.data.contains(":people:other:page:"))
async def callback_assign_other_people_page(callback: CallbackQuery) -> None:
    """–ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥—Ä—É–≥–∏—Ö –ª—é–¥–µ–π."""
    try:
        callback_data = callback.data or ""
        parts = callback_data.split(":")
        short_id = parts[1]
        page = int(parts[5])

        await _show_other_people_page(callback, short_id, page)
        await callback.answer()

    except (ValueError, IndexError) as e:
        logger.error(f"Error parsing page number: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –≤ –Ω–æ–º–µ—Ä–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã", show_alert=True)


async def _show_other_people_page(callback: CallbackQuery, short_id: str, page: int = 0) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥—Ä—É–≥–∏—Ö –ª—é–¥–µ–π –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è."""
    try:
        from app.core.people_activity import (
            get_all_people_from_dictionary,
            get_top_people_by_activity,
        )

        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø –ª—é–¥–µ–π –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è
        top_people = get_top_people_by_activity()
        other_people = get_all_people_from_dictionary(exclude_top=top_people)

        if not other_people:
            await callback.answer("‚ùå –ù–µ—Ç –¥—Ä—É–≥–∏—Ö –ª—é–¥–µ–π —Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é", show_alert=True)
            return

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        total_pages = (len(other_people) + 7) // 8  # 8 –ª—é–¥–µ–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É

        await callback.message.edit_text(  # type: ignore[union-attr]
            f"üë• <b>–î—Ä—É–≥–∏–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏</b>\n\n"
            f"üìã <b>–ó–∞–¥–∞—á–∞ [{short_id}]</b>\n"
            f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1} –∏–∑ {total_pages}\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è:",
            parse_mode="HTML",
            reply_markup=_build_other_people_keyboard(short_id, page),
        )

        logger.info(f"Showed other people page {page} for assign {short_id}")

    except Exception as e:
        logger.error(f"Error showing other people page: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã", show_alert=True)


@router.callback_query(F.data.startswith("assign:") & F.data.endswith(":manual"))
async def callback_assign_manual(callback: CallbackQuery, state: FSMContext) -> None:
    """–ü–µ—Ä–µ—Ö–æ–¥ –∫ —Ä—É—á–Ω–æ–º—É –≤–≤–æ–¥—É –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è."""
    try:
        callback_data = callback.data or ""
        parts = callback_data.split(":")
        short_id = parts[1]

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º short_id –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(assign_short_id=short_id)
        await state.set_state(AssignStates.waiting_for_assignee)

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback.message.edit_text(  # type: ignore[union-attr]
            f"‚úèÔ∏è <b>–†—É—á–Ω–æ–π –≤–≤–æ–¥ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è</b>\n\n"
            f"üìã <b>–ó–∞–¥–∞—á–∞ [{short_id}]</b>\n\n"
            f"–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é):\n\n"
            f"üí° <i>–ü—Ä–∏–º–µ—Ä—ã:</i>\n"
            f"‚Ä¢ <code>Sergey Lompa</code>\n"
            f"‚Ä¢ <code>Valya Dobrynin, Nodari Kezua</code>\n\n"
            f"–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã.",
            parse_mode="HTML",
        )

        await callback.answer("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –∏–º—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è")

        logger.info(f"Started manual assign input for {short_id}")

    except Exception as e:
        logger.error(f"Error in callback_assign_manual: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –∫ —Ä—É—á–Ω–æ–º—É –≤–≤–æ–¥—É", show_alert=True)


@router.callback_query(F.data.startswith("assign:") & F.data.endswith(":back"))
async def callback_assign_back(callback: CallbackQuery, state: FSMContext) -> None:
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è."""
    try:
        callback_data = callback.data or ""
        parts = callback_data.split(":")
        short_id = parts[1]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∑–∞–¥–∞—á–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        item = get_by_short_id(short_id)
        if not item:
            await callback.answer(f"‚ùå –ö–∞—Ä—Ç–æ—á–∫–∞ [{short_id}] –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
        task_text = item.get("text", "")[:100]
        if len(item.get("text", "")) > 100:
            task_text += "..."

        await callback.message.edit_text(  # type: ignore[union-attr]
            f"üë§ <b>–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è</b>\n\n"
            f"üìã <b>–ó–∞–¥–∞—á–∞ [{short_id}]:</b>\n"
            f"<i>{task_text}</i>\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è:",
            parse_mode="HTML",
            reply_markup=_build_assignee_keyboard(short_id),
        )

        await callback.answer()

    except Exception as e:
        logger.error(f"Error in callback_assign_back: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ", show_alert=True)


@router.callback_query(F.data.startswith("assign:") & F.data.endswith(":cancel"))
async def callback_assign_cancel(callback: CallbackQuery, state: FSMContext) -> None:
    """–û—Ç–º–µ–Ω–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è."""
    try:
        callback_data = callback.data or ""
        parts = callback_data.split(":")
        short_id = parts[1]

        await callback.message.edit_text(  # type: ignore[union-attr]
            f"‚ùå <b>–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ</b>\n\n"
            f"üìã –ó–∞–¥–∞—á–∞ [{short_id}] –æ—Å—Ç–∞–ª–∞—Å—å –±–µ–∑ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è.\n\n"
            f"üí° –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞–∑–Ω–∞—á–∏—Ç—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –ø–æ–∑–∂–µ –∫–æ–º–∞–Ω–¥–æ–π <code>/assign {short_id}</code>",
            parse_mode="HTML",
        )

        await callback.answer("‚ùå –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
        await state.clear()

        logger.info(f"Cancelled assign for {short_id}")

    except Exception as e:
        logger.error(f"Error in callback_assign_cancel: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ", show_alert=True)


# ====== –û–ë–†–ê–ë–û–¢–ß–ò–ö –†–£–ß–ù–û–ì–û –í–í–û–î–ê ======


@router.message(AssignStates.waiting_for_assignee)
async def handle_manual_assignee_input(msg: Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è."""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–º–µ–Ω—É
        if msg.text and msg.text.strip().lower() in ["/cancel", "–æ—Ç–º–µ–Ω–∞", "cancel"]:
            data = await state.get_data()
            short_id = data.get("assign_short_id", "unknown")

            await msg.answer(
                f"‚ùå <b>–í–≤–æ–¥ –æ—Ç–º–µ–Ω–µ–Ω</b>\n\n"
                f"üìã –ó–∞–¥–∞—á–∞ [{short_id}] –æ—Å—Ç–∞–ª–∞—Å—å –±–µ–∑ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è.\n\n"
                f"üí° –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞–∑–Ω–∞—á–∏—Ç—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –ø–æ–∑–∂–µ –∫–æ–º–∞–Ω–¥–æ–π <code>/assign {short_id}</code>",
                parse_mode="HTML",
            )
            await state.clear()
            return

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        short_id = data.get("assign_short_id")

        if not short_id:
            await msg.answer("‚ùå –û—à–∏–±–∫–∞: –ø–æ—Ç–µ—Ä—è–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–¥–∞—á–µ. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å /assign")
            await state.clear()
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∑–∞–¥–∞—á–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        item = get_by_short_id(short_id)
        if not item:
            await msg.answer(f"‚ùå –ö–∞—Ä—Ç–æ—á–∫–∞ [{short_id}] –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ /review.")
            await state.clear()
            return

        # –ü–æ–ª—É—á–∞–µ–º –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –∏–º–µ–Ω–∞
        raw_names = (msg.text or "").strip()
        if not raw_names:
            await msg.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∏–º—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –∏–ª–∏ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã")
            return

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—É—é –ª–æ–≥–∏–∫—É –∏–∑ handlers.py
        from app.core.commit_normalize import normalize_assignees

        # –ü–æ–ø—ã—Ç–∫–∞ 1: –ø–æ–ª–Ω–æ–µ –∏–º—è –∫–∞–∫ –µ—Å—Ç—å
        full_name_normalized = normalize_assignees([raw_names.strip()], attendees_en=[])

        if full_name_normalized:
            # –ü–æ–ª–Ω–æ–µ –∏–º—è –Ω–∞–π–¥–µ–Ω–æ –≤ —Å–ª–æ–≤–∞—Ä–µ
            normalized_assignees = full_name_normalized
        else:
            # –ü–æ–ø—ã—Ç–∫–∞ 2: —Ä–∞–∑–±–∏–≤–∞–µ–º –ø–æ –ø—Ä–æ–±–µ–ª–∞–º –∏ –∑–∞–ø—è—Ç—ã–º
            raw_list = [x.strip() for x in raw_names.replace(",", " ").split() if x.strip()]
            normalized_assignees = normalize_assignees(raw_list, attendees_en=[])

        if not normalized_assignees:
            await msg.answer(
                f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è(–µ–π): {raw_names}\n\n"
                f"üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –∏–º—è –ø–æ-–¥—Ä—É–≥–æ–º—É –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞.\n"
                f"–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∑–∞–Ω–æ–≤–æ –∏–ª–∏ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã."
            )
            return

        # –ù–∞–∑–Ω–∞—á–∞–µ–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
        success = update_fields(item["page_id"], assignees=normalized_assignees)

        if success:
            assignees_str = ", ".join(normalized_assignees)

            await msg.answer(
                f"‚úÖ <b>–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –Ω–∞–∑–Ω–∞—á–µ–Ω</b>\n\n"
                f"üìã <b>–ó–∞–¥–∞—á–∞ [{short_id}]:</b> {item.get('text', '')[:100]}{'...' if len(item.get('text', '')) > 100 else ''}\n"
                f"üë§ <b>–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å:</b> {assignees_str}\n\n"
                f"üí° –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–¥–∞—á—É –∫–æ–º–∞–Ω–¥–æ–π <code>/confirm {short_id}</code>",
                parse_mode="HTML",
            )

            logger.info(
                f"Manually assigned {assignees_str} to task {short_id} by user {msg.from_user.id if msg.from_user else 'unknown'}"
            )
        else:
            await msg.answer(
                f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –¥–ª—è [{short_id}]. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )

        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()

    except Exception as e:
        logger.error(f"Error in handle_manual_assignee_input: {e}")
        await msg.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–≤–æ–¥–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è.")
        await state.clear()


# ====== –û–ë–†–ê–ë–û–¢–ß–ò–ö NOOP ======


@router.callback_query(F.data == "noop")
async def callback_noop(callback: CallbackQuery) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã)."""
    await callback.answer()
