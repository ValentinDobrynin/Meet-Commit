"""–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–µ–≤—å—é —Ç–µ–≥–æ–≤ –≤—Å—Ç—Ä–µ—á.

–ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–µ–≥–∏
—á–µ—Ä–µ–∑ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –≤—Å—Ç—Ä–µ—á–∏.
"""

from __future__ import annotations

import logging
import time
from dataclasses import dataclass, field

from aiogram import F, Router
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup, Message

from app.bot.states.tags_review_states import TagsReviewStates
from app.gateways.notion_meetings import update_meeting_tags
from app.settings import _admin_ids_set, settings

logger = logging.getLogger(__name__)

router = Router()


async def _show_review_queue_after_tags(callback: CallbackQuery) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç Review Queue –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–≤—å—é —Ç–µ–≥–æ–≤."""
    try:
        from app.bot.formatters import format_review_card
        from app.bot.handlers_inline import build_review_item_kb
        from app.core.review_queue import list_open_reviews

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ Review Queue
        items = list_open_reviews(limit=5)

        if not items:
            # –ï—Å–ª–∏ –æ—á–µ—Ä–µ–¥–∏ –Ω–µ—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            from app.bot.handlers_inline import build_main_menu_kb

            await callback.message.answer(
                "üéØ <b>–ß—Ç–æ –¥–∞–ª—å—à–µ?</b>", reply_markup=build_main_menu_kb()
            )
            return

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∫–Ω–æ–ø–∫–æ–π "Confirm All"
        confirm_all_kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text="‚úÖ Confirm All", callback_data="review_confirm_all"),
                    InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="main_review"),
                ]
            ]
        )

        await callback.message.answer(
            f"üìã <b>Review Queue ({len(items)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤):</b>\n\n"
            f"üí° <i>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∫–æ–º–º–∏—Ç—ã:</i>",
            reply_markup=confirm_all_kb,
        )

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç —Å –∫–Ω–æ–ø–∫–∞–º–∏
        for item in items:
            short_id = item["short_id"]
            formatted_card = format_review_card(item)

            await callback.message.answer(
                formatted_card, parse_mode="HTML", reply_markup=build_review_item_kb(short_id)
            )

        logger.info(f"Showed {len(items)} review items after tags review")

    except Exception as e:
        logger.error(f"Error showing review queue after tags: {e}")
        # Fallback –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é
        from app.bot.handlers_inline import build_main_menu_kb

        await callback.message.answer("üéØ <b>–ß—Ç–æ –¥–∞–ª—å—à–µ?</b>", reply_markup=build_main_menu_kb())


@dataclass
class TagReviewSession:
    """–°–µ—Å—Å–∏—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–µ–≤—å—é —Ç–µ–≥–æ–≤."""

    meeting_id: str
    owner_user_id: int
    started_at: float
    original_tags: list[str]
    working_tags: list[str]
    history: list[tuple[str, str]] = field(default_factory=list)  # (action, tag)

    @property
    def is_expired(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∏—Å—Ç–µ–∫–ª–∞ –ª–∏ —Å–µ—Å—Å–∏—è."""
        return (time.time() - self.started_at) > settings.tags_review_ttl_sec

    def can_edit(self, user_id: int | None) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–≥–∏."""
        if user_id is None:
            return False
        return user_id == self.owner_user_id or user_id in _admin_ids_set

    def get_changes_summary(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É –∏–∑–º–µ–Ω–µ–Ω–∏–π."""
        added = [tag for tag in self.working_tags if tag not in self.original_tags]
        removed = [tag for tag in self.original_tags if tag not in self.working_tags]

        if not added and not removed:
            return "–ò–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ—Ç"

        summary = []
        if added:
            summary.append(f"+{len(added)} –¥–æ–±–∞–≤–ª–µ–Ω–æ")
        if removed:
            summary.append(f"-{len(removed)} —É–¥–∞–ª–µ–Ω–æ")

        return ", ".join(summary)


def _build_tags_keyboard(session: TagReviewSession) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ä–µ–≤—å—é —Ç–µ–≥–æ–≤."""
    rows = []

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 8 —Ç–µ–≥–æ–≤ (—á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–ø–æ–ª–Ω–∏—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å)
    visible_tags = session.working_tags[:8]

    for i, tag in enumerate(visible_tags):
        # –î–µ–ª–∞–µ–º –∫–Ω–æ–ø–∫—É —Ç–µ–≥–∞ –Ω–∞ –≤—Å—é —à–∏—Ä–∏–Ω—É –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
        display_tag = tag if len(tag) <= 45 else f"{tag[:42]}..."
        rows.append(
            [
                InlineKeyboardButton(
                    text=f"‚ùå {i+1}. {display_tag}",
                    callback_data=f"tagrev:drop:{session.meeting_id}:{i}",
                ),
            ]
        )

    # –ï—Å–ª–∏ —Ç–µ–≥–æ–≤ –±–æ–ª—å—à–µ 8, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    if len(session.working_tags) > 8:
        rows.append(
            [
                InlineKeyboardButton(
                    text=f"üìã ... –∏ –µ—â–µ {len(session.working_tags) - 8} —Ç–µ–≥–æ–≤", callback_data="noop"
                )
            ]
        )

    # –£–ø—Ä–∞–≤–ª—è—é—â–∏–µ –∫–Ω–æ–ø–∫–∏
    control_row1 = [
        InlineKeyboardButton(
            text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å –≤—Å–µ", callback_data=f"tagrev:accept:{session.meeting_id}"
        ),
        InlineKeyboardButton(
            text="üóë –£–¥–∞–ª–∏—Ç—å –≤—Å–µ", callback_data=f"tagrev:clear:{session.meeting_id}"
        ),
    ]

    control_row2 = [
        InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å", callback_data=f"tagrev:add:{session.meeting_id}"),
        InlineKeyboardButton(text="‚Ü©Ô∏è –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"tagrev:undo:{session.meeting_id}"),
    ]

    control_row3 = [
        InlineKeyboardButton(
            text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data=f"tagrev:save:{session.meeting_id}"
        ),
        InlineKeyboardButton(
            text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–≤—å—é", callback_data=f"tagrev:cancel:{session.meeting_id}"
        ),
    ]

    rows.extend([control_row1, control_row2, control_row3])

    return InlineKeyboardMarkup(inline_keyboard=rows)


def _format_tags_message(session: TagReviewSession) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–≥–∞–º–∏ –¥–ª—è —Ä–µ–≤—å—é."""
    header = "üè∑Ô∏è <b>–†–µ–≤—å—é —Ç–µ–≥–æ–≤ –≤—Å—Ç—Ä–µ—á–∏</b>\n"
    header += f"üìù <b>ID:</b> <code>...{session.meeting_id[-8:]}</code>\n\n"

    if not session.working_tags:
        return header + "üìã <i>–¢–µ–≥–æ–≤ –Ω–µ—Ç</i>\n\nüí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–î–æ–±–∞–≤–∏—Ç—å' –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ–≥–æ–≤"

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 8 —Ç–µ–≥–æ–≤
    visible_tags = session.working_tags[:8]
    tags_text = "\n".join(f"{i+1}. <code>{tag}</code>" for i, tag in enumerate(visible_tags))

    if len(session.working_tags) > 8:
        tags_text += f"\n<i>... –∏ –µ—â–µ {len(session.working_tags) - 8} —Ç–µ–≥–æ–≤</i>"

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    changes = session.get_changes_summary()
    changes_text = f"\n\nüìä <b>–ò–∑–º–µ–Ω–µ–Ω–∏—è:</b> {changes}" if changes != "–ò–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ—Ç" else ""

    return header + tags_text + changes_text


async def _get_session(
    callback: CallbackQuery, meeting_id: str, state: FSMContext
) -> TagReviewSession | None:
    """–ü–æ–ª—É—á–∞–µ—Ç –∏ –≤–∞–ª–∏–¥–∏—Ä—É–µ—Ç —Å–µ—Å—Å–∏—é —Ä–µ–≤—å—é —Ç–µ–≥–æ–≤."""
    data = await state.get_data()
    session_key = f"tagrev:{meeting_id}"
    session = data.get(session_key)  # type: ignore[assignment]

    if not session:
        await callback.answer("‚ùå –°–µ—Å—Å–∏—è —Ä–µ–≤—å—é –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return None

    if session.is_expired:
        await callback.answer("‚è∞ –°–µ—Å—Å–∏—è —Ä–µ–≤—å—é –∏—Å—Ç–µ–∫–ª–∞", show_alert=True)
        # –û—á–∏—â–∞–µ–º —É—Å—Ç–∞—Ä–µ–≤—à—É—é —Å–µ—Å—Å–∏—é
        await state.update_data(**{session_key: None})
        return None

    user_id = callback.from_user.id if callback.from_user else None
    if not session.can_edit(user_id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", show_alert=True)
        return None

    return session


async def _update_session(session: TagReviewSession, state: FSMContext) -> None:
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–µ—Å—Å–∏—é –≤ FSM."""
    session_key = f"tagrev:{session.meeting_id}"
    await state.update_data(**{session_key: session})  # type: ignore[arg-type]


async def start_tags_review(
    meeting_id: str, original_tags: list[str], user_id: int, message: Message, state: FSMContext
) -> None:
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ —Ä–µ–≤—å—é —Ç–µ–≥–æ–≤.

    Args:
        meeting_id: ID –≤—Å—Ç—Ä–µ—á–∏
        original_tags: –ò—Å—Ö–æ–¥–Ω—ã–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–µ–≥–∏
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –∑–∞–≥—Ä—É–∑–∏–ª –≤—Å—Ç—Ä–µ—á—É
        message: –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        state: FSM –∫–æ–Ω—Ç–µ–∫—Å—Ç
    """
    if not settings.tags_review_enabled:
        logger.debug("Tags review disabled, skipping")
        return

    session = TagReviewSession(
        meeting_id=meeting_id,
        owner_user_id=user_id,
        started_at=time.time(),
        original_tags=list(original_tags),
        working_tags=list(original_tags),
    )

    session_key = f"tagrev:{meeting_id}"
    await state.update_data(**{session_key: session})
    await state.set_state(TagsReviewStates.reviewing)

    message_text = _format_tags_message(session)
    keyboard = _build_tags_keyboard(session)

    await message.answer(message_text, reply_markup=keyboard)
    logger.info(f"Started tags review for meeting {meeting_id} by user {user_id}")


@router.callback_query(F.data.regexp(r"^tagrev:drop:([0-9a-f\-]{10,}):(\d+)$"))
async def drop_tag_handler(callback: CallbackQuery, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–µ–≥–∞."""
    try:
        match = callback.data.split(":")
        meeting_id = match[2]
        tag_index = int(match[3])

        session = await _get_session(callback, meeting_id, state)
        if not session:
            return

        if 0 <= tag_index < len(session.working_tags):
            removed_tag = session.working_tags.pop(tag_index)
            session.history.append(("drop", removed_tag))

            await _update_session(session, state)

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message_text = _format_tags_message(session)
            keyboard = _build_tags_keyboard(session)

            await callback.message.edit_text(message_text, reply_markup=keyboard)
            await callback.answer(f"üóë –£–¥–∞–ª–µ–Ω: {removed_tag}")
        else:
            await callback.answer("‚ùå –¢–µ–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)

    except Exception as e:
        logger.error(f"Error in drop_tag_handler: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–µ–≥–∞", show_alert=True)


@router.callback_query(F.data.regexp(r"^tagrev:accept:([0-9a-f\-]{10,})$"))
async def accept_all_handler(callback: CallbackQuery, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–∏–Ω—è—Ç–∏—è –≤—Å–µ—Ö —Ç–µ–≥–æ–≤."""
    try:
        meeting_id = callback.data.split(":")[2]

        session = await _get_session(callback, meeting_id, state)
        if not session:
            return

        # –ü—Ä–∏–Ω–∏–º–∞–µ–º –≤—Å–µ —Ç–µ–∫—É—â–∏–µ —Ç–µ–≥–∏
        for tag in session.working_tags:
            if ("keep", tag) not in session.history:
                session.history.append(("keep", tag))

        await _finalize_review(session, callback, state, "‚úÖ –í—Å–µ —Ç–µ–≥–∏ –ø—Ä–∏–Ω—è—Ç—ã")

    except Exception as e:
        logger.error(f"Error in accept_all_handler: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏ —Ç–µ–≥–æ–≤", show_alert=True)


@router.callback_query(F.data.regexp(r"^tagrev:clear:([0-9a-f\-]{10,})$"))
async def clear_all_handler(callback: CallbackQuery, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ—Ö —Ç–µ–≥–æ–≤."""
    try:
        meeting_id = callback.data.split(":")[2]

        session = await _get_session(callback, meeting_id, state)
        if not session:
            return

        # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Ç–µ–≥–∏
        for tag in list(session.working_tags):
            session.history.append(("drop", tag))
        session.working_tags.clear()

        await _update_session(session, state)

        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        message_text = _format_tags_message(session)
        keyboard = _build_tags_keyboard(session)

        await callback.message.edit_text(message_text, reply_markup=keyboard)
        await callback.answer("üóë –í—Å–µ —Ç–µ–≥–∏ —É–¥–∞–ª–µ–Ω—ã")

    except Exception as e:
        logger.error(f"Error in clear_all_handler: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–µ–≥–æ–≤", show_alert=True)


@router.callback_query(F.data.regexp(r"^tagrev:add:([0-9a-f\-]{10,})$"))
async def add_tag_handler(callback: CallbackQuery, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ç–µ–≥–∞."""
    try:
        meeting_id = callback.data.split(":")[2]

        session = await _get_session(callback, meeting_id, state)
        if not session:
            return

        await state.set_state(TagsReviewStates.waiting_custom_tag)

        await callback.message.answer(
            "‚ûï <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–≥–∞</b>\n\n"
            "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–≥ –≤ –∫–∞–Ω–æ–Ω–∏—á–µ—Å–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "‚Ä¢ <code>Finance/IFRS</code>\n"
            "‚Ä¢ <code>Business/Lavka</code>\n"
            "‚Ä¢ <code>People/Ivan Petrov</code>\n"
            "‚Ä¢ <code>Projects/Mobile App</code>\n\n"
            "üí° –ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã"
        )
        await callback.answer()

    except Exception as e:
        logger.error(f"Error in add_tag_handler: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–µ–≥–∞", show_alert=True)


@router.message(TagsReviewStates.waiting_custom_tag, F.text)
async def custom_tag_handler(message: Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ —Ç–µ–≥–∞."""
    try:
        if message.text == "/cancel":
            await state.set_state(TagsReviewStates.reviewing)
            await message.answer("‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–≥–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ")
            return

        tag = message.text.strip()

        # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∞ —Ç–µ–≥–∞
        if not _validate_tag_format(tag):
            await message.answer(
                "‚ùå <b>–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–≥–∞</b>\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: <code>–ö–∞—Ç–µ–≥–æ—Ä–∏—è/–ù–∞–∑–≤–∞–Ω–∏–µ</code>\n"
                "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: Finance, Business, People, Projects, Topic"
            )
            return

        # –ò—â–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é
        data = await state.get_data()
        session = None
        for key, value in data.items():
            if key.startswith("tagrev:") and isinstance(value, TagReviewSession):
                session = value
                break

        if not session or session.is_expired:
            await message.answer("‚ùå –°–µ—Å—Å–∏—è —Ä–µ–≤—å—é –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –∏—Å—Ç–µ–∫–ª–∞")
            await state.clear()
            return

        if not session.can_edit(message.from_user.id if message.from_user else None):
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ")
            return

        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–≥ –µ—Å–ª–∏ –µ–≥–æ –µ—â–µ –Ω–µ—Ç
        if tag not in session.working_tags:
            session.working_tags.append(tag)
            session.history.append(("add", tag))

            await _update_session(session, state)
            await state.set_state(TagsReviewStates.reviewing)

            await message.answer(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω —Ç–µ–≥: <code>{tag}</code>")
        else:
            await message.answer(f"‚ö†Ô∏è –¢–µ–≥ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: <code>{tag}</code>")

    except Exception as e:
        logger.error(f"Error in custom_tag_handler: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–µ–≥–∞")


@router.callback_query(F.data.regexp(r"^tagrev:undo:([0-9a-f\-]{10,})$"))
async def undo_handler(callback: CallbackQuery, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è."""
    try:
        meeting_id = callback.data.split(":")[2]

        session = await _get_session(callback, meeting_id, state)
        if not session:
            return

        if not session.history:
            await callback.answer("‚ùå –ò—Å—Ç–æ—Ä–∏—è –¥–µ–π—Å—Ç–≤–∏–π –ø—É—Å—Ç–∞")
            return

        # –û—Ç–º–µ–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ
        last_action, last_tag = session.history.pop()

        if last_action == "drop":
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —É–¥–∞–ª–µ–Ω–Ω—ã–π —Ç–µ–≥
            if last_tag not in session.working_tags:
                session.working_tags.append(last_tag)
        elif last_action == "add":
            # –£–¥–∞–ª—è–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–π —Ç–µ–≥
            if last_tag in session.working_tags:
                session.working_tags.remove(last_tag)

        await _update_session(session, state)

        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        message_text = _format_tags_message(session)
        keyboard = _build_tags_keyboard(session)

        await callback.message.edit_text(message_text, reply_markup=keyboard)
        await callback.answer(f"‚Ü©Ô∏è –û—Ç–º–µ–Ω–µ–Ω–æ: {last_action} '{last_tag}'")

    except Exception as e:
        logger.error(f"Error in undo_handler: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –¥–µ–π—Å—Ç–≤–∏—è", show_alert=True)


@router.callback_query(F.data.regexp(r"^tagrev:save:([0-9a-f\-]{10,})$"))
async def save_handler(callback: CallbackQuery, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ Notion."""
    try:
        meeting_id = callback.data.split(":")[2]

        session = await _get_session(callback, meeting_id, state)
        if not session:
            return

        await _finalize_review(session, callback, state, "üíæ –¢–µ–≥–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ Notion")

    except Exception as e:
        logger.error(f"Error in save_handler: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏", show_alert=True)


@router.callback_query(F.data.regexp(r"^tagrev:cancel:([0-9a-f\-]{10,})$"))
async def cancel_handler(callback: CallbackQuery, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã —Ä–µ–≤—å—é."""
    try:
        meeting_id = callback.data.split(":")[2]

        session = await _get_session(callback, meeting_id, state)
        if not session:
            return

        # –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é –±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        session_key = f"tagrev:{meeting_id}"
        await state.update_data(**{session_key: None})
        await state.clear()

        await callback.message.edit_text(
            "‚ùå <b>–†–µ–≤—å—é —Ç–µ–≥–æ–≤ –æ—Ç–º–µ–Ω–µ–Ω</b>\n\n"
            "–ò–∑–º–µ–Ω–µ–Ω–∏—è –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã. –¢–µ–≥–∏ –æ—Å—Ç–∞–ª–∏—Å—å –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π.",
            reply_markup=None,
        )
        await callback.answer("‚ùå –†–µ–≤—å—é –æ—Ç–º–µ–Ω–µ–Ω")

        logger.info(f"Tags review cancelled for meeting {meeting_id}")

    except Exception as e:
        logger.error(f"Error in cancel_handler: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ", show_alert=True)


async def _finalize_review(
    session: TagReviewSession, callback: CallbackQuery, state: FSMContext, success_message: str
) -> None:
    """–ó–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–µ–≤—å—é –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ Notion."""
    try:
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–≥–∏ –≤ Notion
        update_meeting_tags(session.meeting_id, session.working_tags)

        # –õ–æ–≥–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ
        if settings.enable_tag_edit_log:
            _log_tag_changes(session, callback.from_user.id if callback.from_user else None)

        # –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é
        session_key = f"tagrev:{session.meeting_id}"
        await state.update_data(**{session_key: None})
        await state.clear()

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        changes_summary = session.get_changes_summary()
        final_message = (
            f"{success_message}\n\n"
            f"üìä <b>–ò–∑–º–µ–Ω–µ–Ω–∏—è:</b> {changes_summary}\n"
            f"üè∑Ô∏è <b>–ò—Ç–æ–≥–æ —Ç–µ–≥–æ–≤:</b> {len(session.working_tags)}"
        )

        await callback.message.edit_text(final_message, reply_markup=None)
        await callback.answer()

        logger.info(
            f"Tags review completed for meeting {session.meeting_id}: "
            f"{len(session.original_tags)} ‚Üí {len(session.working_tags)} tags"
        )

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º Review Queue –µ—Å–ª–∏ –µ—Å—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã
        await _show_review_queue_after_tags(callback)

    except Exception as e:
        logger.error(f"Error finalizing review for meeting {session.meeting_id}: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ Notion", show_alert=True)


def _validate_tag_format(tag: str) -> bool:
    """–í–∞–ª–∏–¥–∏—Ä—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç —Ç–µ–≥–∞."""
    if not tag or "/" not in tag:
        return False

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Å–ª—ç—à
    if tag.count("/") != 1:
        return False

    parts = tag.split("/", 1)
    if len(parts) != 2:
        return False

    category, name = parts

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ–ø—É—Å—Ç–∏–º—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    allowed_categories = {"Finance", "Business", "People", "Projects", "Topic", "Area"}
    if category not in allowed_categories:
        return False

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –ø—É—Å—Ç–æ–µ
    return bool(name.strip())


def _log_tag_changes(session: TagReviewSession, user_id: int | None) -> None:
    """–õ–æ–≥–∏—Ä—É–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–≥–æ–≤ (–ø–æ–∫–∞ —Ç–æ–ª—å–∫–æ –≤ –ª–æ–≥, Notion –±–∞–∑–∞ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–∞)."""
    if not session.history:
        return

    logger.info(
        f"Tag changes for meeting {session.meeting_id} by user {user_id}: "
        f"{len(session.history)} actions"
    )

    for action, tag in session.history:
        logger.info(f"  {action.upper()}: {tag}")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è noop callbacks (–ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç –æ—à–∏–±–∫–∏)
@router.callback_query(F.data == "noop")
async def noop_handler(callback: CallbackQuery) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫."""
    await callback.answer("‚ÑπÔ∏è –≠—Ç–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è –∫–Ω–æ–ø–∫–∞", show_alert=False)
