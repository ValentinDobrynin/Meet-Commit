# app/bot/handlers_inline.py
"""Inline –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Review Queue."""

from __future__ import annotations

import logging

from aiogram import F, Router
from aiogram.types import CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup, Message

from app.core.commit_normalize import build_key, build_title
from app.core.constants import REVIEW_STATUS_DROPPED, REVIEW_STATUS_RESOLVED
from app.gateways.notion_commits import upsert_commits
from app.gateways.notion_review import get_by_short_id, list_pending, set_status, update_fields

logger = logging.getLogger(__name__)
router = Router()


async def _send_empty_queue_message(message: Message) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—É—Å—Ç–æ–π –æ—á–µ—Ä–µ–¥–∏ —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–≤—ã–π —Ñ–∞–π–ª."""
    empty_queue_kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="üìÑ –ó–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–≤—ã–π —Ñ–∞–π–ª", callback_data="main_new_file"),
            ]
        ]
    )
    await message.answer(
        "üìã Review queue –ø—É—Å—Ç–∞.\n\n" "üí° <i>–ì–æ—Ç–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–æ–≤—É—é –≤—Å—Ç—Ä–µ—á—É!</i>",
        reply_markup=empty_queue_kb,
    )


def build_main_menu_kb() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞."""
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="üìÑ –ù–æ–≤—ã–π —Ñ–∞–π–ª", callback_data="main_new_file"),
                InlineKeyboardButton(text="üîç Review", callback_data="main_review"),
            ]
        ]
    )


def build_review_item_kb(short_id: str) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–º Review Queue."""
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úÖ Confirm", callback_data=f"review_confirm:{short_id}"),
                InlineKeyboardButton(text="üîÑ Flip", callback_data=f"review_flip:{short_id}"),
            ],
            [
                InlineKeyboardButton(text="üóë Delete", callback_data=f"review_delete:{short_id}"),
                InlineKeyboardButton(text="üë§ Assign", callback_data=f"review_assign:{short_id}"),
            ],
        ]
    )


@router.callback_query(F.data == "main_new_file")
async def cb_main_new_file(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–æ–≤—ã–π —Ñ–∞–π–ª'."""
    await callback.answer()
    if callback.message:
        await callback.message.answer(
            "üìé <b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –≤—Å—Ç—Ä–µ—á–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏</b>\n\n"
            "üéØ <b>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:</b>\n"
            "‚Ä¢ üìÑ –¢–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã (.txt)\n"
            "‚Ä¢ üìã PDF –¥–æ–∫—É–º–µ–Ω—Ç—ã (.pdf)\n"
            "‚Ä¢ üìù Word –¥–æ–∫—É–º–µ–Ω—Ç—ã (.docx)\n"
            "‚Ä¢ üì∫ –°—É–±—Ç–∏—Ç—Ä—ã (.vtt, .webvtt)\n\n"
            "üí° <i>–ü—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ—Ç–∞—â–∏—Ç–µ —Ñ–∞–π–ª –≤ —á–∞—Ç –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏—è</i>"
        )


@router.callback_query(F.data == "main_review")
async def cb_main_review(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ 'Review Commits'."""
    await callback.answer()

    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é –ª–æ–≥–∏–∫—É —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –∑–∞–ø–∏—Å–µ–π
        from app.core.review_queue import list_open_reviews
        items = list_open_reviews(limit=10)  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±–æ–ª—å—à–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏

        if not items:
            if callback.message and isinstance(callback.message, Message):
                await _send_empty_queue_message(callback.message)
            return

        if callback.message:
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "Confirm All" –µ—Å–ª–∏ –µ—Å—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã
            confirm_all_kb = InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        InlineKeyboardButton(
                            text="‚úÖ Confirm All", callback_data="review_confirm_all"
                        )
                    ]
                ]
            )
            await callback.message.answer(
                f"üìã <b>Pending review ({len(items)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤):</b>", reply_markup=confirm_all_kb
            )

        for item in items:
            short_id = item["short_id"]
            text = (item.get("text") or "")[:90]
            direction = item.get("direction") or "?"
            assignees = item.get("assignees") or []
            due = item.get("due_iso") or "‚Äî"
            confidence = item.get("confidence")

            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º assignees
            who = ", ".join(assignees) if assignees else "‚Äî"
            conf_str = f"{confidence:.2f}" if confidence is not None else "‚Äî"

            message_text = (
                f"<b>[{short_id}]</b> {text}\n"
                f"üìç <i>dir={direction} | who={who} | due={due} | conf={conf_str}</i>"
            )

            if callback.message:
                await callback.message.answer(
                    message_text, reply_markup=build_review_item_kb(short_id)
                )

    except Exception as e:
        logger.error(f"Error in cb_main_review: {e}")
        if callback.message:
            await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ Review queue.")


@router.callback_query(F.data.startswith("review_confirm:"))
async def cb_review_confirm(callback: CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç —ç–ª–µ–º–µ–Ω—Ç Review –∏ —Å–æ–∑–¥–∞–µ—Ç –∫–æ–º–º–∏—Ç."""
    try:
        if not callback.data:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
            return
        short_id = callback.data.split(":")[1]
        item = get_by_short_id(short_id)

        if not item:
            await callback.answer("‚ùå –≠–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–≥–∏–∫—É –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∫–æ–º–∞–Ω–¥—ã /confirm
        text = item["text"] or ""
        direction = item["direction"] or "theirs"
        assignees = item["assignees"] or []
        due_iso = item["due_iso"]

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º title –∏ key
        title = build_title(direction, text, assignees, due_iso)
        key = build_key(text, assignees, due_iso)

        # –°–æ–∑–¥–∞–µ–º –∫–æ–º–º–∏—Ç
        commit_item = {
            "title": title,
            "text": text,
            "direction": direction,
            "assignees": assignees,
            "due_iso": due_iso,
            "confidence": item["confidence"] or 0.6,
            "flags": [],
            "key": key,
            "tags": [],
            "status": "open",
        }

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Commits
        meeting_page_id = item["meeting_page_id"]
        if not meeting_page_id:
            await callback.answer("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω meeting_page_id", show_alert=True)
            return

        result = upsert_commits(meeting_page_id, [commit_item])
        created = len(result.get("created", []))
        updated = len(result.get("updated", []))

        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
        from app.core.review_queue import validate_review_action
        
        is_valid, error_msg = validate_review_action(item, "confirm")
        if not is_valid:
            await callback.answer(f"‚ùå {error_msg}", show_alert=True)
            return

        if created or updated:
            # –ü–æ–ª—É—á–∞–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –∫–æ–º–º–∏—Ç–∞
            commit_ids = result.get("created", []) + result.get("updated", [])
            commit_id = commit_ids[0] if commit_ids else None
            
            # –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ resolved —Å –ø—Ä–∏–≤—è–∑–∫–æ–π –∫ –∫–æ–º–º–∏—Ç—É
            set_status(item["page_id"], REVIEW_STATUS_RESOLVED, linked_commit_id=commit_id)
            await callback.answer("‚úÖ Confirmed!")
            if callback.message and isinstance(callback.message, Message):
                await callback.message.edit_text(
                    f"‚úÖ <b>[{short_id}] –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ</b>\n"
                    f"üìù {text}\n"
                    f"üìä –°–æ–∑–¥–∞–Ω–æ: {created}, –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {updated}\n"
                    f"üîó –ü—Ä–∏–≤—è–∑–∞–Ω –∫–æ–º–º–∏—Ç: {commit_id[:8] if commit_id else 'none'}"
                )
            logger.info(f"Review item {short_id} confirmed via inline, linked to commit {commit_id[:8] if commit_id else 'none'}")
        else:
            await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–æ–º–º–∏—Ç", show_alert=True)

    except Exception as e:
        logger.error(f"Error in cb_review_confirm: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏", show_alert=True)


@router.callback_query(F.data.startswith("review_flip:"))
async def cb_review_flip(callback: CallbackQuery):
    """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç direction —ç–ª–µ–º–µ–Ω—Ç–∞ Review."""
    try:
        if not callback.data:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
            return
        short_id = callback.data.split(":")[1]
        item = get_by_short_id(short_id)

        if not item:
            await callback.answer("‚ùå –≠–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

        current_direction = item["direction"] or "theirs"
        new_direction = "mine" if current_direction == "theirs" else "theirs"

        success = update_fields(item["page_id"], direction=new_direction)

        if success:
            await callback.answer(f"üîÑ Direction ‚Üí {new_direction}")
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            text = (item.get("text") or "")[:90]
            assignees = item.get("assignees") or []
            due = item.get("due_iso") or "‚Äî"
            confidence = item.get("confidence")

            who = ", ".join(assignees) if assignees else "‚Äî"
            conf_str = f"{confidence:.2f}" if confidence is not None else "‚Äî"

            updated_text = (
                f"<b>[{short_id}]</b> {text}\n"
                f"üìç <i>dir={new_direction} | who={who} | due={due} | conf={conf_str}</i>"
            )

            if callback.message and isinstance(callback.message, Message):
                await callback.message.edit_text(
                    updated_text, reply_markup=build_review_item_kb(short_id)
                )
        else:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ direction", show_alert=True)

    except Exception as e:
        logger.error(f"Error in cb_review_flip: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏", show_alert=True)


@router.callback_query(F.data.startswith("review_delete:"))
async def cb_review_delete(callback: CallbackQuery):
    """–ü–æ–º–µ—á–∞–µ—Ç —ç–ª–µ–º–µ–Ω—Ç Review –∫–∞–∫ dropped."""
    try:
        if not callback.data:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
            return
        short_id = callback.data.split(":")[1]
        item = get_by_short_id(short_id)

        if not item:
            await callback.answer("‚ùå –≠–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
        from app.core.review_queue import validate_review_action
        
        is_valid, error_msg = validate_review_action(item, "delete")
        if not is_valid:
            await callback.answer(f"‚ùå {error_msg}", show_alert=True)
            return
        
        set_status(item["page_id"], REVIEW_STATUS_DROPPED)
        await callback.answer("üóë –£–¥–∞–ª–µ–Ω–æ")
        if callback.message and isinstance(callback.message, Message):
            await callback.message.edit_text(
                f"üóë <b>[{short_id}] –£–¥–∞–ª–µ–Ω–æ</b>\n" f"üìù {item.get('text', '')[:90]}"
            )
        logger.info(f"Review item {short_id} marked as dropped via inline button")

    except Exception as e:
        logger.error(f"Error in cb_review_delete: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏", show_alert=True)


@router.callback_query(F.data.startswith("review_assign:"))
async def cb_review_assign(callback: CallbackQuery):
    """–ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –Ω–∞–∑–Ω–∞—á–∏—Ç—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è —á–µ—Ä–µ–∑ —Ç–µ–∫—Å—Ç–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É."""
    try:
        if not callback.data:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
            return
        short_id = callback.data.split(":")[1]
        item = get_by_short_id(short_id)

        if not item:
            await callback.answer("‚ùå –≠–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

        await callback.answer()
        if callback.message:
            await callback.message.answer(
                f"üë§ <b>–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –¥–ª—è [{short_id}]</b>\n\n"
                f"üìù –ó–∞–¥–∞—á–∞: {item.get('text', '')[:100]}\n\n"
                f"üí° <b>–®–∞–≥ 1:</b> –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n"
                f"<code>/assign {short_id} &lt;–∏–º—è&gt;</code>\n\n"
                f"<i>–ù–∞–ø—Ä–∏–º–µ—Ä: /assign {short_id} Daniil</i>\n\n"
                f"üí° <b>–®–∞–≥ 2:</b> –ü–æ—Å–ª–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É <b>‚úÖ Confirm</b> "
                f"—á—Ç–æ–±—ã –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ –∑–∞–¥–∞—á—É –≤ Commits\n\n"
                f"üîÑ <i>–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É \"‚úÖ Confirm All\" –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–¥–∞—á —Å—Ä–∞–∑—É</i>"
            )

    except Exception as e:
        logger.error(f"Error in cb_review_assign: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏", show_alert=True)


@router.callback_query(F.data == "review_confirm_all")
async def cb_review_confirm_all(callback: CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã Review –∏ —Å–æ–∑–¥–∞–µ—Ç –∫–æ–º–º–∏—Ç—ã."""
    await callback.answer()

    try:
        from app.core.review_queue import list_open_reviews
        items = list_open_reviews(limit=50)  # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã

        if not items:
            if callback.message and isinstance(callback.message, Message):
                await _send_empty_queue_message(callback.message)
            return

        confirmed_count = 0
        errors_count = 0

        for item in items:
            try:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç—É –∂–µ –ª–æ–≥–∏–∫—É —á—Ç–æ –∏ –≤ cb_review_confirm
                text = item["text"] or ""
                direction = item["direction"] or "theirs"
                assignees = item["assignees"] or []
                due_iso = item["due_iso"]

                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º title –∏ key
                title = build_title(direction, text, assignees, due_iso)
                key = build_key(text, assignees, due_iso)

                # –°–æ–∑–¥–∞–µ–º –∫–æ–º–º–∏—Ç
                commit_item = {
                    "title": title,
                    "text": text,
                    "direction": direction,
                    "assignees": assignees,
                    "due_iso": due_iso,
                    "confidence": item["confidence"] or 0.6,
                    "flags": [],
                    "key": key,
                    "tags": [],
                    "status": "open",
                }

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Commits
                meeting_page_id = item["meeting_page_id"]
                if not meeting_page_id:
                    errors_count += 1
                    continue

                result = upsert_commits(meeting_page_id, [commit_item])
                created = len(result.get("created", []))
                updated = len(result.get("updated", []))

                if created or updated:
                    # –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ resolved
                    set_status(item["page_id"], REVIEW_STATUS_RESOLVED)
                    confirmed_count += 1
                else:
                    errors_count += 1

            except Exception as e:
                logger.error(f"Error confirming item {item.get('short_id', 'unknown')}: {e}")
                errors_count += 1
                continue

        # –û—Ç—á–µ—Ç –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö
        if callback.message:
            if confirmed_count > 0:
                result_msg = f"‚úÖ <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ: {confirmed_count} —ç–ª–µ–º–µ–Ω—Ç–æ–≤</b>"
                if errors_count > 0:
                    result_msg += f"\n‚ö†Ô∏è –û—à–∏–±–æ–∫: {errors_count}"
                await callback.message.answer(result_msg)

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—É—Å—Ç–∞ –ª–∏ –æ—á–µ—Ä–µ–¥—å –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
                remaining_items = list_pending(limit=1)
                if not remaining_items and isinstance(callback.message, Message):
                    await _send_empty_queue_message(callback.message)
            else:
                await callback.message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞")

    except Exception as e:
        logger.error(f"Error in cb_review_confirm_all: {e}")
        if callback.message:
            await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∞—Å—Å–æ–≤–æ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏")
