"""–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ª—é–¥—å–º–∏ –∏ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞–º–∏ –≤ Telegram –±–æ—Ç–µ."""

from __future__ import annotations

import logging
import re
from typing import Any

from aiogram import F, Router
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup, Message

from app.bot.states.people_states import PeopleStates
from app.core.people_store import (
    delete_candidate_by_id,
    get_candidate_by_id,
    load_candidates_raw,
    load_people_raw,
    save_people_raw,
)

logger = logging.getLogger(__name__)

router = Router()


def _validate_en_name(name: str) -> bool:
    """–í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ –∏–º—è (—Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏ –ø—Ä–æ–±–µ–ª—ã)."""
    return bool(re.match(r"^[A-Za-z\s]+$", name.strip()))


def _format_candidate_message(cand: dict[str, Any], index: int, total: int) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–∞–Ω–¥–∏–¥–∞—Ç–µ."""
    return (
        f"üß© <b>–ö–∞–Ω–¥–∏–¥–∞—Ç {index}/{total}</b>\n\n"
        f"üë§ <b>–ò–º—è:</b> {cand.get('alias', 'N/A')}\n"
        f"üìä <b>–ß–∞—Å—Ç–æ—Ç–∞:</b> {cand.get('freq', 0)}\n"
        f"üìù <b>–ö–æ–Ω—Ç–µ–∫—Å—Ç:</b> {cand.get('context', '‚Äî')[:100]}{'...' if len(cand.get('context', '')) > 100 else ''}\n"
        f"üÜî <b>ID:</b> <code>{cand.get('id', 'N/A')}</code>\n"
        f"üìç <b>–ò—Å—Ç–æ—á–Ω–∏–∫:</b> {cand.get('source', 'unknown')}"
    )


def _create_candidate_keyboard(cid: str) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π —Å –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–º."""
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úÖ –î–æ–±–∞–≤–∏—Ç—å", callback_data=f"pm_add:{cid}"),
                InlineKeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data=f"pm_del:{cid}"),
            ],
            [
                InlineKeyboardButton(text="‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data=f"pm_skip:{cid}"),
            ],
            [
                InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="pm_stats"),
                InlineKeyboardButton(text="üö™ –í—ã—Ö–æ–¥", callback_data="pm_exit"),
            ],
        ]
    )


def _pick_next_candidate(exclude_id: str | None = None) -> tuple[dict[str, Any] | None, int, int]:
    """–í—ã–±–∏—Ä–∞–µ—Ç —Å–ª–µ–¥—É—é—â–µ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏."""
    all_candidates = load_candidates_raw()
    if not all_candidates:
        return None, 0, 0

    # –ò—Å–∫–ª—é—á–∞–µ–º –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –ø–æ ID –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
    candidates = (
        [c for c in all_candidates if c.get("id") != exclude_id] if exclude_id else all_candidates
    )

    if not candidates:
        return None, 0, len(all_candidates)

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —á–∞—Å—Ç–æ—Ç–µ (—É–±—ã–≤–∞–Ω–∏–µ), –∑–∞—Ç–µ–º –ø–æ –∏–º–µ–Ω–∏
    candidates.sort(key=lambda x: (-(x.get("freq") or 0), x.get("alias", "").lower()))

    # –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å (–ø–æ–∑–∏—Ü–∏—é –≤ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–º —Å–ø–∏—Å–∫–µ)
    current_candidate = candidates[0]
    sorted_all = sorted(
        all_candidates, key=lambda x: (-(x.get("freq") or 0), x.get("alias", "").lower())
    )
    try:
        index = sorted_all.index(current_candidate) + 1
    except ValueError:
        index = 1

    return candidates[0], index, len(all_candidates)


@router.message(F.text == "/people_miner")
async def people_miner_start(message: Message, state: FSMContext) -> None:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç people miner –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤."""
    await state.set_state(PeopleStates.reviewing)

    candidate, index, total = _pick_next_candidate()

    if not candidate:
        await message.answer(
            "üß© <b>People Miner</b>\n\n"
            "‚ùå –ö–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ—Ç.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–æ—Ç–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Å—Ç—Ä–µ—á, —á—Ç–æ–±—ã —Å–æ–±—Ä–∞—Ç—å –Ω–æ–≤—ã—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤."
        )
        await state.set_state(PeopleStates.idle)
        return

    msg_text = _format_candidate_message(candidate, index, total)
    keyboard = _create_candidate_keyboard(candidate["id"])

    await message.answer(msg_text, reply_markup=keyboard)
    logger.info(
        f"Started people miner for user {message.from_user.id if message.from_user else 'unknown'}"
    )


async def pm_next_handler_with_exclude(
    callback: CallbackQuery, state: FSMContext, exclude_id: str | None = None
) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∫–∞–Ω–¥–∏–¥–∞—Ç—É —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –∏—Å–∫–ª—é—á–µ–Ω–∏—è."""
    candidate, index, total = _pick_next_candidate(exclude_id)

    if not candidate:
        if callback.message and hasattr(callback.message, "edit_text"):
            await callback.message.edit_text(
                "üß© <b>People Miner</b>\n\n"
                "‚úÖ <b>–í—Å–µ –∫–∞–Ω–¥–∏–¥–∞—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã!</b>\n\n"
                "–ë–æ–ª—å—à–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ—Ç."
            )
        await state.set_state(PeopleStates.idle)
        await callback.answer()
        return

    msg_text = _format_candidate_message(candidate, index, total)
    keyboard = _create_candidate_keyboard(candidate["id"])

    if callback.message and hasattr(callback.message, "edit_text"):
        await callback.message.edit_text(msg_text, reply_markup=keyboard)
    await callback.answer("–ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∫–∞–Ω–¥–∏–¥–∞—Ç—É")


# –£–±—Ä–∞–ª–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ pm_next, —Ç–∞–∫ –∫–∞–∫ –æ–Ω –¥—É–±–ª–∏—Ä—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å pm_skip


@router.callback_query(F.data.startswith("pm_del:"))
async def pm_delete_handler(callback: CallbackQuery, state: FSMContext) -> None:
    """–£–¥–∞–ª—è–µ—Ç –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –∏–∑ —Å–ø–∏—Å–∫–∞."""
    cid = (callback.data or "").split(":", 1)[1]

    success = delete_candidate_by_id(cid)

    if success:
        await callback.answer("‚úÖ –ö–∞–Ω–¥–∏–¥–∞—Ç —É–¥–∞–ª–µ–Ω")
        logger.info(
            f"Deleted candidate {cid} by user {callback.from_user.id if callback.from_user else 'unknown'}"
        )
    else:
        await callback.answer("‚ùå –ö–∞–Ω–¥–∏–¥–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É
    await pm_next_handler_with_exclude(callback, state)


@router.callback_query(F.data.startswith("pm_skip:"))
async def pm_skip_handler(callback: CallbackQuery, state: FSMContext) -> None:
    """–ü—Ä–æ–ø—É—Å–∫–∞–µ—Ç –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ (–æ—Å—Ç–∞–≤–ª—è–µ—Ç –≤ —Å–ø–∏—Å–∫–µ)."""
    logger.info(f"pm_skip_handler called with data: {callback.data}")
    cid = (callback.data or "").split(":", 1)[1]
    await callback.answer("‚è≠ –ö–∞–Ω–¥–∏–¥–∞—Ç –ø—Ä–æ–ø—É—â–µ–Ω")
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É, –∏—Å–∫–ª—é—á–∞—è —Ç–µ–∫—É—â–µ–≥–æ
    await pm_next_handler_with_exclude(callback, state, exclude_id=cid)


@router.callback_query(F.data.startswith("pm_add:"))
async def pm_add_handler(callback: CallbackQuery, state: FSMContext) -> None:
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ –∏–º—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–¥–∏–¥–∞—Ç–∞."""
    cid = (callback.data or "").split(":", 1)[1]
    candidate = get_candidate_by_id(cid)

    if not candidate:
        await callback.answer("‚ùå –ö–∞–Ω–¥–∏–¥–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É –∏–º–µ–Ω–∏
    await state.update_data(pending_candidate=candidate)
    await state.set_state(PeopleStates.waiting_assign_en)

    if callback.message and hasattr(callback.message, "answer"):
        await callback.message.answer(
            f"üë§ <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞</b>\n\n"
            f"<b>–ò–º—è:</b> {candidate['alias']}\n"
            f"<b>–ß–∞—Å—Ç–æ—Ç–∞:</b> {candidate.get('freq', 0)}\n\n"
            f"‚úèÔ∏è <b>–í–≤–µ–¥–∏—Ç–µ –∫–∞–Ω–æ–Ω–∏—á–µ—Å–∫–æ–µ –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ –∏–º—è:</b>\n"
            f"–ù–∞–ø—Ä–∏–º–µ—Ä: <code>Sasha Katanov</code>\n\n"
            f"<i>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã –∏ –ø—Ä–æ–±–µ–ª—ã</i>"
        )
    await callback.answer()


@router.message(PeopleStates.waiting_assign_en)
async def set_en_name_handler(message: Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ –∏–º–µ–Ω–∏ –¥–ª—è –∫–∞–Ω–¥–∏–¥–∞—Ç–∞."""
    data = await state.get_data()
    candidate = data.get("pending_candidate")
    name_en = (message.text or "").strip()

    if not candidate or not name_en:
        await message.answer(
            "‚ùå <b>–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞</b>\n\n" "–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /people_miner –¥–ª—è –Ω–∞—á–∞–ª–∞ –∑–∞–Ω–æ–≤–æ."
        )
        await state.set_state(PeopleStates.idle)
        return

    # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∏–º—è
    if not _validate_en_name(name_en):
        await message.answer(
            "‚ùå <b>–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è</b>\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã –∏ –ø—Ä–æ–±–µ–ª—ã.\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: <code>Sasha Katanov</code>\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
        )
        return

    # –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Å–ª–æ–≤–∞—Ä—å
    people = load_people_raw()
    existing_person = next((p for p in people if p.get("name_en") == name_en), None)

    if existing_person:
        # –†–∞—Å—à–∏—Ä—è–µ–º –∞–ª–∏–∞—Å—ã —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞
        aliases = set(existing_person.get("aliases", []))
        aliases.add(candidate["alias"])
        existing_person["aliases"] = sorted(list(aliases))
        logger.info(f"Extended aliases for {name_en}: added {candidate['alias']}")
    else:
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞
        people.append({"name_en": name_en, "aliases": [candidate["alias"]], "role": "", "org": ""})
        logger.info(f"Added new person: {name_en} with alias {candidate['alias']}")

    save_people_raw(people)

    # –£–¥–∞–ª—è–µ–º –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
    delete_candidate_by_id(candidate["id"])

    await message.answer(
        f"‚úÖ <b>–ö–∞–Ω–¥–∏–¥–∞—Ç –¥–æ–±–∞–≤–ª–µ–Ω</b>\n\n"
        f"üë§ <b>–ò–º—è:</b> {candidate['alias']}\n"
        f"üè∑Ô∏è <b>–ö–∞–Ω–æ–Ω–∏—á–µ—Å–∫–æ–µ –∏–º—è:</b> {name_en}\n"
        f"üìä <b>–¢–µ–≥:</b> <code>People/{name_en}</code>\n\n"
        f"–ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∫–∞–Ω–¥–∏–¥–∞—Ç—É..."
    )

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
    await state.set_state(PeopleStates.reviewing)
    await people_miner_start(message, state)


@router.callback_query(F.data == "pm_stats")
async def pm_stats_handler(callback: CallbackQuery, state: FSMContext) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –ª—é–¥—è–º –∏ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞–º."""
    logger.info(f"pm_stats_handler called with data: {callback.data}")
    people = load_people_raw()
    candidates = load_candidates_raw()

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —á–∞—Å—Ç–æ—Ç–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
    if candidates:
        freq_stats = {
            "high": len([c for c in candidates if (c.get("freq") or 0) >= 5]),
            "medium": len([c for c in candidates if 2 <= (c.get("freq") or 0) < 5]),
            "low": len([c for c in candidates if (c.get("freq") or 0) < 2]),
        }
        total_freq = sum(c.get("freq", 0) for c in candidates)
        avg_freq = total_freq / len(candidates) if candidates else 0
    else:
        freq_stats = {"high": 0, "medium": 0, "low": 0}
        avg_freq = 0

    stats_text = (
        f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ People Miner</b>\n\n"
        f"üë• <b>–õ—é–¥–∏ –≤ —Å–ª–æ–≤–∞—Ä–µ:</b> {len(people)}\n"
        f"üß© <b>–ö–∞–Ω–¥–∏–¥–∞—Ç—ã:</b> {len(candidates)}\n\n"
        f"üìà <b>–ü–æ —á–∞—Å—Ç–æ—Ç–µ:</b>\n"
        f"   üî¥ –í—ã—Å–æ–∫–∞—è (‚â•5): {freq_stats['high']}\n"
        f"   üü° –°—Ä–µ–¥–Ω—è—è (2-4): {freq_stats['medium']}\n"
        f"   üü¢ –ù–∏–∑–∫–∞—è (&lt;2): {freq_stats['low']}\n\n"
        f"üìä <b>–°—Ä–µ–¥–Ω—è—è —á–∞—Å—Ç–æ—Ç–∞:</b> {avg_freq:.1f}"
    )

    await callback.answer()
    if callback.message and hasattr(callback.message, "answer"):
        await callback.message.answer(stats_text)


@router.callback_query(F.data == "pm_exit")
async def pm_exit_handler(callback: CallbackQuery, state: FSMContext) -> None:
    """–ó–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É —Å people miner."""
    await state.set_state(PeopleStates.idle)
    if callback.message and hasattr(callback.message, "edit_text"):
        await callback.message.edit_text(
            "üß© <b>People Miner</b>\n\n"
            "üëã <b>–†–∞–±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞</b>\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /people_miner –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞."
        )
    await callback.answer("People Miner –∑–∞–≤–µ—Ä—à–µ–Ω")


@router.message(F.text == "/people_stats")
async def people_stats_handler(message: Message) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –ª—é–¥—è–º –∏ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞–º."""
    people = load_people_raw()
    candidates = load_candidates_raw()

    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–ª–∏–∞—Å–æ–≤
    total_aliases = sum(len(p.get("aliases", [])) for p in people)

    stats_text = (
        f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ª—é–¥–µ–π</b>\n\n"
        f"üë• <b>–õ—é–¥–∏ –≤ —Å–ª–æ–≤–∞—Ä–µ:</b> {len(people)}\n"
        f"üè∑Ô∏è <b>–í—Å–µ–≥–æ –∞–ª–∏–∞—Å–æ–≤:</b> {total_aliases}\n"
        f"üß© <b>–ö–∞–Ω–¥–∏–¥–∞—Ç—ã:</b> {len(candidates)}\n\n"
        f"üìà <b>–¢–æ–ø –∫–∞–Ω–¥–∏–¥–∞—Ç—ã:</b>\n"
    )

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-5 –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
    if candidates:
        sorted_candidates = sorted(candidates, key=lambda x: x.get("freq", 0), reverse=True)
        for i, cand in enumerate(sorted_candidates[:5], 1):
            stats_text += f"{i}. {cand.get('alias', 'N/A')} ({cand.get('freq', 0)})\n"
    else:
        stats_text += "–ö–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –Ω–µ—Ç"

    await message.answer(stats_text)
    logger.info(
        f"People stats requested by user {message.from_user.id if message.from_user else 'unknown'}"
    )


@router.message(F.text == "/people_reset")
async def people_reset_handler(message: Message, state: FSMContext) -> None:
    """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ people miner."""
    await state.clear()
    await message.answer(
        "üîÑ <b>–°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–±—Ä–æ—à–µ–Ω–æ</b>\n\n"
        "–í—Å–µ –¥–∞–Ω–Ω—ã–µ FSM –æ—á–∏—â–µ–Ω—ã.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /people_miner –¥–ª—è –Ω–∞—á–∞–ª–∞ –∑–∞–Ω–æ–≤–æ."
    )
    logger.info(
        f"People miner state reset by user {message.from_user.id if message.from_user else 'unknown'}"
    )
