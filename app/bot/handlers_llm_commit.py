"""
Handler –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–º–∏—Ç–æ–≤ —á–µ—Ä–µ–∑ LLM –ø–∞—Ä—Å–∏–Ω–≥ —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–≥–æ —è–∑—ã–∫–∞.
"""

from __future__ import annotations

import asyncio
import logging
from typing import Any

from aiogram import F, Router
from aiogram.types import Message

from app.bot.formatters import format_commit_card
from app.core.llm_commit_parse import parse_commit_text
from app.gateways.notion_commits import _map_commit_page
from app.gateways.notion_commits_async import upsert_commits_async

logger = logging.getLogger(__name__)
router = Router()


def _get_user_name(message: Message) -> str:
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è fallback –ª–æ–≥–∏–∫–∏."""
    if not message.from_user:
        return "Unknown User"

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º display name –∏–ª–∏ username
    name = (
        message.from_user.full_name or message.from_user.username or f"User_{message.from_user.id}"
    )
    return name.strip()


async def _create_direct_meeting() -> str:
    """–°–æ–∑–¥–∞–µ—Ç –∏–ª–∏ –ø–æ–ª—É—á–∞–µ—Ç –≤—Å—Ç—Ä–µ—á—É –¥–ª—è –ø—Ä—è–º—ã—Ö –∫–æ–º–º–∏—Ç–æ–≤."""
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∑–¥–µ—Å—å —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    from app.bot.handlers_direct_commit import _create_direct_meeting as create_meeting

    return await create_meeting()


async def _save_commit_to_notion(commit_data: dict) -> dict[str, Any]:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–æ–º–º–∏—Ç –≤ Notion –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—É—é –∑–∞–ø–∏—Å—å."""
    try:
        # –°–æ–∑–¥–∞–µ–º –≤—Å—Ç—Ä–µ—á—É –¥–ª—è –ø—Ä—è–º—ã—Ö –∫–æ–º–º–∏—Ç–æ–≤
        meeting_page_id = await _create_direct_meeting()

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–º–º–∏—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
        result = await upsert_commits_async(meeting_page_id, [commit_data])

        logger.info(f"Saved LLM commit: {result}")

        # –ü–æ–ª—É—á–∞–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –∫–æ–º–º–∏—Ç–∞
        if result.get("created"):
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–æ–º–º–∏—Ç–∞ –∏–∑ Notion –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            from app.core.clients import get_notion_client
            from app.settings import settings

            client = get_notion_client()
            try:
                response = client.databases.query(
                    database_id=settings.commits_db_id or "",
                    filter={"property": "Key", "rich_text": {"equals": commit_data["key"]}},
                    page_size=1,
                )

                if hasattr(response, "get") and response.get("results"):
                    page = response["results"][0]  # type: ignore[index]
                    return _map_commit_page(page)

            finally:
                # Notion SDK –∫–ª–∏–µ–Ω—Ç –Ω–µ —Ç—Ä–µ–±—É–µ—Ç —è–≤–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è
                pass

        # Fallback: –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        return commit_data

    except Exception as e:
        logger.error(f"Error saving LLM commit: {e}")
        raise RuntimeError(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–º–º–∏—Ç–∞: {e}") from e


@router.message(F.text.regexp(r"^/llm\s+.+$"))
async def llm_commit_handler(message: Message) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /llm –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–º–∏—Ç–æ–≤ —á–µ—Ä–µ–∑ LLM –ø–∞—Ä—Å–∏–Ω–≥."""
    try:
        if not message.text:
            await message.answer("‚ùå –û—à–∏–±–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç–µ–∫—Å—Ç –∫–æ–º–∞–Ω–¥—ã")
            return

        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ /llm
        text = message.text[4:].strip()  # –£–±–∏—Ä–∞–µ–º "/llm"
        if not text:
            await message.answer(
                "‚ö†Ô∏è <b>–£–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç –∫–æ–º–º–∏—Ç–∞</b>\n\n"
                "üí° <b>–ü—Ä–∏–º–µ—Ä—ã:</b>\n"
                "‚Ä¢ <code>/llm –°–∞—à–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é –∫ 5 –æ–∫—Ç—è–±—Ä—è</code>\n"
                "‚Ä¢ <code>/llm –°–¥–µ–ª–∞—Ç—å –¥–ª—è –ö–∞—Ç–∞–Ω–æ–≤–∞ —Å–ª–∞–π–¥—ã –¥–æ —Å—Ä–µ–¥—ã</code>\n"
                "‚Ä¢ <code>/llm –Ø —Å–æ–∑–≤–æ–Ω—é—Å—å —Å –∫–ª–∏–µ–Ω—Ç–æ–º –∑–∞–≤—Ç—Ä–∞</code>",
                parse_mode="HTML",
            )
            return

        user_name = _get_user_name(message)
        user_id = message.from_user.id if message.from_user else "unknown"

        logger.info(f"User {user_id} ({user_name}) started LLM commit: '{text}'")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º
        processing_msg = await message.answer(
            "ü§ñ <b>–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∫–æ–º–º–∏—Ç...</b>\n\n" "‚è≥ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ç–µ–∫—Å—Ç —á–µ—Ä–µ–∑ LLM...",
            parse_mode="HTML",
        )

        try:
            # 1. –ü–∞—Ä—Å–∏–Ω–≥ —á–µ—Ä–µ–∑ LLM –≤ executor (–ø–æ–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π)
            commit_data = await asyncio.get_event_loop().run_in_executor(
                None, lambda: parse_commit_text(text, user_name)
            )

            # 2. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ Notion
            await processing_msg.edit_text(
                "ü§ñ <b>–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∫–æ–º–º–∏—Ç...</b>\n\n" "üíæ –°–æ—Ö—Ä–∞–Ω—è—é –≤ Notion...", parse_mode="HTML"
            )

            notion_commit = await _save_commit_to_notion(commit_data)

            # 3. –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
            card = format_commit_card(notion_commit, device_type="mobile")

            await processing_msg.edit_text(
                f"ü§ñ <b>LLM –∫–æ–º–º–∏—Ç —Å–æ–∑–¥–∞–Ω</b>\n\n{card}", parse_mode="HTML"
            )

            logger.info(
                f"LLM commit created by user {user_id}: '{commit_data['text']}' "
                f"from {commit_data['from_person']} to {commit_data['assignees']}, "
                f"due {commit_data['due_iso'] or 'none'}"
            )

        except ValueError as e:
            # –û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
            await processing_msg.edit_text(
                f"‚ö†Ô∏è <b>–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏</b>\n\n"
                f"<code>{str(e)}</code>\n\n"
                f"üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á—É",
                parse_mode="HTML",
            )
            logger.warning(f"LLM commit validation error for user {user_id}: {e}")

        except RuntimeError as e:
            # –û—à–∏–±–∫–∏ LLM –∏–ª–∏ Notion
            await processing_msg.edit_text(
                f"‚ùå <b>–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏</b>\n\n"
                f"<code>{str(e)}</code>\n\n"
                f"üîÑ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ <code>/commit</code>",
                parse_mode="HTML",
            )
            logger.error(f"LLM commit processing error for user {user_id}: {e}")

        except Exception as e:
            # –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏
            await processing_msg.edit_text(
                f"‚ùå <b>–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞</b>\n\n"
                f"<code>{str(e)}</code>\n\n"
                f"üîÑ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É",
                parse_mode="HTML",
            )
            logger.error(f"Unexpected error in LLM commit for user {user_id}: {e}")

    except Exception as e:
        # –û—à–∏–±–∫–∞ –Ω–∞ —É—Ä–æ–≤–Ω–µ handler
        logger.error(f"Handler error in llm_commit_handler: {e}")
        await message.answer(
            "‚ùå <b>–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞</b>\n\n" "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É", parse_mode="HTML"
        )
