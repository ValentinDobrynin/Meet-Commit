"""–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞.

–í–∫–ª—é—á–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–æ–π —Ç–µ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏.
"""

from __future__ import annotations

import logging
import re

from aiogram import F, Router
from aiogram.fsm.context import FSMContext
from aiogram.types import Message

from app.core.clients import clear_clients_cache, get_clients_info
from app.core.metrics import snapshot as get_metrics_snapshot
from app.core.tagger_v1_scored import validate_rules
from app.core.tags import clear_cache, get_tagging_stats, reload_tags_rules, tag_text_scored
from app.settings import settings

logger = logging.getLogger(__name__)

router = Router()


def _is_admin(message: Message) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."""
    user_id = message.from_user.id if message.from_user else None
    return settings.is_admin(user_id)


@router.message(F.text == "/reload_tags")
async def reload_tags_handler(message: Message) -> None:
    """–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ—Ç –ø—Ä–∞–≤–∏–ª–∞ —Ç–µ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑ YAML —Ñ–∞–π–ª–∞."""
    if not _is_admin(message):
        await message.answer("‚ùå –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
        return

    try:
        rules_count = reload_tags_rules()
        await message.answer(
            f"‚ôªÔ∏è <b>Tag rules reloaded</b>\n\n"
            f"üìä <b>{rules_count}</b> –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∑–∞–≥—Ä—É–∂–µ–Ω–æ\n"
            f"üîÑ LRU –∫—ç—à –æ—á–∏—â–µ–Ω"
        )
        user_id = message.from_user.id if message.from_user else "unknown"
        logger.info(f"Admin {user_id} reloaded tag rules: {rules_count} categories")

    except Exception as e:
        logger.error(f"Failed to reload tag rules: {e}")
        await message.answer("‚ùå <b>–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∞–≤–∏–ª</b>\n\n" f"<code>{str(e)}</code>")


@router.message(F.text == "/tags_stats")
async def tags_stats_handler(message: Message) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∏—Å—Ç–µ–º—ã —Ç–µ–≥–∏—Ä–æ–≤–∞–Ω–∏—è."""
    if not _is_admin(message):
        await message.answer("‚ùå –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
        return

    try:
        stats = get_tagging_stats()

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        stats_text = (
            f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã —Ç–µ–≥–∏—Ä–æ–≤–∞–Ω–∏—è</b>\n\n"
            f"üéØ <b>–†–µ–∂–∏–º:</b> {stats['current_mode']}\n"
            f"üìà <b>–í—ã–∑–æ–≤—ã –ø–æ —Ä–µ–∂–∏–º–∞–º:</b>\n"
        )

        for mode, count in stats["stats"]["calls_by_mode"].items():
            stats_text += f"   ‚Ä¢ {mode}: {count}\n"

        stats_text += "\nüìã <b>–í—ã–∑–æ–≤—ã –ø–æ —Ç–∏–ø–∞–º:</b>\n"
        for kind, count in stats["stats"]["calls_by_kind"].items():
            stats_text += f"   ‚Ä¢ {kind}: {count}\n"

        cache_info = stats["cache_info"]
        stats_text += (
            f"\nüíæ <b>–ö—ç—à:</b> {cache_info['hits']} hits, "
            f"{cache_info['misses']} misses\n"
            f"üì¶ <b>–†–∞–∑–º–µ—Ä:</b> {cache_info['currsize']}/{cache_info['maxsize']}\n"
            f"üîÑ <b>–ü—Ä–∞–≤–∏–ª–∞ –º–∞–ø–ø–∏–Ω–≥–∞:</b> {stats['mapping_rules']}"
        )

        if "v1_stats" in stats and "error" not in stats["v1_stats"]:
            v1_stats = stats["v1_stats"]
            stats_text += (
                f"\n\nüè∑Ô∏è <b>Tagger v1 Scored:</b>\n"
                f"   ‚Ä¢ –ü—Ä–∞–≤–∏–ª: {v1_stats.get('total_rules', 0)}\n"
                f"   ‚Ä¢ –ü–∞—Ç—Ç–µ—Ä–Ω–æ–≤: {v1_stats.get('total_patterns', 0)}\n"
                f"   ‚Ä¢ –ò—Å–∫–ª—é—á–µ–Ω–∏–π: {v1_stats.get('total_excludes', 0)}\n"
                f"   ‚Ä¢ –°—Ä–µ–¥–Ω–∏–π –≤–µ—Å: {v1_stats.get('average_weight', 0):.2f}\n"
                f"   ‚Ä¢ –ü–æ—Ä–æ–≥ score: {stats.get('tags_min_score', 0.5)}"
            )

        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        if "performance" in stats:
            perf = stats["performance"]
            stats_text += (
                f"\n\n‚ö° <b>–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</b>\n"
                f"   ‚Ä¢ Uptime: {perf.get('uptime_hours', 0):.1f}—á\n"
                f"   ‚Ä¢ –í—ã–∑–æ–≤–æ–≤/—á–∞—Å: {perf.get('calls_per_hour', 0):.1f}\n"
                f"   ‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {perf.get('avg_response_time_ms', 0):.1f}–º—Å"
            )

        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ø —Ç–µ–≥–∏
        if "top_tags" in stats and stats["top_tags"]:
            top_tags = stats["top_tags"][:5]  # –¢–æ–ø-5
            stats_text += "\n\nüî• <b>–¢–æ–ø —Ç–µ–≥–∏:</b>\n"
            for tag, count in top_tags:
                stats_text += f"   ‚Ä¢ {tag}: {count}\n"

        await message.answer(stats_text)
        user_id = message.from_user.id if message.from_user else "unknown"
        logger.info(f"Admin {user_id} requested tags stats")

    except Exception as e:
        logger.error(f"Failed to get tags stats: {e}")
        await message.answer("‚ùå <b>–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏</b>\n\n" f"<code>{str(e)}</code>")


@router.message(F.text == "/metrics")
async def metrics_handler(message: Message) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–±—â–∏–µ –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã."""
    if not _is_admin(message):
        await message.answer("‚ùå –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
        return

    try:
        snapshot = get_metrics_snapshot()

        # –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ª–∞—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
        def format_latency(name: str) -> str:
            lat = snapshot.latency.get(name, {})
            if lat.get("count", 0) == 0:
                return f"{name}: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
            return (
                f"{name}: n={lat.get('count', 0)} "
                f"avg={lat.get('avg', 0):.1f}ms "
                f"p95={lat.get('p95', 0):.1f}ms "
                f"p99={lat.get('p99', 0):.1f}ms"
            )

        # –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤ LLM
        def format_llm_tokens(name: str) -> str:
            tokens = snapshot.llm_tokens.get(name, {})
            if tokens.get("calls", 0) == 0:
                return f"{name}: –Ω–µ—Ç –≤—ã–∑–æ–≤–æ–≤"
            return (
                f"{name}: {tokens.get('calls', 0)} –≤—ã–∑–æ–≤–æ–≤, "
                f"{tokens.get('total_tokens', 0):,} —Ç–æ–∫–µ–Ω–æ–≤ "
                f"(prompt: {tokens.get('prompt_tokens', 0):,}, "
                f"completion: {tokens.get('completion_tokens', 0):,})"
            )

        metrics_text = (
            f"üìä <b>–ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏</b>\n\n"
            f"ü§ñ <b>LLM –æ–ø–µ—Ä–∞—Ü–∏–∏:</b>\n"
            f"üìù {format_latency('llm.summarize')}\n"
            f"üìã {format_latency('llm.extract_commits')}\n"
            f"üß† {format_latency('llm.commit_parse')}\n\n"
            f"üí∞ <b>LLM —Ç–æ–∫–µ–Ω—ã:</b>\n"
            f"üìù {format_llm_tokens('llm.summarize')}\n"
            f"üìã {format_llm_tokens('llm.extract_commits')}\n"
            f"üß† {format_llm_tokens('llm.commit_parse')}\n\n"
            f"üìÅ <b>–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤:</b>\n"
            f"üìÑ {format_latency('ingest.extract')}\n\n"
            f"üóÑÔ∏è <b>Notion API:</b>\n"
            f"üìÖ {format_latency('notion.create_meeting')}\n"
            f"üìù {format_latency('notion.upsert_commits')}\n"
            f"üîç {format_latency('notion.query_commits')}\n"
            f"‚úÖ {format_latency('notion.update_commit_status')}\n\n"
            f"‚ôªÔ∏è <b>–î–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è –≤—Å—Ç—Ä–µ—á:</b>\n"
            f"üéØ –ü–æ–ø–∞–¥–∞–Ω–∏—è: {snapshot.counters.get('meetings.dedup.hit', 0)}\n"
            f"üÜï –ü—Ä–æ–º–∞—Ö–∏: {snapshot.counters.get('meetings.dedup.miss', 0)}\n\n"
            f"üè∑Ô∏è <b>–¢–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ:</b>\n"
            f"üéØ {format_latency('tagging.tag_text')}\n\n"
        )

        # –î–æ–±–∞–≤–ª—è–µ–º –æ—à–∏–±–∫–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
        if snapshot.errors:
            metrics_text += "‚ùå <b>–û—à–∏–±–∫–∏:</b>\n"
            for error_name, count in list(snapshot.errors.items())[:5]:  # –¢–æ–ø-5 –æ—à–∏–±–æ–∫
                metrics_text += f"   ‚Ä¢ {error_name}: {count}\n"
        else:
            metrics_text += "‚úÖ <b>–û—à–∏–±–æ–∫ –Ω–µ—Ç</b>\n"

        # –î–æ–±–∞–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏ —É—Å–ø–µ—à–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
        success_counters = {k: v for k, v in snapshot.counters.items() if k.endswith(".success")}
        if success_counters:
            metrics_text += "\nüéØ <b>–£—Å–ø–µ—à–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏:</b>\n"
            for counter_name, count in list(success_counters.items())[:5]:
                clean_name = counter_name.replace(".success", "")
                metrics_text += f"   ‚Ä¢ {clean_name}: {count}\n"

        await message.answer(metrics_text, parse_mode="HTML")
        user_id = message.from_user.id if message.from_user else "unknown"
        logger.info(f"Admin {user_id} requested metrics")

    except Exception as e:
        logger.error(f"Failed to get metrics: {e}")
        await message.answer("‚ùå <b>–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫</b>\n\n" f"<code>{str(e)}</code>")


@router.message(F.text == "/dedup_status")
async def dedup_status_handler(message: Message) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏ –≤—Å—Ç—Ä–µ—á."""
    if not _is_admin(message):
        await message.answer("‚ùå –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
        return

    try:
        from app.core.metrics import snapshot
        from app.settings import settings

        snap = snapshot()

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏
        hits = snap.counters.get("meetings.dedup.hit", 0)
        misses = snap.counters.get("meetings.dedup.miss", 0)
        total = hits + misses
        hit_rate = (hits / total * 100) if total > 0 else 0

        status_text = (
            f"‚ôªÔ∏è <b>–°—Ç–∞—Ç—É—Å –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏ –≤—Å—Ç—Ä–µ—á</b>\n\n"
            f"üéõÔ∏è <b>–°—Ç–∞—Ç—É—Å:</b> {'üü¢ –í–∫–ª—é—á–µ–Ω–∞' if settings.enable_meetings_dedup else 'üî¥ –û—Ç–∫–ª—é—á–µ–Ω–∞'}\n\n"
            f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
            f"üéØ –ü–æ–ø–∞–¥–∞–Ω–∏—è: {hits}\n"
            f"üÜï –ü—Ä–æ–º–∞—Ö–∏: {misses}\n"
            f"üìà Hit rate: {hit_rate:.1f}%\n"
            f"üìã –í—Å–µ–≥–æ –æ–ø–µ—Ä–∞—Ü–∏–π: {total}\n\n"
        )

        if settings.enable_meetings_dedup:
            status_text += (
                "‚úÖ <b>–î–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è –∞–∫—Ç–∏–≤–Ω–∞</b>\n"
                "‚Ä¢ –ü–æ–≤—Ç–æ—Ä–Ω—ã–µ –∑–∞–≥—Ä—É–∑–∫–∏ –æ–±–Ω–æ–≤–ª—è—é—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –≤—Å—Ç—Ä–µ—á–∏\n"
                "‚Ä¢ –¢–µ–≥–∏ –∏ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –æ–±—ä–µ–¥–∏–Ω—è—é—Ç—Å—è\n"
                "‚Ä¢ Summary MD –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è\n\n"
                "üîß –û—Ç–∫–ª—é—á–∏—Ç—å: <code>/dedup_toggle</code>"
            )
        else:
            status_text += (
                "‚ö†Ô∏è <b>–î–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞</b>\n"
                "‚Ä¢ –ö–∞–∂–¥–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é –≤—Å—Ç—Ä–µ—á—É\n"
                "‚Ä¢ –í–æ–∑–º–æ–∂–Ω—ã –¥—É–±–ª–∏–∫–∞—Ç—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö\n\n"
                "üîß –í–∫–ª—é—á–∏—Ç—å: <code>/dedup_toggle</code>"
            )

        await message.answer(status_text, parse_mode="HTML")

        user_id = message.from_user.id if message.from_user else "unknown"
        logger.info(f"Admin {user_id} requested dedup status")

    except Exception as e:
        logger.error(f"Error in dedup_status_handler: {e}")
        await message.answer(f"‚ùå <b>–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞</b>\n\n<code>{str(e)}</code>")


@router.message(F.text == "/dedup_toggle")
async def dedup_toggle_handler(message: Message) -> None:
    """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏ –≤—Å—Ç—Ä–µ—á."""
    if not _is_admin(message):
        await message.answer("‚ùå –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
        return

    try:
        from app.settings import settings

        # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        old_state = settings.enable_meetings_dedup
        settings.enable_meetings_dedup = not old_state
        new_state = settings.enable_meetings_dedup

        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        if new_state:
            description = (
                "‚úÖ <b>–î–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è –≤—Å—Ç—Ä–µ—á –≤–∫–ª—é—á–µ–Ω–∞</b>\n\n"
                "üìã <b>–ß—Ç–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å:</b>\n"
                "‚Ä¢ –ü–æ–≤—Ç–æ—Ä–Ω—ã–µ –∑–∞–≥—Ä—É–∑–∫–∏ –±—É–¥—É—Ç –æ–±–Ω–æ–≤–ª—è—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –≤—Å—Ç—Ä–µ—á–∏\n"
                "‚Ä¢ –¢–µ–≥–∏ –∏ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –±—É–¥—É—Ç –æ–±—ä–µ–¥–∏–Ω—è—Ç—å—Å—è\n"
                "‚Ä¢ Summary MD –±—É–¥–µ—Ç –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞—Ç—å—Å—è\n\n"
                "üîß –û—Ç–∫–ª—é—á–∏—Ç—å: <code>/dedup_toggle</code>"
            )
        else:
            description = (
                "‚ö†Ô∏è <b>–î–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è –≤—Å—Ç—Ä–µ—á –æ—Ç–∫–ª—é—á–µ–Ω–∞</b>\n\n"
                "üìã <b>–ß—Ç–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å:</b>\n"
                "‚Ä¢ –ö–∞–∂–¥–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –Ω–æ–≤—É—é –≤—Å—Ç—Ä–µ—á—É\n"
                "‚Ä¢ –í–æ–∑–º–æ–∂–Ω—ã –¥—É–±–ª–∏–∫–∞—Ç—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö\n"
                "‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏\n\n"
                "üîß –í–∫–ª—é—á–∏—Ç—å: <code>/dedup_toggle</code>"
            )

        await message.answer(description, parse_mode="HTML")

        user_id = message.from_user.id if message.from_user else "unknown"
        logger.info(f"Admin {user_id} toggled meetings dedup: {old_state} ‚Üí {new_state}")

    except Exception as e:
        logger.error(f"Error in dedup_toggle_handler: {e}")
        await message.answer(f"‚ùå <b>–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è</b>\n\n<code>{str(e)}</code>")


@router.message(F.text == "/clear_cache")
async def clear_cache_handler(message: Message) -> None:
    """–û—á–∏—â–∞–µ—Ç –∫—ç—à —Å–∏—Å—Ç–µ–º—ã —Ç–µ–≥–∏—Ä–æ–≤–∞–Ω–∏—è."""
    if not _is_admin(message):
        await message.answer("‚ùå –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
        return

    try:
        clear_cache()
        await message.answer(
            "üßπ <b>–ö—ç—à –æ—á–∏—â–µ–Ω</b>\n\n"
            "LRU –∫—ç—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å–±—Ä–æ—à–µ–Ω.\n"
            "–°–ª–µ–¥—É—é—â–∏–µ –∑–∞–ø—Ä–æ—Å—ã –±—É–¥—É—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è –∑–∞–Ω–æ–≤–æ."
        )
        user_id = message.from_user.id if message.from_user else "unknown"
        logger.info(f"Admin {user_id} cleared tagging cache")

    except Exception as e:
        logger.error(f"Failed to clear cache: {e}")
        await message.answer("‚ùå <b>–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞</b>\n\n" f"<code>{str(e)}</code>")


@router.message(F.text == "/tags_validate")
async def tags_validate_handler(message: Message) -> None:
    """–í–∞–ª–∏–¥–∏—Ä—É–µ—Ç YAML —Ñ–∞–π–ª –ø—Ä–∞–≤–∏–ª —Ç–µ–≥–∏—Ä–æ–≤–∞–Ω–∏—è."""
    if not _is_admin(message):
        await message.answer("‚ùå –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
        return

    try:
        errors = validate_rules()

        if not errors:
            await message.answer(
                "‚úÖ <b>YAML –≤–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ–π–¥–µ–Ω–∞</b>\n\n"
                "–í—Å–µ –ø—Ä–∞–≤–∏–ª–∞ —Ç–µ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã:\n"
                "‚Ä¢ Regex –ø–∞—Ç—Ç–µ—Ä–Ω—ã –≤–∞–ª–∏–¥–Ω—ã\n"
                "‚Ä¢ –ù–µ—Ç –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ —Ç–µ–≥–æ–≤\n"
                "‚Ä¢ –í–µ—Å–∞ –≤ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö –ø—Ä–µ–¥–µ–ª–∞—Ö\n"
                "‚Ä¢ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ñ–∞–π–ª–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞"
            )
        else:
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫ –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
            display_errors = errors[:20]
            error_text = "\n".join(f"‚Ä¢ {error}" for error in display_errors)

            if len(errors) > 20:
                error_text += f"\n\n... –∏ –µ—â–µ {len(errors) - 20} –æ—à–∏–±–æ–∫"

            await message.answer(
                f"‚ùå <b>–ù–∞–π–¥–µ–Ω—ã –æ—à–∏–±–∫–∏ –≤ YAML ({len(errors)}):</b>\n\n"
                f"{error_text}\n\n"
                f"üí° –ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ –∏ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ /reload_tags"
            )

        user_id = message.from_user.id if message.from_user else "unknown"
        logger.info(f"Admin {user_id} validated YAML rules: {len(errors)} errors found")

    except Exception as e:
        logger.error(f"Error in tags validation: {e}")
        await message.answer(f"‚ùå <b>–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ YAML</b>\n\n<code>{str(e)}</code>")


@router.message(F.text.regexp(r"^/retag\s+([0-9a-f\-]{10,})(\s+dry-run)?$", flags=re.I))
async def retag_handler(message: Message) -> None:
    """–ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Ç–µ–≥–∏ –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤—Å—Ç—Ä–µ—á–∏ —Å –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º dry-run."""
    if not _is_admin(message):
        await message.answer("‚ùå –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
        return

    try:
        if not message.text:
            await message.answer("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã")
            return

        # –ü–∞—Ä—Å–∏–º –∫–æ–º–∞–Ω–¥—É
        match = re.match(r"^/retag\s+([0-9a-f\-]{10,})(\s+dry-run)?$", message.text, re.I)
        if not match:
            await message.answer("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã")
            return

        meeting_id = match.group(1).strip()
        is_dry_run = bool(match.group(2))

        await message.answer(
            f"üîç <b>Retag {'(dry-run)' if is_dry_run else ''}</b>\n\n‚è≥ –ü–æ–ª—É—á–∞—é –¥–∞–Ω–Ω—ã–µ –≤—Å—Ç—Ä–µ—á–∏..."
        )

        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏
        from app.core.tags import tag_text
        from app.gateways.notion_meetings import (
            fetch_meeting_page,
            update_meeting_tags,
            validate_meeting_access,
        )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        if not validate_meeting_access(meeting_id):
            await message.answer(f"‚ùå –°—Ç—Ä–∞–Ω–∏—Ü–∞ –≤—Å—Ç—Ä–µ—á–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: {meeting_id}")
            return

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        page_data = fetch_meeting_page(meeting_id)

        # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–µ–≥–∏
        summary_md = page_data.get("summary_md", "")
        if not summary_md:
            await message.answer("‚ùå –ù–µ—Ç summary –¥–ª—è –ø–µ—Ä–µ—Å—á–µ—Ç–∞ —Ç–µ–≥–æ–≤")
            return

        new_tags = set(tag_text(summary_md))
        old_tags = set(page_data.get("current_tags", []))

        # –í—ã—á–∏—Å–ª—è–µ–º diff
        tags_to_add = sorted(new_tags - old_tags)
        tags_to_remove = sorted(old_tags - new_tags)

        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        title = page_data.get("title", "Unknown")[:50]
        report_lines = [
            f"üìÑ <b>–í—Å—Ç—Ä–µ—á–∞:</b> {title}",
            f"üÜî <b>ID:</b> <code>{meeting_id}</code>",
            f"üìä <b>–°—Ç–∞—Ä—ã—Ö —Ç–µ–≥–æ–≤:</b> {len(old_tags)}",
            f"üìä <b>–ù–æ–≤—ã—Ö —Ç–µ–≥–æ–≤:</b> {len(new_tags)}",
        ]

        if tags_to_add:
            report_lines.append(f"\n‚ûï <b>–î–æ–±–∞–≤–∏—Ç—å ({len(tags_to_add)}):</b>")
            for tag in tags_to_add:
                report_lines.append(f"   ‚Ä¢ <code>{tag}</code>")

        if tags_to_remove:
            report_lines.append(f"\n‚ûñ <b>–£–¥–∞–ª–∏—Ç—å ({len(tags_to_remove)}):</b>")
            for tag in tags_to_remove:
                report_lines.append(f"   ‚Ä¢ <code>{tag}</code>")

        if not tags_to_add and not tags_to_remove:
            report_lines.append("\n‚úÖ <b>–ò–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ—Ç</b> - —Ç–µ–≥–∏ –∞–∫—Ç—É–∞–ª—å–Ω—ã")

        # –í—ã–ø–æ–ª–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
        if is_dry_run or (not tags_to_add and not tags_to_remove):
            # Dry-run –∏–ª–∏ –Ω–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π
            mode_text = "üîç <b>Dry-run —Ä–µ–∑—É–ª—å—Ç–∞—Ç</b>" if is_dry_run else "‚ÑπÔ∏è <b>–†–µ–∑—É–ª—å—Ç–∞—Ç</b>"
            await message.answer(f"{mode_text}\n\n" + "\n".join(report_lines))
        else:
            # –†–µ–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
            try:
                update_meeting_tags(meeting_id, sorted(new_tags))
                report_lines.insert(0, "‚ôªÔ∏è <b>–¢–µ–≥–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã</b>\n")
                await message.answer("\n".join(report_lines))

                logger.info(
                    f"Retagged meeting {meeting_id}: +{len(tags_to_add)} -{len(tags_to_remove)}"
                )

            except Exception as update_error:
                logger.error(f"Error updating meeting tags: {update_error}")
                await message.answer(
                    f"‚ùå <b>–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–µ–≥–æ–≤</b>\n\n"
                    f"<code>{str(update_error)}</code>\n\n"
                    f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ dry-run –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏: <code>/retag {meeting_id} dry-run</code>"
                )

        user_id = message.from_user.id if message.from_user else "unknown"
        logger.info(f"Admin {user_id} executed retag for {meeting_id} (dry-run: {is_dry_run})")

    except Exception as e:
        logger.error(f"Error in retag_handler: {e}")
        await message.answer(f"‚ùå <b>–û—à–∏–±–∫–∞ retag</b>\n\n<code>{str(e)}</code>")


@router.message(F.text.regexp(r"^/test_tags\s+.+$"))
async def test_tags_handler(message: Message) -> None:
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç scored —Ç—ç–≥–≥–µ—Ä –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–º —Ç–µ–∫—Å—Ç–µ."""
    if not _is_admin(message):
        await message.answer("‚ùå –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
        return

    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã
        text_to_test = (message.text or "").split("/test_tags", 1)[1].strip()

        if not text_to_test:
            await message.answer(
                "‚ùå –£–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.\n–ü—Ä–∏–º–µ—Ä: <code>/test_tags –û–±—Å—É–¥–∏–ª–∏ IFRS –∞—É–¥–∏—Ç</code>"
            )
            return

        # –ü–æ–ª—É—á–∞–µ–º scored —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        scored_results = tag_text_scored(text_to_test)

        if not scored_results:
            await message.answer(
                f"üè∑Ô∏è <b>–¢–µ—Å—Ç —Ç–µ–≥–∏—Ä–æ–≤–∞–Ω–∏—è</b>\n\nüìù –¢–µ–∫—Å—Ç: <i>{text_to_test}</i>\n\n‚ùå –¢–µ–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
            )
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        response_lines = [
            "üè∑Ô∏è <b>–¢–µ—Å—Ç scored —Ç—ç–≥–≥–µ—Ä–∞</b>\n",
            f"üìù <b>–¢–µ–∫—Å—Ç:</b> <i>{text_to_test}</i>\n",
            f"üéØ <b>–ü–æ—Ä–æ–≥:</b> {settings.tags_min_score}\n",
            f"üìä <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã ({len(scored_results)} —Ç–µ–≥–æ–≤):</b>",
        ]

        for tag, score in scored_results:
            status = "‚úÖ" if score >= settings.tags_min_score else "‚ùå"
            response_lines.append(f"  {status} <code>{tag}</code>: {score:.2f}")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–µ–≥–∏
        from app.core.tags import tag_text

        final_tags = tag_text(text_to_test)
        if final_tags:
            response_lines.extend(
                [
                    f"\nüèÜ <b>–§–∏–Ω–∞–ª—å–Ω—ã–µ —Ç–µ–≥–∏ ({len(final_tags)}):</b>",
                    *[f"  ‚Ä¢ <code>{tag}</code>" for tag in final_tags],
                ]
            )

        await message.answer("\n".join(response_lines))

        user_id = message.from_user.id if message.from_user else "unknown"
        logger.info(f"Admin {user_id} tested tags for text: {text_to_test[:50]}...")

    except Exception as e:
        logger.error(f"Error in test_tags_handler: {e}")
        await message.answer(f"‚ùå <b>–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–≥–æ–≤</b>\n\n<code>{str(e)}</code>")


@router.message(F.text == "/admin_help")
async def admin_help_handler(message: Message) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö –∫–æ–º–∞–Ω–¥."""
    if not _is_admin(message):
        await message.answer("‚ùå –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
        return

    help_text = (
        "üîß <b>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã</b>\n\n"
        "üìä <b>–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥:</b>\n"
        "üìà <code>/metrics</code> - –û–±—â–∏–µ –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã\n"
        "üè∑Ô∏è <code>/tags_stats</code> - –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã —Ç–µ–≥–∏—Ä–æ–≤–∞–Ω–∏—è\n\n"
        "üè∑Ô∏è <b>–°–∏—Å—Ç–µ–º–∞ —Ç–µ–≥–∏—Ä–æ–≤–∞–Ω–∏—è:</b>\n"
        "‚ôªÔ∏è <code>/reload_tags</code> - –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–∞–≤–∏–ª–∞ —Ç–µ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑ YAML\n"
        "‚úÖ <code>/tags_validate</code> - –í–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å YAML —Ñ–∞–π–ª –ø—Ä–∞–≤–∏–ª\n"
        "üßπ <code>/clear_cache</code> - –û—á–∏—Å—Ç–∏—Ç—å LRU –∫—ç—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤\n"
        "üß™ <code>/test_tags &lt;—Ç–µ–∫—Å—Ç&gt;</code> - –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å scored —Ç—ç–≥–≥–µ—Ä\n\n"
        "üîÑ <b>Retag —Ñ—É–Ω–∫—Ü–∏–∏:</b>\n"
        "üîç <code>/retag &lt;meeting_id&gt; dry-run</code> - –ü–æ–∫–∞–∑–∞—Ç—å diff —Ç–µ–≥–æ–≤\n"
        "‚ôªÔ∏è <code>/retag &lt;meeting_id&gt;</code> - –ü–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å –∏ –æ–±–Ω–æ–≤–∏—Ç—å —Ç–µ–≥–∏\n"
        "üè∑Ô∏è <code>/review_tags &lt;meeting_id&gt;</code> - –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ —Ä–µ–≤—å—é —Ç–µ–≥–æ–≤\n\n"
        "üÜï <b>–ú–∞—Å—Å–æ–≤–æ–µ –ø–µ—Ä–µ—Ç–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ:</b>\n"
        "üîÑ <code>/retag_all [–ø–∞—Ä–∞–º–µ—Ç—Ä—ã]</code> - –ú–∞—Å—Å–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–≥–æ–≤\n"
        "   üí° <i>–ü—Ä–∏–º–µ—Ä: /retag_all meetings dry=1</i>\n"
        "‚ùì <code>/retag_help</code> - –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å–ø—Ä–∞–≤–∫–∞ –ø–æ –ø–µ—Ä–µ—Ç–µ–≥–∏—Ä–æ–≤–∞–Ω–∏—é\n"
        "   üìã –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: meetings|commits, since=–¥–∞—Ç–∞, limit=N, mode=v0|v1|both, dry=0|1\n\n"
        "‚ö° <b>–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫–ª–∏–µ–Ω—Ç–æ–≤:</b>\n"
        "üìä <code>/clients_stats</code> - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏ connection pooling\n"
        "üßπ <code>/clients_cleanup</code> - –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ Notion SDK –∫–ª–∏–µ–Ω—Ç–æ–≤\n\n"
        "üîÑ <b>Notion —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è:</b>\n"
        "üì• <code>/sync_tags</code> - –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∞–≤–∏–ª–∞ –∏–∑ Notion Tag Catalog\n"
        "üîç <code>/sync_tags dry-run</code> - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –±–µ–∑ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è\n"
        "üìä <code>/sync_status</code> - –°—Ç–∞—Ç—É—Å –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏\n\n"
        "üë• <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª—é–¥—å–º–∏:</b>\n"
        "üß© <code>/people_miner</code> - –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ (v1)\n"
        "üÜï <code>/people_miner2 [freq|date]</code> - People Miner v2 —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º UX\n"
        "üìä <code>/people_stats</code> - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ª—é–¥–µ–π –∏ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤\n"
        "üìà <code>/people_stats_v2</code> - –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ People Miner v2\n"
        "üìà <code>/people_activity</code> - –†–µ–π—Ç–∏–Ω–≥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ª—é–¥–µ–π –≤ –∫–æ–º–º–∏—Ç–∞—Ö\n"
        "üîÑ <code>/people_reset</code> - –°–±—Ä–æ—Å–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ People Miner v1\n"
        "üßπ <code>/people_clear_v2</code> - –û—á–∏—Å—Ç–∏—Ç—å –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ People Miner v2\n\n"
        "üìã <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–≤–µ—Å—Ç–æ–∫:</b>\n"
        "üìä <code>/agenda_stats</code> - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è agenda —Å–∏—Å—Ç–µ–º—ã\n\n"
        "üé® <b>–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ:</b>\n"
        "üì± <code>/adaptive_demo</code> - –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è\n"
        "üì± <code>/adaptive_demo mobile</code> - –ü–æ–∫–∞–∑–∞—Ç—å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –º–æ–±–∏–ª—å–Ω–æ–≥–æ\n\n"
        "‚ôªÔ∏è <b>–î–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è –≤—Å—Ç—Ä–µ—á:</b>\n"
        "üéõÔ∏è <code>/dedup_status</code> - –°—Ç–∞—Ç—É—Å –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏ –≤—Å—Ç—Ä–µ—á\n"
        "üîß <code>/dedup_toggle</code> - –í–∫–ª—é—á–∏—Ç—å/–æ—Ç–∫–ª—é—á–∏—Ç—å –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—é\n\n"
        "üîß <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞:</b>\n"
        "‚ùì <code>/admin_help</code> - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n"
        "üîß <code>/admin_config</code> - –ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –ø—Ä–∞–≤\n\n"
        "‚ö†Ô∏è <b>–í–∞–∂–Ω–æ:</b>\n"
        "‚Ä¢ –ö–æ–º–∞–Ω–¥—ã –º–∞—Å—Å–æ–≤–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Å–µ–≥–¥–∞ –Ω–∞—á–∏–Ω–∞–π—Ç–µ —Å dry=1\n"
        "‚Ä¢ –ë–æ–ª—å—à–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –º–æ–≥—É—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç\n"
        "‚Ä¢ –í—Å–µ –¥–µ–π—Å—Ç–≤–∏—è –ª–æ–≥–∏—Ä—É—é—Ç—Å—è –¥–ª—è –∞—É–¥–∏—Ç–∞\n\n"
        "<i>–î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –±–æ—Ç–∞</i>"
    )

    await message.answer(help_text)
    user_id = message.from_user.id if message.from_user else "unknown"
    logger.info(f"Admin {user_id} requested admin help")


@router.message(F.text == "/admin_config")
async def admin_config_handler(message: Message) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –ø—Ä–∞–≤ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏."""
    if not _is_admin(message):
        await message.answer("‚ùå –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
        return

    try:
        from app.settings import get_admin_config_info

        config = get_admin_config_info()
        current_user = message.from_user.id if message.from_user else None

        config_text = (
            f"üîß <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –ø—Ä–∞–≤</b>\n\n"
            f"üë§ <b>–í–∞—à ID:</b> <code>{current_user}</code>\n"
            f"üë• <b>–ê–¥–º–∏–Ω—ã:</b> {config['admin_ids']}\n"
            f"üìä <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:</b> {config['count']}\n"
            f"üìç <b>–ò—Å—Ç–æ—á–Ω–∏–∫:</b> <code>{config['source']}</code>\n"
            f"üìÅ <b>.env —Ñ–∞–π–ª:</b> {'‚úÖ –°—É—â–µ—Å—Ç–≤—É–µ—Ç' if config['env_file_exists'] else '‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}\n\n"
            f"üí° <b>–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞:</b>\n"
            f"<code>{config['recommended_setup']}</code>\n\n"
            f"üìã <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:</b>\n"
            f"1. –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª <code>.env</code> –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞\n"
            f"2. –î–æ–±–∞–≤—å—Ç–µ —Å—Ç—Ä–æ–∫—É: <code>APP_ADMIN_USER_IDS={current_user}</code>\n"
            f"3. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞\n\n"
            f"üîç <b>–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ID –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b>\n"
            f"–ü–æ–ø—Ä–æ—Å–∏—Ç–µ –µ–≥–æ –Ω–∞–ø–∏—Å–∞—Ç—å –±–æ—Ç—É /start –∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏"
        )

        await message.answer(config_text)
        user_id = message.from_user.id if message.from_user else "unknown"
        logger.info(f"Admin {user_id} requested admin config info")

    except Exception as e:
        logger.error(f"Failed to get admin config: {e}")
        await message.answer(f"‚ùå <b>–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫</b>\n\n<code>{str(e)}</code>")


@router.message(F.text == "/clients_stats")
async def clients_stats_handler(message: Message) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è HTTP –∫–ª–∏–µ–Ω—Ç–æ–≤."""
    if not _is_admin(message):
        await message.answer("‚ùå –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
        return

    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∏–µ–Ω—Ç–∞—Ö
        clients_info = get_clients_info()

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–∞ HTTP –∫–ª–∏–µ–Ω—Ç–æ–≤
        http_cache = clients_info["cache_info"]["notion_http_client"]

        stats_text = "‚ö° <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤</b>\n\n" "üìä <b>HTTP –∫–ª–∏–µ–Ω—Ç—ã:</b>\n"

        if isinstance(http_cache, dict):
            stats_text += (
                f"   üéØ Hit ratio: {http_cache.get('hit_ratio', 0):.1%}\n"
                f"   ‚úÖ Hits: {http_cache.get('hits', 0)}\n"
                f"   ‚ùå Misses: {http_cache.get('misses', 0)}\n"
                f"   üì¶ –†–∞–∑–º–µ—Ä: {http_cache.get('size', 0)}/{http_cache.get('maxsize', 0)}\n"
                f"   ‚è∞ TTL: {http_cache.get('ttl_seconds', 0)}s\n\n"
            )

            # –î–µ—Ç–∞–ª–∏ –∑–∞–ø–∏—Å–µ–π –≤ –∫—ç—à–µ
            entries = http_cache.get("entries", [])
            if entries:
                stats_text += f"üìã <b>–ó–∞–ø–∏—Å–∏ –≤ –∫—ç—à–µ ({len(entries)}):</b>\n"
                for entry in entries[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
                    stats_text += (
                        f"   ‚Ä¢ {entry['key']}: –≤–æ–∑—Ä–∞—Å—Ç {entry['age_seconds']:.1f}s, "
                        f"–¥–æ—Å—Ç—É–ø–æ–≤ {entry['access_count']}, "
                        f"–∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ {entry['expires_in']:.1f}s\n"
                    )
                if len(entries) > 3:
                    stats_text += f"   ... –∏ –µ—â–µ {len(entries) - 3}\n"
        else:
            stats_text += f"   ‚ÑπÔ∏è {http_cache}\n"

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ Notion SDK –∫–ª–∏–µ–Ω—Ç–∞—Ö (–æ–Ω–∏ –∫—ç—à–∏—Ä—É—é—Ç—Å—è –±–µ–∑–æ–ø–∞—Å–Ω–æ)
        notion_cache = clients_info["cache_info"]["notion_client"]
        if isinstance(notion_cache, dict):
            stats_text += (
                f"\nüèóÔ∏è <b>Notion SDK –∫–ª–∏–µ–Ω—Ç—ã:</b>\n"
                f"   üéØ Hit ratio: {notion_cache.get('hit_ratio', 0):.1%}\n"
                f"   ‚úÖ Hits: {notion_cache.get('hits', 0)}\n"
                f"   ‚ùå Misses: {notion_cache.get('misses', 0)}\n"
                f"   üì¶ –†–∞–∑–º–µ—Ä: {notion_cache.get('currsize', 0)}/{notion_cache.get('maxsize', 0)}\n"
            )

        await message.answer(stats_text, parse_mode="HTML")

        user_id = message.from_user.id if message.from_user else "unknown"
        logger.info(f"Admin {user_id} requested clients stats")

    except Exception as e:
        logger.error(f"Error in clients_stats_handler: {e}")
        await message.answer(
            f"‚ùå <b>–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤</b>\n\n<code>{str(e)}</code>"
        )


@router.message(F.text == "/clients_cleanup")
async def clients_cleanup_handler(message: Message) -> None:
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤."""
    if not _is_admin(message):
        await message.answer("‚ùå –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
        return

    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–æ –æ—á–∏—Å—Ç–∫–∏
        clients_info_before = get_clients_info()
        http_cache_before = clients_info_before["cache_info"]["notion_http_client"]

        before_size = 0
        if isinstance(http_cache_before, dict):
            before_size = http_cache_before.get("size", 0)

        # –í—ã–ø–æ–ª–Ω—è–µ–º –æ—á–∏—Å—Ç–∫—É
        clear_clients_cache()

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏
        clients_info_after = get_clients_info()
        http_cache_after = clients_info_after["cache_info"]["notion_http_client"]

        after_size = 0
        if isinstance(http_cache_after, dict):
            after_size = http_cache_after.get("size", 0)

        cleanup_text = (
            "üßπ <b>–û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞</b>\n\n"
            "üìä <b>–†–µ–∑—É–ª—å—Ç–∞—Ç:</b>\n"
            "   üíæ Notion SDK –∫—ç—à –æ—á–∏—â–µ–Ω\n"
            "   üîÑ HTTP –∫–ª–∏–µ–Ω—Ç—ã: —Å–æ–∑–¥–∞—é—Ç—Å—è –Ω–æ–≤—ã–µ (–Ω–µ –∫—ç—à–∏—Ä—É—é—Ç—Å—è)\n"
            "   üåê Connection pooling: TCP —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è\n\n"
            "‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ\n"
        )

        await message.answer(cleanup_text, parse_mode="HTML")

        user_id = message.from_user.id if message.from_user else "unknown"
        logger.info(f"Admin {user_id} performed clients cleanup: {before_size} ‚Üí {after_size}")

    except Exception as e:
        logger.error(f"Error in clients_cleanup_handler: {e}")
        await message.answer(f"‚ùå <b>–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤</b>\n\n<code>{str(e)}</code>")


@router.message(F.text.regexp(r"^/review_tags\s+([0-9a-f\-]{10,})$"))
async def review_tags_handler(message: Message, state: FSMContext) -> None:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ —Ä–µ–≤—å—é —Ç–µ–≥–æ–≤ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –≤—Å—Ç—Ä–µ—á–∏."""
    if not _is_admin(message):
        await message.answer("‚ùå –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
        return

    try:
        if not message.text:
            await message.answer("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã")
            return

        # –ü–∞—Ä—Å–∏–º ID –≤—Å—Ç—Ä–µ—á–∏
        match = re.match(r"^/review_tags\s+([0-9a-f\-]{10,})$", message.text)
        if not match:
            await message.answer("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –≤—Å—Ç—Ä–µ—á–∏")
            return

        meeting_id = match.group(1).strip()

        await message.answer(
            f"üîç <b>–ó–∞–≥—Ä—É–∂–∞—é —Ç–µ–≥–∏ –≤—Å—Ç—Ä–µ—á–∏...</b>\n\n‚è≥ ID: <code>{meeting_id}</code>"
        )

        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏
        from app.bot.handlers_tags_review import start_tags_review
        from app.gateways.notion_meetings import fetch_meeting_page, validate_meeting_access

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        if not validate_meeting_access(meeting_id):
            await message.answer(f"‚ùå –°—Ç—Ä–∞–Ω–∏—Ü–∞ –≤—Å—Ç—Ä–µ—á–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: {meeting_id}")
            return

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        page_data = fetch_meeting_page(meeting_id)
        current_tags = page_data.get("current_tags", [])

        if not current_tags:
            await message.answer("‚ùå –£ –≤—Å—Ç—Ä–µ—á–∏ –Ω–µ—Ç —Ç–µ–≥–æ–≤ –¥–ª—è —Ä–µ–≤—å—é")
            return

        # –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ —Ä–µ–≤—å—é
        user_id = message.from_user.id if message.from_user else 0
        await start_tags_review(
            meeting_id=meeting_id,
            original_tags=current_tags,
            user_id=user_id,
            message=message,
            state=state,
        )

        logger.info(f"Admin {user_id} started manual tags review for meeting {meeting_id}")

    except Exception as e:
        logger.error(f"Error in review_tags_handler: {e}")
        await message.answer(f"‚ùå <b>–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ä–µ–≤—å—é —Ç–µ–≥–æ–≤</b>\n\n<code>{str(e)}</code>")


@router.message(F.text.regexp(r"^/sync_tags(\s+dry-run)?$"))
async def sync_tags_handler(message: Message) -> None:
    """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç –ø—Ä–∞–≤–∏–ª–∞ —Ç–µ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑ Notion Tag Catalog."""
    if not _is_admin(message):
        await message.answer("‚ùå –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
        return

    try:
        if not message.text:
            await message.answer("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∂–∏–º dry-run
        is_dry_run = "dry-run" in message.text

        await message.answer(
            f"üîÑ <b>–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–∞–≤–∏–ª —Ç–µ–≥–∏—Ä–æ–≤–∞–Ω–∏—è{'(dry-run)' if is_dry_run else ''}</b>\n\n"
            "‚è≥ –ü–æ–¥–∫–ª—é—á–∞—é—Å—å –∫ Notion Tag Catalog..."
        )

        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        from app.core.tags_notion_sync import smart_sync

        # –í—ã–ø–æ–ª–Ω—è–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
        result = smart_sync(dry_run=is_dry_run)

        if result.success:
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
            breakdown_text = (
                ", ".join(
                    f"{kind}={count}" for kind, count in sorted(result.kind_breakdown.items())
                )
                if result.kind_breakdown
                else "–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
            )

            success_message = (
                f"‚úÖ <b>–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è {'–ø—Ä–æ–≤–µ—Ä–µ–Ω–∞' if is_dry_run else '–∑–∞–≤–µ—Ä—à–µ–Ω–∞'}</b>\n\n"
                f"üìä <b>–ò—Å—Ç–æ—á–Ω–∏–∫:</b> {result.source}\n"
                f"üè∑Ô∏è <b>–ü—Ä–∞–≤–∏–ª –∑–∞–≥—Ä—É–∂–µ–Ω–æ:</b> {result.rules_count}\n"
                f"üìã <b>–ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:</b> {breakdown_text}\n"
            )

            if result.cache_updated:
                success_message += "üíæ <b>–ö—ç—à –æ–±–Ω–æ–≤–ª–µ–Ω</b>\n"

            if is_dry_run:
                success_message += "\nüí° –î–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–µ–∑ dry-run"
            else:
                success_message += "\nüéØ –ü—Ä–∞–≤–∏–ª–∞ –∞–∫—Ç–∏–≤–Ω—ã –≤ —Ç—ç–≥–≥–µ—Ä–µ"

            await message.answer(success_message)
        else:
            # –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            error_message = (
                f"‚ùå <b>–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏</b>\n\n"
                f"üìä <b>–ò—Å—Ç–æ—á–Ω–∏–∫:</b> {result.source}\n"
                f"‚ùå <b>–û—à–∏–±–∫–∞:</b> <code>{result.error}</code>\n\n"
                f"üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Notion –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ YAML fallback"
            )

            await message.answer(error_message)

        user_id = message.from_user.id if message.from_user else "unknown"
        logger.info(
            f"Admin {user_id} executed sync_tags (dry_run={is_dry_run}): "
            f"success={result.success}, source={result.source}, count={result.rules_count}"
        )

    except Exception as e:
        logger.error(f"Error in sync_tags_handler: {e}")
        await message.answer(f"‚ùå <b>–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏</b>\n\n<code>{str(e)}</code>")


@router.message(F.text == "/sync_status")
async def sync_status_handler(message: Message) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø—Ä–∞–≤–∏–ª —Ç–µ–≥–∏—Ä–æ–≤–∞–Ω–∏—è."""
    if not _is_admin(message):
        await message.answer("‚ùå –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
        return

    try:
        from app.core.tags_notion_sync import get_sync_status
        from app.gateways.notion_tag_catalog import get_tag_catalog_info

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        sync_status = get_sync_status()
        catalog_info = get_tag_catalog_info()

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        status_text = (
            f"üìä <b>–°—Ç–∞—Ç—É—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ Tag Catalog</b>\n\n"
            f"üïê <b>–ü–æ—Å–ª–µ–¥–Ω—è—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è:</b> {sync_status.get('last_sync', '–Ω–∏–∫–æ–≥–¥–∞')}\n"
            f"‚è±Ô∏è <b>–ü—Ä–æ—à–ª–æ –≤—Ä–µ–º–µ–Ω–∏:</b> {sync_status.get('hours_since_sync', 0):.1f} —á–∞—Å–æ–≤\n"
            f"üìç <b>–ò—Å—Ç–æ—á–Ω–∏–∫:</b> {sync_status.get('source', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
            f"‚úÖ <b>–°—Ç–∞—Ç—É—Å:</b> {sync_status.get('status', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
            f"üè∑Ô∏è <b>–ü—Ä–∞–≤–∏–ª –∑–∞–≥—Ä—É–∂–µ–Ω–æ:</b> {sync_status.get('rules_count', 0)}\n"
        )

        # –î–æ–±–∞–≤–ª—è–µ–º breakdown –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        breakdown = sync_status.get("kind_breakdown", {})
        if breakdown:
            breakdown_text = ", ".join(f"{k}={v}" for k, v in sorted(breakdown.items()))
            status_text += f"üìã <b>–ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:</b> {breakdown_text}\n"

        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å Notion
        status_text += "\nüîó <b>Notion Tag Catalog:</b>\n"
        if catalog_info.get("accessible"):
            status_text += (
                f"   ‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω\n"
                f"   üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {catalog_info.get('title', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
                f"   üîß –ü–æ–ª—è: {len(catalog_info.get('properties', []))}\n"
            )
        else:
            status_text += f"   ‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {catalog_info.get('error', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}\n"

        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∫—ç—à–∞
        status_text += f"\nüíæ <b>–õ–æ–∫–∞–ª—å–Ω—ã–π –∫—ç—à:</b> {'‚úÖ –¥–æ—Å—Ç—É–ø–µ–Ω' if sync_status.get('cache_available') else '‚ùå –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}\n"

        # –î–æ–±–∞–≤–ª—è–µ–º –æ—à–∏–±–∫—É –µ—Å–ª–∏ –µ—Å—Ç—å
        if sync_status.get("error"):
            status_text += f"\n‚ùå <b>–ü–æ—Å–ª–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞:</b>\n<code>{sync_status['error']}</code>"

        await message.answer(status_text)

        user_id = message.from_user.id if message.from_user else "unknown"
        logger.info(f"Admin {user_id} requested sync status")

    except Exception as e:
        logger.error(f"Error in sync_status_handler: {e}")
        await message.answer(f"‚ùå <b>–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞</b>\n\n<code>{str(e)}</code>")


@router.message(F.text.regexp(r"^/adaptive_demo(\s+(mobile|tablet|desktop))?$"))
async def adaptive_demo_handler(message: Message) -> None:
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤."""
    if not _is_admin(message):
        await message.answer("‚ùå –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
        return

    try:
        # –ü–∞—Ä—Å–∏–º device_type –∏–∑ –∫–æ–º–∞–Ω–¥—ã
        parts = (message.text or "").strip().split()
        device_type = parts[1] if len(parts) > 1 else None

        from app.bot.formatters import (
            DEVICE_LIMITS,
            format_adaptive_demo,
            format_commit_card,
            format_meeting_card,
        )

        # –ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö
        sample_meeting = {
            "title": "–§–∏–Ω–∞–Ω—Å–æ–≤–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –±—é–¥–∂–µ—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ Q4 2025 —Å –æ–±—Å—É–∂–¥–µ–Ω–∏–µ–º IFRS —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤",
            "date": "2025-09-23",
            "attendees": [
                "Valya Dobrynin",
                "Nodari Kezua",
                "Sergey Lompa",
                "Vlad Sklyanov",
                "Serezha Ustinenko",
                "Ivan Petrov",
            ],
            "tags": [
                "Finance/IFRS",
                "Finance/Budget",
                "Business/Market",
                "Topic/Planning",
                "People/Valya Dobrynin",
            ],
            "url": "https://notion.so/sample-meeting-12345",
        }

        sample_commit = {
            "text": "–ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º –∏ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—è–º –∑–∞ Q3 —Å –∞–Ω–∞–ª–∏–∑–æ–º –∫–æ–Ω–≤–µ—Ä—Å–∏–∏",
            "status": "open",
            "direction": "theirs",
            "assignees": ["Daniil Petrov", "Maria Sidorova"],
            "due_iso": "2025-10-15",
            "confidence": 0.85,
            "short_id": "abc123def456ghi789",
        }

        if device_type:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
            limits = DEVICE_LIMITS.get(device_type, DEVICE_LIMITS["tablet"])

            await message.answer(
                f"üì± <b>–ê–¥–∞–ø—Ç–∏–≤–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è {device_type.title()}</b>\n\n"
                f"üéØ <b>–õ–∏–º–∏—Ç—ã:</b> title={limits.title}, desc={limits.description}, "
                f"attendees={limits.attendees}, tags={limits.tags}, id={limits.id_length}",
                parse_mode="HTML",
            )

            # –í—Å—Ç—Ä–µ—á–∞
            meeting_formatted = format_meeting_card(sample_meeting, device_type=device_type)
            await message.answer(f"üìÖ <b>–í—Å—Ç—Ä–µ—á–∞:</b>\n\n{meeting_formatted}", parse_mode="HTML")

            # –ö–æ–º–º–∏—Ç
            commit_formatted = format_commit_card(sample_commit, device_type=device_type)
            await message.answer(f"üìù <b>–ö–æ–º–º–∏—Ç:</b>\n\n{commit_formatted}", parse_mode="HTML")
        else:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
            await message.answer(
                "üé® <b>–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è</b>\n\n"
                "üì± –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤:",
                parse_mode="HTML",
            )

            # –í—Å—Ç—Ä–µ—á–∏ –¥–ª—è –≤—Å–µ—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
            demo_results = format_adaptive_demo(sample_meeting)
            for _device, formatted in demo_results.items():
                await message.answer(formatted, parse_mode="HTML")

            # –õ–∏–º–∏—Ç—ã
            limits_text = "üéØ <b>–ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –ª–∏–º–∏—Ç—ã:</b>\n\n"
            for device, limits in DEVICE_LIMITS.items():
                limits_text += (
                    f"üì± <b>{device.title()}:</b> "
                    f"title={limits.title}, desc={limits.description}, "
                    f"attendees={limits.attendees}, tags={limits.tags}\n"
                )

            await message.answer(limits_text, parse_mode="HTML")

        user_id = message.from_user.id if message.from_user else "unknown"
        logger.info(f"Admin {user_id} used adaptive demo with device_type={device_type}")

    except Exception as e:
        logger.error(f"Error in adaptive_demo_handler: {e}")
        await message.answer(
            f"‚ùå <b>–û—à–∏–±–∫–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏</b>\n\n<code>{str(e)}</code>", parse_mode="HTML"
        )


@router.message(F.text == "/people_activity")
async def people_activity_handler(message: Message) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ª—é–¥–µ–π –≤ –∫–æ–º–º–∏—Ç–∞—Ö."""
    if not _is_admin(message):
        await message.answer("‚ùå –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
        return

    try:
        from app.core.people_activity import (
            get_cache_info,
            get_people_activity_stats,
            get_top_people_by_activity,
        )

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        people_stats = get_people_activity_stats()
        top_people = get_top_people_by_activity(min_count=1, max_count=20, min_score=0)
        cache_info = get_cache_info()

        activity_text = (
            f"üìà <b>–†–µ–π—Ç–∏–Ω–≥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ª—é–¥–µ–π</b>\n\n"
            f"üìä <b>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
            f"   üë• –í—Å–µ–≥–æ –ª—é–¥–µ–π: {len(people_stats)}\n"
            f"   üèÜ –í —Ç–æ–ø–µ: {len(top_people)}\n"
            f"   üíæ –ö—ç—à: {cache_info.get('hits', 0)} hits, {cache_info.get('misses', 0)} misses\n\n"
        )

        if top_people:
            activity_text += "üèÜ <b>–¢–æ–ø-10 –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:</b>\n"
            for i, person in enumerate(top_people[:10], 1):
                stats = people_stats.get(person, {"assignee": 0, "from_person": 0})
                assignee_count = stats["assignee"]
                from_person_count = stats["from_person"]
                total = assignee_count + from_person_count

                activity_text += (
                    f"   {i:2}. <b>{person}</b>: {total} "
                    f"(üë§{assignee_count} + üìù{from_person_count})\n"
                )
        else:
            activity_text += "‚ÑπÔ∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ–± –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ª—é–¥–µ–π"

        await message.answer(activity_text, parse_mode="HTML")

        user_id = message.from_user.id if message.from_user else "unknown"
        logger.info(f"Admin {user_id} requested people activity stats")

    except Exception as e:
        logger.error(f"Error in people_activity_handler: {e}")
        await message.answer(
            f"‚ùå <b>–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏</b>\n\n<code>{str(e)}</code>",
            parse_mode="HTML",
        )


@router.message(F.text == "/agenda_stats")
async def agenda_stats_handler(message: Message) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è agenda —Å–∏—Å—Ç–µ–º—ã."""
    if not _is_admin(message):
        await message.answer("‚ùå –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
        return

    try:
        from app.core.metrics import snapshot
        from app.core.people_activity import (
            get_other_people,
            get_people_activity_stats,
            get_top_people_by_activity,
        )

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        people_stats = get_people_activity_stats()
        top_people = get_top_people_by_activity()
        other_people = get_other_people(exclude_top=top_people)

        # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è agenda
        metrics = snapshot()
        agenda_metrics = {k: v for k, v in metrics.counters.items() if "agenda" in k.lower()}

        stats_text = (
            f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ Agenda —Å–∏—Å—Ç–µ–º—ã</b>\n\n"
            f"üë• <b>–õ—é–¥–∏ –≤ —Å–∏—Å—Ç–µ–º–µ:</b>\n"
            f"   üèÜ –¢–æ–ø –ª—é–¥–µ–π: {len(top_people)}\n"
            f"   üë• Other people: {len(other_people)}\n"
            f"   üìä –í—Å–µ–≥–æ —Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é: {len(people_stats)}\n\n"
        )

        if top_people:
            stats_text += f"üèÜ <b>–¢–µ–∫—É—â–∏–π —Ç–æ–ø-{len(top_people)}:</b>\n"
            for i, person in enumerate(top_people, 1):
                stats_text += f"   {i}. {person}\n"
            stats_text += "\n"

        if agenda_metrics:
            stats_text += "üìà <b>–ú–µ—Ç—Ä–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:</b>\n"
            for metric, count in sorted(agenda_metrics.items()):
                stats_text += f"   ‚Ä¢ {metric}: {count}\n"
        else:
            stats_text += "‚ÑπÔ∏è –ù–µ—Ç –º–µ—Ç—Ä–∏–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è agenda\n"

        await message.answer(stats_text, parse_mode="HTML")

        user_id = message.from_user.id if message.from_user else "unknown"
        logger.info(f"Admin {user_id} requested agenda stats")

    except Exception as e:
        logger.error(f"Error in agenda_stats_handler: {e}")
        await message.answer(
            f"‚ùå <b>–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ agenda</b>\n\n<code>{str(e)}</code>",
            parse_mode="HTML",
        )


# ====== RETAGGING PIPELINE COMMANDS ======


@router.message(F.text.regexp(r"^/retag_all\b"))
async def retag_all_handler(message: Message) -> None:
    """
    –ú–∞—Å—Å–æ–≤–æ–µ –ø–µ—Ä–µ—Ç–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å—Ç—Ä–µ—á –∏–ª–∏ –∫–æ–º–º–∏—Ç–æ–≤.

    –°–∏–Ω—Ç–∞–∫—Å–∏—Å: /retag_all [meetings|commits] [since=YYYY-MM-DD] [limit=N] [mode=v0|v1|both] [dry=0|1]

    –ü—Ä–∏–º–µ—Ä—ã:
    /retag_all meetings dry=1
    /retag_all commits since=2024-12-01 limit=100 mode=both dry=0
    """
    if not _is_admin(message):
        await message.answer("‚ùå –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
        return

    try:
        # –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
        text = message.text or ""
        args = text.split()[1:]  # –£–±–∏—Ä–∞–µ–º /retag_all

        # –ó–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        db = "meetings"
        since_iso = None
        limit = None
        mode = "both"
        dry_run = True

        # –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã
        for arg in args:
            if arg in ("meetings", "commits"):
                db = arg
            elif arg.startswith("since="):
                since_iso = arg.split("=", 1)[1]
            elif arg.startswith("limit="):
                try:
                    limit = int(arg.split("=", 1)[1])
                except ValueError:
                    await message.answer(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ª–∏–º–∏—Ç–∞: {arg}")
                    return
            elif arg.startswith("mode="):
                mode = arg.split("=", 1)[1]
            elif arg.startswith("dry="):
                dry_value = arg.split("=", 1)[1]
                dry_run = dry_value != "0"

        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        from app.core.retag_service import estimate_retag_time, validate_retag_params

        is_valid, error_msg = validate_retag_params(db, since_iso, limit, mode)
        if not is_valid:
            await message.answer(f"‚ùå {error_msg}")
            return

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ü–µ–Ω–∫—É –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –±–æ–ª—å—à–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
        if not dry_run and (limit is None or limit > 100):
            estimate = estimate_retag_time(db, since_iso, limit)
            await message.answer(
                f"‚ö†Ô∏è <b>–ú–∞—Å—Å–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ {db}</b>\n\n"
                f"üìä –ü—Ä–∏–º–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞:\n"
                f"‚Ä¢ –ó–∞–ø–∏—Å–µ–π: ~{estimate['estimated_items']}\n"
                f"‚Ä¢ –í—Ä–µ–º—è: ~{estimate['estimated_time_minutes']} –º–∏–Ω\n\n"
                f"üîÑ –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É..."
            )

        # –í—ã–ø–æ–ª–Ω—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é
        # –ü—Ä–∏–≤–æ–¥–∏–º —Ç–∏–ø—ã –¥–ª—è mypy
        from typing import Literal, cast

        from app.core.retag_service import retag

        db_typed = cast(
            Literal["meetings", "commits"], db if db in ("meetings", "commits") else "meetings"
        )
        mode_typed = cast(
            Literal["v0", "v1", "both"], mode if mode in ("v0", "v1", "both") else "both"
        )

        stats = retag(
            db=db_typed, since_iso=since_iso, limit=limit, mode=mode_typed, dry_run=dry_run
        )

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        dry_prefix = "üß™ [DRY-RUN] " if dry_run else "‚úÖ "

        result_message = (
            f"{dry_prefix}<b>Retag {db} –∑–∞–≤–µ—Ä—à–µ–Ω</b>\n\n"
            f"üìä <b>–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ:</b>\n"
            f"‚Ä¢ –ü—Ä–æ—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ: {stats.scanned}\n"
            f"‚Ä¢ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {stats.updated}\n"
            f"‚Ä¢ –ü—Ä–æ–ø—É—â–µ–Ω–æ: {stats.skipped}\n"
            f"‚Ä¢ –û—à–∏–±–æ–∫: {stats.errors}\n\n"
            f"‚è±Ô∏è <b>–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</b>\n"
            f"‚Ä¢ –û–±—â–µ–µ –≤—Ä–µ–º—è: {stats.latency_s:.1f}—Å\n"
            f"‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –Ω–∞ –∑–∞–ø–∏—Å—å: {stats.avg_processing_time_ms:.1f}–º—Å\n\n"
            f"üè∑Ô∏è <b>–¢–µ–≥–∏:</b>\n"
            f"‚Ä¢ –î–æ: {stats.total_tags_before}\n"
            f"‚Ä¢ –ü–æ—Å–ª–µ: {stats.total_tags_after}\n"
        )

        # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª–∏ –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
        if stats.dedup_metrics_total:
            result_message += "\nüîÑ <b>–î–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è:</b>\n"
            for key, value in stats.dedup_metrics_total.items():
                if isinstance(value, int | float) and value > 0:
                    result_message += f"‚Ä¢ {key}: {value}\n"

        await message.answer(result_message, parse_mode="HTML")

        # –õ–æ–≥–∏—Ä—É–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é
        user_id = message.from_user.id if message.from_user else "unknown"
        logger.info(
            f"Admin {user_id} executed retag_all: db={db}, since={since_iso}, "
            f"limit={limit}, mode={mode}, dry_run={dry_run}, "
            f"stats={stats.as_dict()}"
        )

    except Exception as e:
        logger.error(f"Error in retag_all_handler: {e}")
        await message.answer(
            f"‚ùå <b>–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è retag_all</b>\n\n<code>{str(e)}</code>", parse_mode="HTML"
        )


@router.message(F.text == "/retag_help")
async def retag_help_handler(message: Message) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø—Ä–∞–≤–∫—É –ø–æ –∫–æ–º–∞–Ω–¥–∞–º –ø–µ—Ä–µ—Ç–µ–≥–∏—Ä–æ–≤–∞–Ω–∏—è."""
    if not _is_admin(message):
        await message.answer("‚ùå –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
        return

    help_text = (
        "üîÑ <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º –ø–µ—Ä–µ—Ç–µ–≥–∏—Ä–æ–≤–∞–Ω–∏—è</b>\n\n"
        "üìã <b>–û—Å–Ω–æ–≤–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞:</b>\n"
        "<code>/retag_all [–ø–∞—Ä–∞–º–µ—Ç—Ä—ã]</code>\n\n"
        "üéõÔ∏è <b>–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:</b>\n"
        "‚Ä¢ <code>meetings</code> –∏–ª–∏ <code>commits</code> - —Ç–∏–ø –±–∞–∑—ã\n"
        "‚Ä¢ <code>since=YYYY-MM-DD</code> - —Ñ–∏–ª—å—Ç—Ä –ø–æ –¥–∞—Ç–µ\n"
        "‚Ä¢ <code>limit=N</code> - –º–∞–∫—Å–∏–º—É–º –∑–∞–ø–∏—Å–µ–π (1-10000)\n"
        "‚Ä¢ <code>mode=v0|v1|both</code> - —Ä–µ–∂–∏–º —Ç–µ–≥–∏—Ä–æ–≤–∞–Ω–∏—è\n"
        "‚Ä¢ <code>dry=0|1</code> - —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º (1=–¥–∞, 0=–Ω–µ—Ç)\n\n"
        "üí° <b>–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:</b>\n"
        "<code>/retag_all meetings dry=1</code>\n"
        "‚îî –¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–≥–æ–Ω –≤—Å–µ—Ö –≤—Å—Ç—Ä–µ—á\n\n"
        "<code>/retag_all commits since=2024-12-01 limit=100</code>\n"
        "‚îî –ö–æ–º–º–∏—Ç—ã —Å 1 –¥–µ–∫–∞–±—Ä—è, –º–∞–∫—Å–∏–º—É–º 100, —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º\n\n"
        "<code>/retag_all meetings mode=both dry=0</code>\n"
        "‚îî –†–µ–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –≤—Å—Ç—Ä–µ—á –¥–≤–æ–π–Ω—ã–º —Ç–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º\n\n"
        "‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ:</b>\n"
        "‚Ä¢ –í—Å–µ–≥–¥–∞ –Ω–∞—á–∏–Ω–∞–π—Ç–µ —Å <code>dry=1</code> –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏\n"
        "‚Ä¢ –ë–æ–ª—å—à–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –º–æ–≥—É—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç\n"
        "‚Ä¢ –û–ø–µ—Ä–∞—Ü–∏—è –Ω–µ–æ–±—Ä–∞—Ç–∏–º–∞ (–∫—Ä–æ–º–µ dry-run —Ä–µ–∂–∏–º–∞)\n\n"
        "üîç <b>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
        "<code>/retag_help</code> - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n"
        "<code>/tags_stats</code> - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–µ–≥–∏—Ä–æ–≤–∞–Ω–∏—è\n"
        "<code>/tags_validate</code> - –≤–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–∞–≤–∏–ª\n"
    )

    await message.answer(help_text, parse_mode="HTML")
