"""–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞.

–í–∫–ª—é—á–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–æ–π —Ç–µ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏.
"""

from __future__ import annotations

import logging

from aiogram import F, Router
from aiogram.types import Message

from app.core.tags import clear_cache, get_tagging_stats, reload_tags_rules

logger = logging.getLogger(__name__)

router = Router()


@router.message(F.text == "/reload_tags")
async def reload_tags_handler(message: Message) -> None:
    """–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ—Ç –ø—Ä–∞–≤–∏–ª–∞ —Ç–µ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑ YAML —Ñ–∞–π–ª–∞."""
    try:
        rules_count = reload_tags_rules()
        await message.answer(
            f"‚ôªÔ∏è <b>Tag rules reloaded</b>\n\n"
            f"üìä <b>{rules_count}</b> –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∑–∞–≥—Ä—É–∂–µ–Ω–æ\n"
            f"üîÑ LRU –∫—ç—à –æ—á–∏—â–µ–Ω"
        )
        user_id = message.from_user.id if message.from_user else "unknown"
        logger.info(f"Admin {user_id} reloaded tag rules: {rules_count} categories")

    except Exception as e:
        logger.error(f"Failed to reload tag rules: {e}")
        await message.answer("‚ùå <b>–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∞–≤–∏–ª</b>\n\n" f"<code>{str(e)}</code>")


@router.message(F.text == "/tags_stats")
async def tags_stats_handler(message: Message) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∏—Å—Ç–µ–º—ã —Ç–µ–≥–∏—Ä–æ–≤–∞–Ω–∏—è."""
    try:
        stats = get_tagging_stats()

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        stats_text = (
            f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã —Ç–µ–≥–∏—Ä–æ–≤–∞–Ω–∏—è</b>\n\n"
            f"üéØ <b>–†–µ–∂–∏–º:</b> {stats['current_mode']}\n"
            f"üìà <b>–í—ã–∑–æ–≤—ã –ø–æ —Ä–µ–∂–∏–º–∞–º:</b>\n"
        )

        for mode, count in stats["stats"]["calls_by_mode"].items():
            stats_text += f"   ‚Ä¢ {mode}: {count}\n"

        stats_text += "\nüìã <b>–í—ã–∑–æ–≤—ã –ø–æ —Ç–∏–ø–∞–º:</b>\n"
        for kind, count in stats["stats"]["calls_by_kind"].items():
            stats_text += f"   ‚Ä¢ {kind}: {count}\n"

        cache_info = stats["cache_info"]
        stats_text += (
            f"\nüíæ <b>–ö—ç—à:</b> {cache_info['hits']} hits, "
            f"{cache_info['misses']} misses\n"
            f"üì¶ <b>–†–∞–∑–º–µ—Ä:</b> {cache_info['currsize']}/{cache_info['maxsize']}\n"
            f"üîÑ <b>–ü—Ä–∞–≤–∏–ª–∞ –º–∞–ø–ø–∏–Ω–≥–∞:</b> {stats['mapping_rules']}"
        )

        if "v1_stats" in stats and "error" not in stats["v1_stats"]:
            v1_stats = stats["v1_stats"]
            stats_text += (
                f"\n\nüè∑Ô∏è <b>Tagger v1:</b>\n"
                f"   ‚Ä¢ –¢–µ–≥–æ–≤: {v1_stats.get('total_tags', 0)}\n"
                f"   ‚Ä¢ –ü–∞—Ç—Ç–µ—Ä–Ω–æ–≤: {v1_stats.get('total_patterns', 0)}\n"
                f"   ‚Ä¢ –ö–∞—Ç–µ–≥–æ—Ä–∏–π: {len(v1_stats.get('categories', {}))}"
            )

        await message.answer(stats_text)
        user_id = message.from_user.id if message.from_user else "unknown"
        logger.info(f"Admin {user_id} requested tags stats")

    except Exception as e:
        logger.error(f"Failed to get tags stats: {e}")
        await message.answer("‚ùå <b>–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏</b>\n\n" f"<code>{str(e)}</code>")


@router.message(F.text == "/clear_cache")
async def clear_cache_handler(message: Message) -> None:
    """–û—á–∏—â–∞–µ—Ç –∫—ç—à —Å–∏—Å—Ç–µ–º—ã —Ç–µ–≥–∏—Ä–æ–≤–∞–Ω–∏—è."""
    try:
        clear_cache()
        await message.answer(
            "üßπ <b>–ö—ç—à –æ—á–∏—â–µ–Ω</b>\n\n"
            "LRU –∫—ç—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å–±—Ä–æ—à–µ–Ω.\n"
            "–°–ª–µ–¥—É—é—â–∏–µ –∑–∞–ø—Ä–æ—Å—ã –±—É–¥—É—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è –∑–∞–Ω–æ–≤–æ."
        )
        user_id = message.from_user.id if message.from_user else "unknown"
        logger.info(f"Admin {user_id} cleared tagging cache")

    except Exception as e:
        logger.error(f"Failed to clear cache: {e}")
        await message.answer("‚ùå <b>–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞</b>\n\n" f"<code>{str(e)}</code>")


@router.message(F.text == "/admin_help")
async def admin_help_handler(message: Message) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö –∫–æ–º–∞–Ω–¥."""
    help_text = (
        "üîß <b>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã</b>\n\n"
        "üè∑Ô∏è <b>–°–∏—Å—Ç–µ–º–∞ —Ç–µ–≥–∏—Ä–æ–≤–∞–Ω–∏—è:</b>\n"
        "‚ôªÔ∏è <code>/reload_tags</code> - –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–∞–≤–∏–ª–∞ —Ç–µ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑ YAML\n"
        "üìä <code>/tags_stats</code> - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã —Ç–µ–≥–∏—Ä–æ–≤–∞–Ω–∏—è\n"
        "üßπ <code>/clear_cache</code> - –û—á–∏—Å—Ç–∏—Ç—å LRU –∫—ç—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤\n\n"
        "üë• <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª—é–¥—å–º–∏:</b>\n"
        "üß© <code>/people_miner</code> - –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤\n"
        "üìä <code>/people_stats</code> - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ª—é–¥–µ–π –∏ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤\n"
        "üîÑ <code>/people_reset</code> - –°–±—Ä–æ—Å–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ People Miner\n\n"
        "‚ùì <code>/admin_help</code> - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n\n"
        "<i>–î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –±–æ—Ç–∞</i>"
    )

    await message.answer(help_text)
    user_id = message.from_user.id if message.from_user else "unknown"
    logger.info(f"Admin {user_id} requested admin help")
