"""–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞.

–í–∫–ª—é—á–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–æ–π —Ç–µ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏.
"""

from __future__ import annotations

import logging
import re

from aiogram import F, Router
from aiogram.fsm.context import FSMContext
from aiogram.types import Message

from app.core.tagger_v1_scored import validate_rules
from app.core.tags import clear_cache, get_tagging_stats, reload_tags_rules, tag_text_scored
from app.settings import settings

logger = logging.getLogger(__name__)

router = Router()


def _is_admin(message: Message) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."""
    user_id = message.from_user.id if message.from_user else None
    return settings.is_admin(user_id)


@router.message(F.text == "/reload_tags")
async def reload_tags_handler(message: Message) -> None:
    """–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ—Ç –ø—Ä–∞–≤–∏–ª–∞ —Ç–µ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑ YAML —Ñ–∞–π–ª–∞."""
    if not _is_admin(message):
        await message.answer("‚ùå –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
        return

    try:
        rules_count = reload_tags_rules()
        await message.answer(
            f"‚ôªÔ∏è <b>Tag rules reloaded</b>\n\n"
            f"üìä <b>{rules_count}</b> –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∑–∞–≥—Ä—É–∂–µ–Ω–æ\n"
            f"üîÑ LRU –∫—ç—à –æ—á–∏—â–µ–Ω"
        )
        user_id = message.from_user.id if message.from_user else "unknown"
        logger.info(f"Admin {user_id} reloaded tag rules: {rules_count} categories")

    except Exception as e:
        logger.error(f"Failed to reload tag rules: {e}")
        await message.answer("‚ùå <b>–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∞–≤–∏–ª</b>\n\n" f"<code>{str(e)}</code>")


@router.message(F.text == "/tags_stats")
async def tags_stats_handler(message: Message) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∏—Å—Ç–µ–º—ã —Ç–µ–≥–∏—Ä–æ–≤–∞–Ω–∏—è."""
    if not _is_admin(message):
        await message.answer("‚ùå –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
        return

    try:
        stats = get_tagging_stats()

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        stats_text = (
            f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã —Ç–µ–≥–∏—Ä–æ–≤–∞–Ω–∏—è</b>\n\n"
            f"üéØ <b>–†–µ–∂–∏–º:</b> {stats['current_mode']}\n"
            f"üìà <b>–í—ã–∑–æ–≤—ã –ø–æ —Ä–µ–∂–∏–º–∞–º:</b>\n"
        )

        for mode, count in stats["stats"]["calls_by_mode"].items():
            stats_text += f"   ‚Ä¢ {mode}: {count}\n"

        stats_text += "\nüìã <b>–í—ã–∑–æ–≤—ã –ø–æ —Ç–∏–ø–∞–º:</b>\n"
        for kind, count in stats["stats"]["calls_by_kind"].items():
            stats_text += f"   ‚Ä¢ {kind}: {count}\n"

        cache_info = stats["cache_info"]
        stats_text += (
            f"\nüíæ <b>–ö—ç—à:</b> {cache_info['hits']} hits, "
            f"{cache_info['misses']} misses\n"
            f"üì¶ <b>–†–∞–∑–º–µ—Ä:</b> {cache_info['currsize']}/{cache_info['maxsize']}\n"
            f"üîÑ <b>–ü—Ä–∞–≤–∏–ª–∞ –º–∞–ø–ø–∏–Ω–≥–∞:</b> {stats['mapping_rules']}"
        )

        if "v1_stats" in stats and "error" not in stats["v1_stats"]:
            v1_stats = stats["v1_stats"]
            stats_text += (
                f"\n\nüè∑Ô∏è <b>Tagger v1 Scored:</b>\n"
                f"   ‚Ä¢ –ü—Ä–∞–≤–∏–ª: {v1_stats.get('total_rules', 0)}\n"
                f"   ‚Ä¢ –ü–∞—Ç—Ç–µ—Ä–Ω–æ–≤: {v1_stats.get('total_patterns', 0)}\n"
                f"   ‚Ä¢ –ò—Å–∫–ª—é—á–µ–Ω–∏–π: {v1_stats.get('total_excludes', 0)}\n"
                f"   ‚Ä¢ –°—Ä–µ–¥–Ω–∏–π –≤–µ—Å: {v1_stats.get('average_weight', 0):.2f}\n"
                f"   ‚Ä¢ –ü–æ—Ä–æ–≥ score: {stats.get('tags_min_score', 0.5)}"
            )

        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        if "performance" in stats:
            perf = stats["performance"]
            stats_text += (
                f"\n\n‚ö° <b>–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</b>\n"
                f"   ‚Ä¢ Uptime: {perf.get('uptime_hours', 0):.1f}—á\n"
                f"   ‚Ä¢ –í—ã–∑–æ–≤–æ–≤/—á–∞—Å: {perf.get('calls_per_hour', 0):.1f}\n"
                f"   ‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {perf.get('avg_response_time_ms', 0):.1f}–º—Å"
            )

        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ø —Ç–µ–≥–∏
        if "top_tags" in stats and stats["top_tags"]:
            top_tags = stats["top_tags"][:5]  # –¢–æ–ø-5
            stats_text += "\n\nüî• <b>–¢–æ–ø —Ç–µ–≥–∏:</b>\n"
            for tag, count in top_tags:
                stats_text += f"   ‚Ä¢ {tag}: {count}\n"

        await message.answer(stats_text)
        user_id = message.from_user.id if message.from_user else "unknown"
        logger.info(f"Admin {user_id} requested tags stats")

    except Exception as e:
        logger.error(f"Failed to get tags stats: {e}")
        await message.answer("‚ùå <b>–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏</b>\n\n" f"<code>{str(e)}</code>")


@router.message(F.text == "/clear_cache")
async def clear_cache_handler(message: Message) -> None:
    """–û—á–∏—â–∞–µ—Ç –∫—ç—à —Å–∏—Å—Ç–µ–º—ã —Ç–µ–≥–∏—Ä–æ–≤–∞–Ω–∏—è."""
    if not _is_admin(message):
        await message.answer("‚ùå –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
        return

    try:
        clear_cache()
        await message.answer(
            "üßπ <b>–ö—ç—à –æ—á–∏—â–µ–Ω</b>\n\n"
            "LRU –∫—ç—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å–±—Ä–æ—à–µ–Ω.\n"
            "–°–ª–µ–¥—É—é—â–∏–µ –∑–∞–ø—Ä–æ—Å—ã –±—É–¥—É—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è –∑–∞–Ω–æ–≤–æ."
        )
        user_id = message.from_user.id if message.from_user else "unknown"
        logger.info(f"Admin {user_id} cleared tagging cache")

    except Exception as e:
        logger.error(f"Failed to clear cache: {e}")
        await message.answer("‚ùå <b>–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞</b>\n\n" f"<code>{str(e)}</code>")


@router.message(F.text == "/tags_validate")
async def tags_validate_handler(message: Message) -> None:
    """–í–∞–ª–∏–¥–∏—Ä—É–µ—Ç YAML —Ñ–∞–π–ª –ø—Ä–∞–≤–∏–ª —Ç–µ–≥–∏—Ä–æ–≤–∞–Ω–∏—è."""
    if not _is_admin(message):
        await message.answer("‚ùå –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
        return

    try:
        errors = validate_rules()

        if not errors:
            await message.answer(
                "‚úÖ <b>YAML –≤–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ–π–¥–µ–Ω–∞</b>\n\n"
                "–í—Å–µ –ø—Ä–∞–≤–∏–ª–∞ —Ç–µ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã:\n"
                "‚Ä¢ Regex –ø–∞—Ç—Ç–µ—Ä–Ω—ã –≤–∞–ª–∏–¥–Ω—ã\n"
                "‚Ä¢ –ù–µ—Ç –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ —Ç–µ–≥–æ–≤\n"
                "‚Ä¢ –í–µ—Å–∞ –≤ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö –ø—Ä–µ–¥–µ–ª–∞—Ö\n"
                "‚Ä¢ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ñ–∞–π–ª–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞"
            )
        else:
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫ –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
            display_errors = errors[:20]
            error_text = "\n".join(f"‚Ä¢ {error}" for error in display_errors)

            if len(errors) > 20:
                error_text += f"\n\n... –∏ –µ—â–µ {len(errors) - 20} –æ—à–∏–±–æ–∫"

            await message.answer(
                f"‚ùå <b>–ù–∞–π–¥–µ–Ω—ã –æ—à–∏–±–∫–∏ –≤ YAML ({len(errors)}):</b>\n\n"
                f"{error_text}\n\n"
                f"üí° –ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ –∏ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ /reload_tags"
            )

        user_id = message.from_user.id if message.from_user else "unknown"
        logger.info(f"Admin {user_id} validated YAML rules: {len(errors)} errors found")

    except Exception as e:
        logger.error(f"Error in tags validation: {e}")
        await message.answer(f"‚ùå <b>–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ YAML</b>\n\n<code>{str(e)}</code>")


@router.message(F.text.regexp(r"^/retag\s+([0-9a-f\-]{10,})(\s+dry-run)?$", flags=re.I))
async def retag_handler(message: Message) -> None:
    """–ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Ç–µ–≥–∏ –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤—Å—Ç—Ä–µ—á–∏ —Å –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º dry-run."""
    if not _is_admin(message):
        await message.answer("‚ùå –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
        return

    try:
        if not message.text:
            await message.answer("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã")
            return

        # –ü–∞—Ä—Å–∏–º –∫–æ–º–∞–Ω–¥—É
        match = re.match(r"^/retag\s+([0-9a-f\-]{10,})(\s+dry-run)?$", message.text, re.I)
        if not match:
            await message.answer("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã")
            return

        meeting_id = match.group(1).strip()
        is_dry_run = bool(match.group(2))

        await message.answer(
            f"üîç <b>Retag {'(dry-run)' if is_dry_run else ''}</b>\n\n‚è≥ –ü–æ–ª—É—á–∞—é –¥–∞–Ω–Ω—ã–µ –≤—Å—Ç—Ä–µ—á–∏..."
        )

        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏
        from app.core.tags import tag_text
        from app.gateways.notion_meetings import (
            fetch_meeting_page,
            update_meeting_tags,
            validate_meeting_access,
        )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        if not validate_meeting_access(meeting_id):
            await message.answer(f"‚ùå –°—Ç—Ä–∞–Ω–∏—Ü–∞ –≤—Å—Ç—Ä–µ—á–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: {meeting_id}")
            return

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        page_data = fetch_meeting_page(meeting_id)

        # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–µ–≥–∏
        summary_md = page_data.get("summary_md", "")
        if not summary_md:
            await message.answer("‚ùå –ù–µ—Ç summary –¥–ª—è –ø–µ—Ä–µ—Å—á–µ—Ç–∞ —Ç–µ–≥–æ–≤")
            return

        new_tags = set(tag_text(summary_md))
        old_tags = set(page_data.get("current_tags", []))

        # –í—ã—á–∏—Å–ª—è–µ–º diff
        tags_to_add = sorted(new_tags - old_tags)
        tags_to_remove = sorted(old_tags - new_tags)

        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        title = page_data.get("title", "Unknown")[:50]
        report_lines = [
            f"üìÑ <b>–í—Å—Ç—Ä–µ—á–∞:</b> {title}",
            f"üÜî <b>ID:</b> <code>{meeting_id}</code>",
            f"üìä <b>–°—Ç–∞—Ä—ã—Ö —Ç–µ–≥–æ–≤:</b> {len(old_tags)}",
            f"üìä <b>–ù–æ–≤—ã—Ö —Ç–µ–≥–æ–≤:</b> {len(new_tags)}",
        ]

        if tags_to_add:
            report_lines.append(f"\n‚ûï <b>–î–æ–±–∞–≤–∏—Ç—å ({len(tags_to_add)}):</b>")
            for tag in tags_to_add:
                report_lines.append(f"   ‚Ä¢ <code>{tag}</code>")

        if tags_to_remove:
            report_lines.append(f"\n‚ûñ <b>–£–¥–∞–ª–∏—Ç—å ({len(tags_to_remove)}):</b>")
            for tag in tags_to_remove:
                report_lines.append(f"   ‚Ä¢ <code>{tag}</code>")

        if not tags_to_add and not tags_to_remove:
            report_lines.append("\n‚úÖ <b>–ò–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ—Ç</b> - —Ç–µ–≥–∏ –∞–∫—Ç—É–∞–ª—å–Ω—ã")

        # –í—ã–ø–æ–ª–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
        if is_dry_run or (not tags_to_add and not tags_to_remove):
            # Dry-run –∏–ª–∏ –Ω–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π
            mode_text = "üîç <b>Dry-run —Ä–µ–∑—É–ª—å—Ç–∞—Ç</b>" if is_dry_run else "‚ÑπÔ∏è <b>–†–µ–∑—É–ª—å—Ç–∞—Ç</b>"
            await message.answer(f"{mode_text}\n\n" + "\n".join(report_lines))
        else:
            # –†–µ–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
            try:
                update_meeting_tags(meeting_id, sorted(new_tags))
                report_lines.insert(0, "‚ôªÔ∏è <b>–¢–µ–≥–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã</b>\n")
                await message.answer("\n".join(report_lines))

                logger.info(
                    f"Retagged meeting {meeting_id}: +{len(tags_to_add)} -{len(tags_to_remove)}"
                )

            except Exception as update_error:
                logger.error(f"Error updating meeting tags: {update_error}")
                await message.answer(
                    f"‚ùå <b>–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–µ–≥–æ–≤</b>\n\n"
                    f"<code>{str(update_error)}</code>\n\n"
                    f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ dry-run –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏: <code>/retag {meeting_id} dry-run</code>"
                )

        user_id = message.from_user.id if message.from_user else "unknown"
        logger.info(f"Admin {user_id} executed retag for {meeting_id} (dry-run: {is_dry_run})")

    except Exception as e:
        logger.error(f"Error in retag_handler: {e}")
        await message.answer(f"‚ùå <b>–û—à–∏–±–∫–∞ retag</b>\n\n<code>{str(e)}</code>")


@router.message(F.text.regexp(r"^/test_tags\s+.+$"))
async def test_tags_handler(message: Message) -> None:
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç scored —Ç—ç–≥–≥–µ—Ä –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–º —Ç–µ–∫—Å—Ç–µ."""
    if not _is_admin(message):
        await message.answer("‚ùå –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
        return

    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã
        text_to_test = (message.text or "").split("/test_tags", 1)[1].strip()

        if not text_to_test:
            await message.answer(
                "‚ùå –£–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.\n–ü—Ä–∏–º–µ—Ä: <code>/test_tags –û–±—Å—É–¥–∏–ª–∏ IFRS –∞—É–¥–∏—Ç</code>"
            )
            return

        # –ü–æ–ª—É—á–∞–µ–º scored —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        scored_results = tag_text_scored(text_to_test)

        if not scored_results:
            await message.answer(
                f"üè∑Ô∏è <b>–¢–µ—Å—Ç —Ç–µ–≥–∏—Ä–æ–≤–∞–Ω–∏—è</b>\n\nüìù –¢–µ–∫—Å—Ç: <i>{text_to_test}</i>\n\n‚ùå –¢–µ–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
            )
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        response_lines = [
            "üè∑Ô∏è <b>–¢–µ—Å—Ç scored —Ç—ç–≥–≥–µ—Ä–∞</b>\n",
            f"üìù <b>–¢–µ–∫—Å—Ç:</b> <i>{text_to_test}</i>\n",
            f"üéØ <b>–ü–æ—Ä–æ–≥:</b> {settings.tags_min_score}\n",
            f"üìä <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã ({len(scored_results)} —Ç–µ–≥–æ–≤):</b>",
        ]

        for tag, score in scored_results:
            status = "‚úÖ" if score >= settings.tags_min_score else "‚ùå"
            response_lines.append(f"  {status} <code>{tag}</code>: {score:.2f}")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–µ–≥–∏
        from app.core.tags import tag_text

        final_tags = tag_text(text_to_test)
        if final_tags:
            response_lines.extend(
                [
                    f"\nüèÜ <b>–§–∏–Ω–∞–ª—å–Ω—ã–µ —Ç–µ–≥–∏ ({len(final_tags)}):</b>",
                    *[f"  ‚Ä¢ <code>{tag}</code>" for tag in final_tags],
                ]
            )

        await message.answer("\n".join(response_lines))

        user_id = message.from_user.id if message.from_user else "unknown"
        logger.info(f"Admin {user_id} tested tags for text: {text_to_test[:50]}...")

    except Exception as e:
        logger.error(f"Error in test_tags_handler: {e}")
        await message.answer(f"‚ùå <b>–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–≥–æ–≤</b>\n\n<code>{str(e)}</code>")


@router.message(F.text == "/admin_help")
async def admin_help_handler(message: Message) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö –∫–æ–º–∞–Ω–¥."""
    if not _is_admin(message):
        await message.answer("‚ùå –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
        return

    help_text = (
        "üîß <b>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã</b>\n\n"
        "üè∑Ô∏è <b>–°–∏—Å—Ç–µ–º–∞ —Ç–µ–≥–∏—Ä–æ–≤–∞–Ω–∏—è:</b>\n"
        "‚ôªÔ∏è <code>/reload_tags</code> - –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–∞–≤–∏–ª–∞ —Ç–µ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑ YAML\n"
        "üìä <code>/tags_stats</code> - –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã —Ç–µ–≥–∏—Ä–æ–≤–∞–Ω–∏—è\n"
        "‚úÖ <code>/tags_validate</code> - –í–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å YAML —Ñ–∞–π–ª –ø—Ä–∞–≤–∏–ª\n"
        "üßπ <code>/clear_cache</code> - –û—á–∏—Å—Ç–∏—Ç—å LRU –∫—ç—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤\n"
        "üß™ <code>/test_tags &lt;—Ç–µ–∫—Å—Ç&gt;</code> - –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å scored —Ç—ç–≥–≥–µ—Ä\n\n"
        "üîÑ <b>Retag —Ñ—É–Ω–∫—Ü–∏–∏:</b>\n"
        "üîç <code>/retag &lt;meeting_id&gt; dry-run</code> - –ü–æ–∫–∞–∑–∞—Ç—å diff —Ç–µ–≥–æ–≤\n"
        "‚ôªÔ∏è <code>/retag &lt;meeting_id&gt;</code> - –ü–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å –∏ –æ–±–Ω–æ–≤–∏—Ç—å —Ç–µ–≥–∏\n"
        "üè∑Ô∏è <code>/review_tags &lt;meeting_id&gt;</code> - –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ —Ä–µ–≤—å—é —Ç–µ–≥–æ–≤\n\n"
        "üë• <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª—é–¥—å–º–∏:</b>\n"
        "üß© <code>/people_miner</code> - –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤\n"
        "üìä <code>/people_stats</code> - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ª—é–¥–µ–π –∏ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤\n"
        "üîÑ <code>/people_reset</code> - –°–±—Ä–æ—Å–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ People Miner\n\n"
        "‚ùì <code>/admin_help</code> - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n"
        "üîß <code>/admin_config</code> - –ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –ø—Ä–∞–≤\n\n"
        "<i>–î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –±–æ—Ç–∞</i>"
    )

    await message.answer(help_text)
    user_id = message.from_user.id if message.from_user else "unknown"
    logger.info(f"Admin {user_id} requested admin help")


@router.message(F.text == "/admin_config")
async def admin_config_handler(message: Message) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –ø—Ä–∞–≤ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏."""
    if not _is_admin(message):
        await message.answer("‚ùå –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
        return

    try:
        from app.settings import get_admin_config_info

        config = get_admin_config_info()
        current_user = message.from_user.id if message.from_user else None

        config_text = (
            f"üîß <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –ø—Ä–∞–≤</b>\n\n"
            f"üë§ <b>–í–∞—à ID:</b> <code>{current_user}</code>\n"
            f"üë• <b>–ê–¥–º–∏–Ω—ã:</b> {config['admin_ids']}\n"
            f"üìä <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:</b> {config['count']}\n"
            f"üìç <b>–ò—Å—Ç–æ—á–Ω–∏–∫:</b> <code>{config['source']}</code>\n"
            f"üìÅ <b>.env —Ñ–∞–π–ª:</b> {'‚úÖ –°—É—â–µ—Å—Ç–≤—É–µ—Ç' if config['env_file_exists'] else '‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}\n\n"
            f"üí° <b>–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞:</b>\n"
            f"<code>{config['recommended_setup']}</code>\n\n"
            f"üìã <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:</b>\n"
            f"1. –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª <code>.env</code> –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞\n"
            f"2. –î–æ–±–∞–≤—å—Ç–µ —Å—Ç—Ä–æ–∫—É: <code>APP_ADMIN_USER_IDS={current_user}</code>\n"
            f"3. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞\n\n"
            f"üîç <b>–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ID –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b>\n"
            f"–ü–æ–ø—Ä–æ—Å–∏—Ç–µ –µ–≥–æ –Ω–∞–ø–∏—Å–∞—Ç—å –±–æ—Ç—É /start –∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏"
        )

        await message.answer(config_text)
        user_id = message.from_user.id if message.from_user else "unknown"
        logger.info(f"Admin {user_id} requested admin config info")

    except Exception as e:
        logger.error(f"Failed to get admin config: {e}")
        await message.answer(f"‚ùå <b>–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫</b>\n\n<code>{str(e)}</code>")


@router.message(F.text.regexp(r"^/review_tags\s+([0-9a-f\-]{10,})$"))
async def review_tags_handler(message: Message, state: FSMContext) -> None:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ —Ä–µ–≤—å—é —Ç–µ–≥–æ–≤ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –≤—Å—Ç—Ä–µ—á–∏."""
    if not _is_admin(message):
        await message.answer("‚ùå –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
        return

    try:
        if not message.text:
            await message.answer("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã")
            return

        # –ü–∞—Ä—Å–∏–º ID –≤—Å—Ç—Ä–µ—á–∏
        match = re.match(r"^/review_tags\s+([0-9a-f\-]{10,})$", message.text)
        if not match:
            await message.answer("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –≤—Å—Ç—Ä–µ—á–∏")
            return

        meeting_id = match.group(1).strip()

        await message.answer(
            f"üîç <b>–ó–∞–≥—Ä—É–∂–∞—é —Ç–µ–≥–∏ –≤—Å—Ç—Ä–µ—á–∏...</b>\n\n‚è≥ ID: <code>{meeting_id}</code>"
        )

        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏
        from app.bot.handlers_tags_review import start_tags_review
        from app.gateways.notion_meetings import fetch_meeting_page, validate_meeting_access

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        if not validate_meeting_access(meeting_id):
            await message.answer(f"‚ùå –°—Ç—Ä–∞–Ω–∏—Ü–∞ –≤—Å—Ç—Ä–µ—á–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: {meeting_id}")
            return

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        page_data = fetch_meeting_page(meeting_id)
        current_tags = page_data.get("current_tags", [])

        if not current_tags:
            await message.answer("‚ùå –£ –≤—Å—Ç—Ä–µ—á–∏ –Ω–µ—Ç —Ç–µ–≥–æ–≤ –¥–ª—è —Ä–µ–≤—å—é")
            return

        # –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ —Ä–µ–≤—å—é
        user_id = message.from_user.id if message.from_user else 0
        await start_tags_review(
            meeting_id=meeting_id,
            original_tags=current_tags,
            user_id=user_id,
            message=message,
            state=state,
        )

        logger.info(f"Admin {user_id} started manual tags review for meeting {meeting_id}")

    except Exception as e:
        logger.error(f"Error in review_tags_handler: {e}")
        await message.answer(f"‚ùå <b>–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ä–µ–≤—å—é —Ç–µ–≥–æ–≤</b>\n\n<code>{str(e)}</code>")
