"""
–ú–æ–¥—É–ª—å –∫—Ä–∞—Å–∏–≤–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è Telegram –±–æ—Ç–∞.

–û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–µ–∫ –≤—Å—Ç—Ä–µ—á, –∫–æ–º–º–∏—Ç–æ–≤ –∏ –¥—Ä—É–≥–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
—Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —ç–º–æ–¥–∑–∏, HTML —Ä–∞–∑–º–µ—Ç–∫–∏ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ layout'–∞.
"""

from __future__ import annotations

from datetime import UTC, datetime
from typing import Any, NamedTuple

# –≠–º–æ–¥–∑–∏ –¥–ª—è —Å—Ç–∞—Ç—É—Å–æ–≤
STATUS_EMOJI = {
    "open": "üü°",
    "done": "‚úÖ",
    "completed": "‚úÖ",
    "resolved": "‚úÖ",
    "dropped": "‚ùå",
    "cancelled": "‚ùå",
    "pending": "üü†",
    "needs-review": "üîç",
    "in-progress": "üîÑ",
}

# –≠–º–æ–¥–∑–∏ –¥–ª—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π (direction)
DIRECTION_EMOJI = {
    "mine": "üì§",
    "theirs": "üì•",
    "mutual": "ü§ù",
}

# –≠–º–æ–¥–∑–∏ –¥–ª—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –ø–æ —Å—Ä–æ–∫–∞–º
URGENCY_EMOJI = {
    "overdue": "üö®",
    "today": "‚ö°",
    "this_week": "‚è∞",
    "next_week": "üìÖ",
    "no_due": "üìã",
}

# –≠–º–æ–¥–∑–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ç–µ–≥–æ–≤
TAG_CATEGORY_EMOJI = {
    "Finance": "üí∞",
    "Business": "üè¢",
    "People": "üë•",
    "Projects": "üìÅ",
    "Topic": "üéØ",
    "Area": "üóÇÔ∏è",
}


class AdaptiveLimits(NamedTuple):
    """–ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –ª–∏–º–∏—Ç—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —É—Å—Ç—Ä–æ–π—Å—Ç–≤."""

    title: int
    description: int
    attendees: int
    tags: int
    id_length: int


# –ü—Ä–æ—Ñ–∏–ª–∏ –ª–∏–º–∏—Ç–æ–≤ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
DEVICE_LIMITS = {
    "mobile": AdaptiveLimits(title=100, description=300, attendees=3, tags=3, id_length=6),
    "tablet": AdaptiveLimits(title=100, description=300, attendees=4, tags=4, id_length=8),
    "desktop": AdaptiveLimits(title=100, description=300, attendees=6, tags=5, id_length=12),
}


# –≠–≤—Ä–∏—Å—Ç–∏–∫–∏ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–ª–∏–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏—è
def _detect_device_type(context_hint: str | None = None) -> str:
    """
    –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –¥–ª—è –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.

    Args:
        context_hint: –ü–æ–¥—Å–∫–∞–∑–∫–∞ –æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ (mobile, tablet, desktop)

    Returns:
        –¢–∏–ø —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: mobile, tablet, desktop
    """
    if context_hint and context_hint.lower() in DEVICE_LIMITS:
        return context_hint.lower()

    # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ–º tablet –∫–∞–∫ –∫–æ–º–ø—Ä–æ–º–∏—Å—Å –º–µ–∂–¥—É mobile –∏ desktop
    return "tablet"


def _get_adaptive_limits(device_type: str | None = None) -> AdaptiveLimits:
    """–ü–æ–ª—É—á–∞–µ—Ç –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –ª–∏–º–∏—Ç—ã –¥–ª—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞."""
    device = _detect_device_type(device_type)
    return DEVICE_LIMITS.get(device, DEVICE_LIMITS["tablet"])


def _get_urgency_level(due_iso: str | None) -> str:
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —É—Ä–æ–≤–µ–Ω—å —Å—Ä–æ—á–Ω–æ—Å—Ç–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–µ–¥–ª–∞–π–Ω–∞."""
    if not due_iso:
        return "no_due"

    try:
        from datetime import date

        due_date = datetime.fromisoformat(due_iso.replace("Z", "+00:00")).date()
        today = date.today()

        diff_days = (due_date - today).days

        if diff_days < 0:
            return "overdue"
        elif diff_days == 0:
            return "today"
        elif diff_days <= 7:
            return "this_week"
        elif diff_days <= 14:
            return "next_week"
        else:
            return "no_due"

    except (ValueError, TypeError):
        return "no_due"


def _format_date(date_str: str | None) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞—Ç—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è."""
    if not date_str:
        return "‚Äî"

    try:
        # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
        if len(date_str) == 10 and "-" in date_str:  # YYYY-MM-DD
            year, month, day = date_str.split("-")
            return f"{day}.{month}.{year}"
        elif len(date_str) > 10:  # ISO with time
            dt = datetime.fromisoformat(date_str.replace("Z", "+00:00"))
            return dt.strftime("%d.%m.%Y")
        else:
            return date_str
    except (ValueError, TypeError):
        return date_str or "‚Äî"


def _format_tags_list(tags: list[str], max_tags: int = 3, *, device_type: str | None = None) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç–µ–≥–æ–≤ —Å —ç–º–æ–¥–∑–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏ –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–º–∏ –ª–∏–º–∏—Ç–∞–º–∏.

    Args:
        tags: –°–ø–∏—Å–æ–∫ —Ç–µ–≥–æ–≤
        max_tags: –ë–∞–∑–æ–≤—ã–π –ª–∏–º–∏—Ç —Ç–µ–≥–æ–≤ (–º–æ–∂–µ—Ç –±—ã—Ç—å –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–º–∏ –ª–∏–º–∏—Ç–∞–º–∏)
        device_type: –¢–∏–ø —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –¥–ª—è –∞–¥–∞–ø—Ç–∏–≤–Ω—ã—Ö –ª–∏–º–∏—Ç–æ–≤
    """
    if not tags:
        return "‚Äî"

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –ª–∏–º–∏—Ç—ã –µ—Å–ª–∏ –Ω–µ –∑–∞–¥–∞–Ω –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π max_tags
    if device_type and max_tags == 3:  # 3 - –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        limits = _get_adaptive_limits(device_type)
        max_tags = limits.tags

    formatted_tags = []
    for tag in tags[:max_tags]:
        if "/" in tag:
            category, name = tag.split("/", 1)
            emoji = TAG_CATEGORY_EMOJI.get(category, "üè∑Ô∏è")
            formatted_tags.append(f"{emoji} <code>{name}</code>")
        else:
            formatted_tags.append(f"üè∑Ô∏è <code>{tag}</code>")

    result = " ‚Ä¢ ".join(formatted_tags)

    if len(tags) > max_tags:
        result += f" <i>+{len(tags) - max_tags}</i>"

    return result


def _escape_html(text: str) -> str:
    """–≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç HTML —Å–∏–º–≤–æ–ª—ã –≤ —Ç–µ–∫—Å—Ç–µ."""
    if not text:
        return ""

    return (
        text.replace("&", "&amp;")
        .replace("<", "&lt;")
        .replace(">", "&gt;")
        .replace('"', "&quot;")
        .replace("'", "&#x27;")
    )


def _truncate_text(text: str, max_length: int = 80, *, device_type: str | None = None) -> str:
    """
    –û–±—Ä–µ–∑–∞–µ—Ç —Ç–µ–∫—Å—Ç —Å —É–º–Ω—ã–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –º–Ω–æ–≥–æ—Ç–æ—á–∏—è –∏ –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–º–∏ –ª–∏–º–∏—Ç–∞–º–∏.

    Args:
        text: –¢–µ–∫—Å—Ç –¥–ª—è –æ–±—Ä–µ–∑–∞–Ω–∏—è
        max_length: –ë–∞–∑–æ–≤—ã–π –ª–∏–º–∏—Ç (–º–æ–∂–µ—Ç –±—ã—Ç—å –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–º–∏ –ª–∏–º–∏—Ç–∞–º–∏)
        device_type: –¢–∏–ø —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –¥–ª—è –∞–¥–∞–ø—Ç–∏–≤–Ω—ã—Ö –ª–∏–º–∏—Ç–æ–≤

    Returns:
        –û–±—Ä–µ–∑–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å –º–Ω–æ–≥–æ—Ç–æ—á–∏–µ–º –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
    """
    if not text:
        return "‚Äî"

    text = text.strip()

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –ª–∏–º–∏—Ç—ã –µ—Å–ª–∏ –Ω–µ –∑–∞–¥–∞–Ω –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π max_length
    if device_type and max_length == 80:  # 80 - –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        limits = _get_adaptive_limits(device_type)
        max_length = limits.description

    if len(text) <= max_length:
        return text

    # –ü—ã—Ç–∞–µ–º—Å—è –æ–±—Ä–µ–∑–∞—Ç—å –ø–æ —Å–ª–æ–≤–∞–º
    truncated = text[:max_length]
    last_space = truncated.rfind(" ")

    if last_space > max_length * 0.7:  # –ï—Å–ª–∏ –º–æ–∂–µ–º –æ–±—Ä–µ–∑–∞—Ç—å –ø–æ —Å–ª–æ–≤—É –±–µ–∑ –±–æ–ª—å—à–æ–π –ø–æ—Ç–µ—Ä–∏
        truncated = truncated[:last_space]

    return truncated + "..."


def format_meeting_card(
    meeting: dict[str, Any], *, show_url: bool = True, device_type: str | None = None
) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∫–∞—Ä—Ç–æ—á–∫—É –≤—Å—Ç—Ä–µ—á–∏ –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–º–∏ –ª–∏–º–∏—Ç–∞–º–∏.

    Args:
        meeting: –î–∞–Ω–Ω—ã–µ –≤—Å—Ç—Ä–µ—á–∏ (–∏–∑ Notion –∏–ª–∏ internal format)
        show_url: –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ Notion
        device_type: –¢–∏–ø —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –¥–ª—è –∞–¥–∞–ø—Ç–∏–≤–Ω—ã—Ö –ª–∏–º–∏—Ç–æ–≤ (mobile, tablet, desktop)

    Returns:
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è HTML —Å—Ç—Ä–æ–∫–∞ –¥–ª—è Telegram
    """
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å fallback –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
    title = meeting.get("Name") or meeting.get("title") or "–í—Å—Ç—Ä–µ—á–∞ –±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
    date_str = meeting.get("Date") or meeting.get("date") or meeting.get("meeting_date")
    tags = meeting.get("Tags") or meeting.get("tags") or []
    attendees = meeting.get("Attendees") or meeting.get("attendees") or []
    url = meeting.get("url") or meeting.get("notion_url")

    # –ü–æ–ª—É—á–∞–µ–º –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –ª–∏–º–∏—Ç—ã
    limits = _get_adaptive_limits(device_type)

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–º–∏ –ª–∏–º–∏—Ç–∞–º–∏
    title_escaped = _escape_html(_truncate_text(str(title), limits.title, device_type=device_type))
    formatted_date = _format_date(date_str)

    attendees_str = ", ".join(str(a) for a in attendees[: limits.attendees]) if attendees else "‚Äî"
    if len(attendees) > limits.attendees:
        attendees_str += f" <i>+{len(attendees) - limits.attendees}</i>"

    tags_str = _format_tags_list(tags, max_tags=limits.tags, device_type=device_type)

    # –°–æ–±–∏—Ä–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É
    card = (
        f"üìÖ <b>{title_escaped}</b>\n"
        f"üóìÔ∏è <b>–î–∞—Ç–∞:</b> {formatted_date}\n"
        f"üë• <b>–£—á–∞—Å—Ç–Ω–∏–∫–∏:</b> {attendees_str}\n"
        f"üè∑Ô∏è <b>–¢–µ–≥–∏:</b> {tags_str}"
    )

    if show_url and url:
        card += f"\nüîó <a href='{url}'>–û—Ç–∫—Ä—ã—Ç—å –≤ Notion</a>"

    return card


def format_commit_card(
    commit: dict[str, Any], *, show_meeting_link: bool = False, device_type: str | None = None
) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∫–∞—Ä—Ç–æ—á–∫—É –∫–æ–º–º–∏—Ç–∞ –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–º–∏ –ª–∏–º–∏—Ç–∞–º–∏.

    Args:
        commit: –î–∞–Ω–Ω—ã–µ –∫–æ–º–º–∏—Ç–∞ (–∏–∑ Review –∏–ª–∏ Commits)
        show_meeting_link: –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ –≤—Å—Ç—Ä–µ—á—É
        device_type: –¢–∏–ø —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –¥–ª—è –∞–¥–∞–ø—Ç–∏–≤–Ω—ã—Ö –ª–∏–º–∏—Ç–æ–≤ (mobile, tablet, desktop)

    Returns:
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è HTML —Å—Ç—Ä–æ–∫–∞ –¥–ª—è Telegram
    """
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    text = commit.get("text") or commit.get("Text") or commit.get("title") or "–ó–∞–¥–∞—á–∞ –±–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è"
    status = commit.get("status") or commit.get("Status") or "open"
    direction = commit.get("direction") or commit.get("Direction") or "theirs"
    assignees = commit.get("assignees") or commit.get("Assignee") or []
    from_person = commit.get("from_person") or []
    tags = commit.get("tags") or commit.get("Tags") or []
    due_iso = commit.get("due_iso") or commit.get("Due")
    short_id = commit.get("short_id") or commit.get("page_id", "")[-6:]

    # –ü–æ–ª—É—á–∞–µ–º —ç–º–æ–¥–∑–∏
    status_emoji = STATUS_EMOJI.get(str(status).lower(), "‚¨ú")
    direction_emoji = DIRECTION_EMOJI.get(str(direction).lower(), "üìã")
    urgency_emoji = URGENCY_EMOJI.get(_get_urgency_level(due_iso), "üìã")

    # –ü–æ–ª—É—á–∞–µ–º –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –ª–∏–º–∏—Ç—ã
    limits = _get_adaptive_limits(device_type)

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–º–∏ –ª–∏–º–∏—Ç–∞–º–∏
    text_escaped = _escape_html(
        _truncate_text(str(text), limits.description, device_type=device_type)
    )

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π —Å –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–º –ª–∏–º–∏—Ç–æ–º
    max_assignees = min(limits.attendees, 3)  # –î–ª—è –∫–æ–º–º–∏—Ç–æ–≤ –Ω–µ –±–æ–ª–µ–µ 3 –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π
    if isinstance(assignees, list) and assignees:
        who = ", ".join(str(a) for a in assignees[:max_assignees])
        if len(assignees) > max_assignees:
            who += f" <i>+{len(assignees) - max_assignees}</i>"
    elif isinstance(assignees, str) and assignees:
        who = str(assignees)
    else:
        who = "‚Äî"

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–µ–¥–ª–∞–π–Ω
    due_formatted = _format_date(due_iso)

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º confidence (—É–¥–∞–ª–µ–Ω–æ - –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –Ω–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ)

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∑–∞–∫–∞–∑—á–∏–∫–∞
    requester_line = ""
    if from_person:
        requester = ", ".join(str(f) for f in from_person[:2])
        if len(from_person) > 2:
            requester += f" <i>+{len(from_person) - 2}</i>"
        requester_line = f"üíº <b>–ó–∞–∫–∞–∑—á–∏–∫:</b> {requester}\n"

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–≥–∏
    tags_line = ""
    if tags:
        tags_display = ", ".join(str(t) for t in tags[:3])
        if len(tags) > 3:
            tags_display += f" <i>+{len(tags) - 3}</i>"
        tags_line = f"üè∑Ô∏è <b>Tags:</b> {tags_display}\n"

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å
    status_text = {
        "open": "üü¢ –ê–∫—Ç–∏–≤–Ω–æ",
        "done": "‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ",
        "dropped": "‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ",
        "cancelled": "‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ",
    }.get(str(status).lower(), f"‚ùì {str(status).title()}")

    # –°–æ–±–∏—Ä–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É
    card = (
        f"{status_emoji} <b>{text_escaped}</b>\n"
        f"{requester_line}"
        f"{tags_line}"
        f"{direction_emoji} <b>–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å:</b> {who}\n"
        f"üìä <b>–°—Ç–∞—Ç—É—Å:</b> {status_text}\n"
        f"{urgency_emoji} <b>–°—Ä–æ–∫:</b> {due_formatted}"
    )

    if short_id:
        # –ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è –¥–ª–∏–Ω–∞ ID
        display_id = short_id[: limits.id_length] if len(short_id) > limits.id_length else short_id
        card += f"\nüÜî <code>{display_id}</code>"

    return card


def format_review_card(review: dict[str, Any], *, device_type: str | None = None) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∫–∞—Ä—Ç–æ—á–∫—É Review —ç–ª–µ–º–µ–Ω—Ç–∞ –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.

    Args:
        review: –î–∞–Ω–Ω—ã–µ Review —ç–ª–µ–º–µ–Ω—Ç–∞

    Returns:
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è HTML —Å—Ç—Ä–æ–∫–∞ –¥–ª—è Telegram
    """
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—É—é –ª–æ–≥–∏–∫—É commit –∫–∞—Ä—Ç–æ—á–∫–∏ —Å –ø–µ—Ä–µ–¥–∞—á–µ–π device_type
    card = format_commit_card(review, device_type=device_type)

    # –î–æ–±–∞–≤–ª—è–µ–º Review —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    reasons = review.get("reasons") or []
    if reasons:
        reasons_str = ", ".join(str(r) for r in reasons[:2])
        if len(reasons) > 2:
            reasons_str += f" <i>+{len(reasons) - 2}</i>"
        card += f"\n‚ö†Ô∏è <b>–ü—Ä–∏—á–∏–Ω—ã —Ä–µ–≤—å—é:</b> {reasons_str}"

    context = review.get("context")
    if context:
        context_short = _truncate_text(str(context), 50)
        card += f"\nüí≠ <b>–ö–æ–Ω—Ç–µ–∫—Å—Ç:</b> <i>{_escape_html(context_short)}</i>"

    return card


def format_people_candidate_card(candidate: dict[str, Any], index: int, total: int) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∫–∞—Ä—Ç–æ—á–∫—É –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –≤ People Miner.

    Args:
        candidate: –î–∞–Ω–Ω—ã–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
        index: –¢–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å (–¥–ª—è –ø–æ–∫–∞–∑–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞)
        total: –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ

    Returns:
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è HTML —Å—Ç—Ä–æ–∫–∞ –¥–ª—è Telegram
    """
    alias = candidate.get("alias", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
    freq = candidate.get("freq", 0)
    name_en = candidate.get("name_en", "")

    # –ü—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä
    progress = f"üìä <b>{index}/{total}</b>"

    # –ß–∞—Å—Ç–æ—Ç–∞ –≤—Å—Ç—Ä–µ—á–∞–µ–º–æ—Å—Ç–∏ —Å —ç–º–æ–¥–∑–∏
    if freq >= 10:
        freq_emoji = "üî•"
    elif freq >= 5:
        freq_emoji = "‚≠ê"
    elif freq >= 2:
        freq_emoji = "üí´"
    else:
        freq_emoji = "üìù"

    card = (
        f"üë§ <b>–ù–æ–≤—ã–π –∫–∞–Ω–¥–∏–¥–∞—Ç</b>\n\n"
        f"üî§ <b>–ò–º—è:</b> <code>{_escape_html(alias)}</code>\n"
        f"{freq_emoji} <b>–í—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è:</b> {freq} —Ä–∞–∑\n"
    )

    if name_en:
        card += f"üåê <b>–ê–Ω–≥–ª–∏–π—Å–∫–æ–µ –∏–º—è:</b> <code>{_escape_html(name_en)}</code>\n"

    card += f"\n{progress}"

    return card


def format_tags_stats_card(stats: dict[str, Any]) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∫–∞—Ä—Ç–æ—á–∫—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç–µ–≥–∏—Ä–æ–≤–∞–Ω–∏—è.

    Args:
        stats: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–µ–≥–∏—Ä–æ–≤–∞–Ω–∏—è

    Returns:
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è HTML —Å—Ç—Ä–æ–∫–∞ –¥–ª—è Telegram
    """
    # –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    total_calls = stats.get("total_calls", 0)
    total_tags = stats.get("total_tags_found", 0)
    avg_score = stats.get("avg_score", 0)
    cache_hit_rate = stats.get("cache_hit_rate", 0)

    card = (
        f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–µ–≥–∏—Ä–æ–≤–∞–Ω–∏—è</b>\n\n"
        f"üéØ <b>–í—ã–∑–æ–≤–æ–≤:</b> {total_calls:,}\n"
        f"üè∑Ô∏è <b>–¢–µ–≥–æ–≤ –Ω–∞–π–¥–µ–Ω–æ:</b> {total_tags:,}\n"
        f"‚≠ê <b>–°—Ä–µ–¥–Ω–∏–π —Å—á–µ—Ç:</b> {avg_score:.2f}\n"
        f"‚ö° <b>–ö—ç—à hit-rate:</b> {cache_hit_rate:.1%}\n"
    )

    # –¢–æ–ø —Ç–µ–≥–∏
    top_tags = stats.get("top_tags", {})
    if top_tags:
        card += "\nüèÜ <b>–¢–æ–ø —Ç–µ–≥–∏:</b>\n"
        for i, (tag, count) in enumerate(list(top_tags.items())[:3], 1):
            if "/" in tag:
                category, name = tag.split("/", 1)
                emoji = TAG_CATEGORY_EMOJI.get(category, "üè∑Ô∏è")
                card += f"{i}. {emoji} <code>{name}</code> ({count})\n"
            else:
                card += f"{i}. üè∑Ô∏è <code>{tag}</code> ({count})\n"

    # Breakdown –ø–æ —Ä–µ–∂–∏–º–∞–º
    mode_stats = stats.get("mode_breakdown", {})
    if mode_stats:
        card += "\nüîß <b>–ü–æ —Ä–µ–∂–∏–º–∞–º:</b>\n"
        for mode, count in mode_stats.items():
            card += f"‚Ä¢ <code>{mode}</code>: {count}\n"

    return card


def format_admin_command_response(title: str, data: dict[str, Any], *, success: bool = True) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—É—é –∫–æ–º–∞–Ω–¥—É.

    Args:
        title: –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∫–æ–º–∞–Ω–¥—ã
        data: –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        success: –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è

    Returns:
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è HTML —Å—Ç—Ä–æ–∫–∞ –¥–ª—è Telegram
    """
    status_emoji = "‚úÖ" if success else "‚ùå"

    card = f"{status_emoji} <b>{title}</b>\n\n"

    for key, value in data.items():
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫–ª—é—á
        key_formatted = key.replace("_", " ").title()

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
        if isinstance(value, dict):
            card += f"üìä <b>{key_formatted}:</b>\n"
            for sub_key, sub_value in list(value.items())[:5]:
                card += f"  ‚Ä¢ {sub_key}: {sub_value}\n"
        elif isinstance(value, list):
            if len(value) <= 3:
                value_str = ", ".join(str(v) for v in value)
            else:
                value_str = ", ".join(str(v) for v in value[:3]) + f" <i>+{len(value)-3}</i>"
            card += f"üìã <b>{key_formatted}:</b> {value_str}\n"
        elif isinstance(value, int | float):
            if key.endswith("_rate") or key.endswith("_percent"):
                card += f"üìà <b>{key_formatted}:</b> {value:.1%}\n"
            elif key.endswith("_count") or key.endswith("_total"):
                card += f"üî¢ <b>{key_formatted}:</b> {value:,}\n"
            else:
                card += f"üìä <b>{key_formatted}:</b> {value}\n"
        else:
            card += f"‚ÑπÔ∏è <b>{key_formatted}:</b> {value}\n"

    return card


def format_error_card(error_title: str, error_details: str, *, show_details: bool = True) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∫–∞—Ä—Ç–æ—á–∫—É –æ—à–∏–±–∫–∏.

    Args:
        error_title: –ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –æ—à–∏–±–∫–∏
        error_details: –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏
        show_details: –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ª–∏ –¥–µ—Ç–∞–ª–∏

    Returns:
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è HTML —Å—Ç—Ä–æ–∫–∞ –¥–ª—è Telegram
    """
    card = f"‚ùå <b>{error_title}</b>\n\n"

    if show_details and error_details:
        details_short = _truncate_text(str(error_details), 200)
        card += f"üìù <b>–î–µ—Ç–∞–ª–∏:</b>\n<code>{_escape_html(details_short)}</code>\n\n"

    card += "üí° <b>–ß—Ç–æ –¥–µ–ª–∞—Ç—å:</b>\n"
    card += "‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥\n"
    card += "‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö\n"
    card += "‚Ä¢ –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –µ—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è"

    return card


def format_success_card(title: str, details: dict[str, Any] | None = None) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∫–∞—Ä—Ç–æ—á–∫—É —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏.

    Args:
        title: –ó–∞–≥–æ–ª–æ–≤–æ–∫ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
        details: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ—Ç–∞–ª–∏

    Returns:
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è HTML —Å—Ç—Ä–æ–∫–∞ –¥–ª—è Telegram
    """
    card = f"‚úÖ <b>{title}</b>\n\n"

    if details:
        for key, value in details.items():
            key_formatted = key.replace("_", " ").title()

            if key.endswith("_id") and isinstance(value, str) and len(value) > 10:
                # –°–æ–∫—Ä–∞—â–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ ID
                short_value = f"{value[:8]}..."
                card += f"üÜî <b>{key_formatted}:</b> <code>{short_value}</code>\n"
            elif isinstance(value, int | float) and value > 0:
                card += f"üìä <b>{key_formatted}:</b> {value}\n"
            elif isinstance(value, str) and value:
                card += f"‚ÑπÔ∏è <b>{key_formatted}:</b> {_escape_html(str(value))}\n"

    return card


def format_progress_card(current: int, total: int, operation: str) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∫–∞—Ä—Ç–æ—á–∫—É –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏.

    Args:
        current: –¢–µ–∫—É—â–∏–π —ç–ª–µ–º–µ–Ω—Ç
        total: –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        operation: –ù–∞–∑–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏

    Returns:
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è HTML —Å—Ç—Ä–æ–∫–∞ –¥–ª—è Telegram
    """
    percent = (current / total * 100) if total > 0 else 0

    # –ü—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä –∏–∑ —ç–º–æ–¥–∑–∏
    filled = int(percent / 10)
    progress_bar = "üü©" * filled + "‚¨ú" * (10 - filled)

    card = (
        f"‚è≥ <b>{operation}</b>\n\n"
        f"üìä <b>–ü—Ä–æ–≥—Ä–µ—Å—Å:</b> {current}/{total} ({percent:.0f}%)\n"
        f"{progress_bar}\n\n"
        f"‚è±Ô∏è <i>–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ...</i>"
    )

    return card


def format_adaptive_demo(sample_data: dict[str, Any]) -> dict[str, str]:
    """
    –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤.

    Args:
        sample_data: –ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –≤–µ—Ä—Å–∏—è–º–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    """
    result = {}

    for device in ["mobile", "tablet", "desktop"]:
        limits = DEVICE_LIMITS[device]
        formatted = format_meeting_card(sample_data, device_type=device)

        result[device] = (
            f"üì± <b>{device.title()} ({limits.title}x{limits.description}):</b>\n{formatted}"
        )

    return result


# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
__all__ = [
    "format_meeting_card",
    "format_commit_card",
    "format_review_card",
    "format_people_candidate_card",
    "format_tags_stats_card",
    "format_admin_command_response",
    "format_error_card",
    "format_success_card",
    "format_progress_card",
    "format_adaptive_demo",
    "DEVICE_LIMITS",
    "_get_adaptive_limits",
]


# CLI –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
if __name__ == "__main__":
    import sys

    if len(sys.argv) > 1 and sys.argv[1] == "demo":
        # –ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
        sample_meeting = {
            "title": "–§–∏–Ω–∞–Ω—Å–æ–≤–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –±—é–¥–∂–µ—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ Q4 2025 —Å –æ–±—Å—É–∂–¥–µ–Ω–∏–µ–º IFRS —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤",
            "date": "2025-09-23",
            "attendees": [
                "Valya Dobrynin",
                "Nodari Kezua",
                "Sergey Lompa",
                "Vlad Sklyanov",
                "Serezha Ustinenko",
                "Ivan Petrov",
            ],
            "tags": [
                "Finance/IFRS",
                "Finance/Budget",
                "Business/Market",
                "Topic/Planning",
                "People/Valya Dobrynin",
            ],
            "url": "https://notion.so/sample-meeting-12345",
        }

        sample_commit = {
            "text": "–ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º –∏ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—è–º –∑–∞ Q3 —Å –∞–Ω–∞–ª–∏–∑–æ–º –∫–æ–Ω–≤–µ—Ä—Å–∏–∏",
            "status": "open",
            "direction": "theirs",
            "assignees": ["Daniil Petrov", "Maria Sidorova"],
            "due_iso": "2025-10-15",
            "confidence": 0.85,
            "short_id": "abc123def456ghi789",
        }

        print("üé® –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Meet-Commit\n")

        print("üìÖ –í–°–¢–†–ï–ß–ê:")
        demo_results = format_adaptive_demo(sample_meeting)
        for _device, formatted in demo_results.items():
            print(f"\n{formatted}")

        print("\n" + "=" * 60 + "\n")

        print("üìù –ö–û–ú–ú–ò–¢:")
        for device in ["mobile", "tablet", "desktop"]:
            limits = DEVICE_LIMITS[device]
            formatted = format_commit_card(sample_commit, device_type=device)
            print(f"\nüì± <b>{device.title()} ({limits.description} chars):</b>")
            print(formatted)

        print("\n" + "=" * 60)
        print("üéØ –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –ª–∏–º–∏—Ç—ã:")
        for device, limits in DEVICE_LIMITS.items():
            print(
                f"‚Ä¢ {device.title()}: title={limits.title}, desc={limits.description}, attendees={limits.attendees}, tags={limits.tags}"
            )
    else:
        print("Usage: python -m app.bot.formatters demo")


def format_agenda_card(bundle, device_type: str = "mobile") -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–≤–µ—Å—Ç–∫–∏ –≤ –≤–∏–¥–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –¥–ª—è Telegram.

    Args:
        bundle: AgendaBundle —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–≤–µ—Å—Ç–∫–∏
        device_type: –¢–∏–ø —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –¥–ª—è –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

    Returns:
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ –ø–æ–≤–µ—Å—Ç–∫–∏ –≤ HTML
    """
    limits = DEVICE_LIMITS[device_type]

    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø–æ–≤–µ—Å—Ç–∫–∏
    context_emoji = {"Meeting": "üè¢", "Person": "üë§", "Tag": "üè∑Ô∏è"}.get(bundle.context_type, "üìã")
    title = f"{context_emoji} –ü–æ–≤–µ—Å—Ç–∫–∞ ‚Äî {bundle.context_type}"

    if bundle.context_type == "Person":
        person_name = bundle.context_key.replace("People/", "")
        title = f"üë§ –ü–æ–≤–µ—Å—Ç–∫–∞ ‚Äî {person_name}"
    elif bundle.context_type == "Tag":
        title = f"üè∑Ô∏è –ü–æ–≤–µ—Å—Ç–∫–∞ ‚Äî {bundle.context_key}"
    elif bundle.context_type == "Meeting":
        title = "üè¢ –ü–æ–≤–µ—Å—Ç–∫–∞ ‚Äî –í—Å—Ç—Ä–µ—á–∞"

    title = _truncate_text(title, limits.title)

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    stats = []
    if bundle.debts_mine:
        stats.append(f"üìã –ó–∞–∫–∞–∑—á–∏–∫: {len(bundle.debts_mine)}")
    if bundle.debts_theirs:
        stats.append(f"üì§ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {len(bundle.debts_theirs)}")
    if bundle.review_open:
        stats.append(f"‚ùì –í–æ–ø—Ä–æ—Å—ã: {len(bundle.review_open)}")
    if bundle.recent_done:
        stats.append(f"‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {len(bundle.recent_done)}")

    stats_line = " | ".join(stats) if stats else "üìã –ü—É—Å—Ç–æ"

    # –£–±–∏—Ä–∞–µ–º –Ω–µ–∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ —Å —Ç–µ–≥–∞–º–∏ –∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏
    tags_line = ""
    people_line = ""

    # –ü–æ–ª–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ (–±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π)
    content_preview = ""
    if bundle.summary_md:
        # –£–±–∏—Ä–∞–µ–º HTML —Ç–µ–≥–∏ –¥–ª—è –ø—Ä–µ–≤—å—é
        preview_text = bundle.summary_md.replace("<b>", "").replace("</b>", "")
        preview_text = preview_text.replace("<i>", "").replace("</i>", "")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
        content_preview = f"\n\n{preview_text}"

    # –î–∞—Ç–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    from datetime import datetime

    now = datetime.now(UTC).strftime("%d.%m %H:%M UTC")

    # –°–æ–±–∏—Ä–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É
    card = (
        f"<b>{title}</b>\n"
        f"üìä {stats_line}"
        f"{tags_line}"
        f"{people_line}"
        f"{content_preview}\n\n"
        f"üïí –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: {now}"
    )

    return card
