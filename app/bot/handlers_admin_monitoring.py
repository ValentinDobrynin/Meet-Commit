"""
–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏ –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏—è.

–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –§–∞–∑—ã 3: health checks, –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏,
–ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫—ç—à–µ–º.
"""

from __future__ import annotations

import logging

from aiogram import F, Router
from aiogram.types import Message

logger = logging.getLogger(__name__)
router = Router()


def _is_admin(message: Message) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."""
    from app.settings import settings

    if not message.from_user:
        return False
    return settings.is_admin(message.from_user.id)


@router.message(F.text == "/health")
async def health_check_handler(message: Message) -> None:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–Ω–µ—à–Ω–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤."""
    if not _is_admin(message):
        await message.answer("‚ùå –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
        return

    try:
        from app.core.health_checks import format_health_report, run_all_health_checks

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –Ω–∞—á–∞–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
        status_msg = await message.answer("üîç <b>–ü—Ä–æ–≤–µ—Ä—è—é —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–æ–≤...</b>")

        # –ó–∞–ø—É—Å–∫–∞–µ–º health checks
        health = await run_all_health_checks(timeout=15.0)

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        report = format_health_report(health)

        await status_msg.edit_text(
            f"üè• <b>Health Check Report</b>\\n\\n{report}", parse_mode="Markdown"
        )

        user_id = message.from_user.id if message.from_user else "unknown"
        logger.info(f"Admin {user_id} requested health check")

    except Exception as e:
        logger.error(f"Error in health_check_handler: {e}")
        await message.answer(f"‚ùå <b>–û—à–∏–±–∫–∞ health check</b>\\n\\n<code>{str(e)}</code>")


@router.message(F.text == "/performance")
async def performance_report_handler(message: Message) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—Ç—á–µ—Ç –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏."""
    if not _is_admin(message):
        await message.answer("‚ùå –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
        return

    try:
        from app.core.profiling import generate_performance_report

        report = generate_performance_report()

        await message.answer(
            f"üìä <b>–û—Ç—á–µ—Ç –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏</b>\\n\\n<pre>{report}</pre>", parse_mode="HTML"
        )

        user_id = message.from_user.id if message.from_user else "unknown"
        logger.info(f"Admin {user_id} requested performance report")

    except Exception as e:
        logger.error(f"Error in performance_report_handler: {e}")
        await message.answer(
            f"‚ùå <b>–û—à–∏–±–∫–∞ –æ—Ç—á–µ—Ç–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏</b>\\n\\n<code>{str(e)}</code>"
        )


@router.message(F.text == "/bottlenecks")
async def bottlenecks_handler(message: Message) -> None:
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —É–∑–∫–∏–µ –º–µ—Å—Ç–∞ –≤ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏."""
    if not _is_admin(message):
        await message.answer("‚ùå –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
        return

    try:
        from app.core.profiling import detect_bottlenecks

        bottlenecks = detect_bottlenecks(min_calls=5)

        lines = ["üéØ <b>–ê–Ω–∞–ª–∏–∑ —É–∑–∫–∏—Ö –º–µ—Å—Ç</b>\\n"]

        # –ú–µ–¥–ª–µ–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
        if bottlenecks["slow_operations"]:
            lines.append("üêå <b>–ú–µ–¥–ª–µ–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏:</b>")
            for op in bottlenecks["slow_operations"][:5]:
                severity_emoji = "üî¥" if op["severity"] == "critical" else "üü°"
                lines.append(
                    f"{severity_emoji} <code>{op['operation']}</code>: {op['avg_ms']:.1f}ms"
                )
            lines.append("")

        # –í—ã—Å–æ–∫–∞—è –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–æ—Å—Ç—å
        if bottlenecks["high_concurrency"]:
            lines.append("‚ö° <b>–í—ã—Å–æ–∫–∞—è –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–æ—Å—Ç—å:</b>")
            for op in bottlenecks["high_concurrency"][:3]:
                lines.append(
                    f"üî• <code>{op['operation']}</code>: –ø–∏–∫ {op['peak_concurrent']} –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ"
                )
            lines.append("")

        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        if bottlenecks["recommendations"]:
            lines.append("üí° <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b>")
            for i, rec in enumerate(bottlenecks["recommendations"], 1):
                lines.append(f"{i}. {rec}")

        if not any([bottlenecks["slow_operations"], bottlenecks["high_concurrency"]]):
            lines.append("‚úÖ <b>–£–∑–∫–∏—Ö –º–µ—Å—Ç –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ</b>")
            lines.append("–°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ")

        await message.answer("\\n".join(lines), parse_mode="HTML")

        user_id = message.from_user.id if message.from_user else "unknown"
        logger.info(f"Admin {user_id} requested bottlenecks analysis")

    except Exception as e:
        logger.error(f"Error in bottlenecks_handler: {e}")
        await message.answer(f"‚ùå <b>–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —É–∑–∫–∏—Ö –º–µ—Å—Ç</b>\\n\\n<code>{str(e)}</code>")


@router.message(F.text == "/cache_stats")
async def cache_stats_handler(message: Message) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è."""
    if not _is_admin(message):
        await message.answer("‚ùå –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
        return

    try:
        from app.core.clients import get_clients_info
        from app.core.query_optimizer import get_cache_stats

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–∞ –∑–∞–ø—Ä–æ—Å–æ–≤
        query_cache = get_cache_stats()

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤
        clients_info = get_clients_info()
        client_cache = clients_info["cache_info"]

        lines = [
            "üíæ <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è</b>\\n",
            "üîç <b>–ö—ç—à –∑–∞–ø—Ä–æ—Å–æ–≤:</b>",
            f"üìä –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {query_cache['total_entries']}",
            f"‚úÖ –í–∞–ª–∏–¥–Ω—ã—Ö: {query_cache['valid_entries']}",
            f"‚è∞ –£—Å—Ç–∞—Ä–µ–≤—à–∏—Ö: {query_cache['expired_entries']}",
            f"‚è±Ô∏è TTL: {query_cache['cache_ttl_seconds']}s",
            f"üíæ –ü–∞–º—è—Ç—å: ~{query_cache['memory_usage_estimate'] / 1024:.1f}KB\\n",
            "üîß <b>–ö—ç—à –∫–ª–∏–µ–Ω—Ç–æ–≤:</b>",
        ]

        for client_name, cache_info in client_cache.items():
            if hasattr(cache_info, "hits"):
                hit_rate = (
                    cache_info.hits / (cache_info.hits + cache_info.misses) * 100
                    if (cache_info.hits + cache_info.misses) > 0
                    else 0
                )
                lines.append(f"üìà {client_name}: {cache_info.hits} –ø–æ–ø–∞–¥–∞–Ω–∏–π ({hit_rate:.1f}%)")

        await message.answer("\\n".join(lines), parse_mode="HTML")

        user_id = message.from_user.id if message.from_user else "unknown"
        logger.info(f"Admin {user_id} requested cache stats")

    except Exception as e:
        logger.error(f"Error in cache_stats_handler: {e}")
        await message.answer(f"‚ùå <b>–û—à–∏–±–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫—ç—à–∞</b>\\n\\n<code>{str(e)}</code>")


@router.message(F.text.regexp(r"^/benchmark\\s+(\\w+)$"))
async def benchmark_handler(message: Message) -> None:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–µ–Ω—á–º–∞—Ä–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏."""
    if not _is_admin(message):
        await message.answer("‚ùå –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
        return

    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–∏–ø –±–µ–Ω—á–º–∞—Ä–∫–∞
        text = message.text or ""
        parts = text.split()
        if len(parts) < 2:
            await message.answer("‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ —Ç–∏–ø –±–µ–Ω—á–º–∞—Ä–∫–∞: <code>/benchmark commits</code>")
            return

        benchmark_type = parts[1].lower()

        status_msg = await message.answer(
            f"üèÉ <b>–ó–∞–ø—É—Å–∫–∞—é –±–µ–Ω—á–º–∞—Ä–∫: {benchmark_type}</b>\\n\\n‚è≥ –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å 10-30 —Å–µ–∫—É–Ω–¥..."
        )

        if benchmark_type == "commits":
            from app.core.llm_extract_commits import extract_commits
            from app.core.llm_extract_commits_async import extract_commits_async
            from app.core.profiling import benchmark_async_vs_sync

            # –ú–æ–∫ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –±–µ–Ω—á–º–∞—Ä–∫–∞
            async def mock_async():
                return await extract_commits_async("Test text", ["User"], "2025-09-26")

            def mock_sync():
                return extract_commits("Test text", ["User"], "2025-09-26")

            # –ó–∞–ø—É—Å–∫–∞–µ–º –±–µ–Ω—á–º–∞—Ä–∫ (—Å –º–æ–∫–∏–Ω–≥–æ–º –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏)
            from unittest.mock import patch

            with patch("app.core.llm_extract_commits.get_openai_client"):
                with patch("app.core.llm_extract_commits_async.get_async_openai_client"):
                    stats = await benchmark_async_vs_sync(
                        "commits_extraction", mock_async, mock_sync, iterations=5
                    )

            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            speedup = stats["comparison"]["speedup"]
            async_time = stats["async"]["duration_ms"]
            sync_time = stats["sync"]["duration_ms"]

            result_text = (
                f"üèÜ <b>–ë–µ–Ω—á–º–∞—Ä–∫: {benchmark_type}</b>\\n\\n"
                f"‚ö° Async: {async_time:.1f}ms\\n"
                f"üêå Sync: {sync_time:.1f}ms\\n"
                f"üöÄ –£—Å–∫–æ—Ä–µ–Ω–∏–µ: {speedup:.1f}x\\n\\n"
                f"{'‚úÖ Async –±—ã—Å—Ç—Ä–µ–µ' if speedup > 1 else '‚ö†Ô∏è Sync –±—ã—Å—Ç—Ä–µ–µ'}"
            )

        else:
            result_text = f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –±–µ–Ω—á–º–∞—Ä–∫–∞: {benchmark_type}\\n\\n–î–æ—Å—Ç—É–ø–Ω—ã–µ: commits"

        await status_msg.edit_text(result_text, parse_mode="HTML")

        user_id = message.from_user.id if message.from_user else "unknown"
        logger.info(f"Admin {user_id} ran benchmark: {benchmark_type}")

    except Exception as e:
        logger.error(f"Error in benchmark_handler: {e}")
        await message.answer(f"‚ùå <b>–û—à–∏–±–∫–∞ –±–µ–Ω—á–º–∞—Ä–∫–∞</b>\\n\\n<code>{str(e)}</code>")
