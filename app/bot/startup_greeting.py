"""–ú–æ–¥—É–ª—å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞."""

from __future__ import annotations

import asyncio
import logging
from typing import TYPE_CHECKING

if TYPE_CHECKING:
    from aiogram import Bot

from app.bot.user_storage import get_user_chat_ids, get_users_count

logger = logging.getLogger(__name__)

# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (—Ç–æ –∂–µ, —á—Ç–æ –≤ /start)
STARTUP_GREETING = (
    "ü§ñ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Meet-Commit!</b>\n\n"
    "üìã <b>–Ø –ø–æ–º–æ–≥—É –≤–∞–º:</b>\n"
    "‚Ä¢ üìù –°—É–º–º–∞—Ä–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤—Å—Ç—Ä–µ—á–∏ —á–µ—Ä–µ–∑ AI\n"
    "‚Ä¢ üéØ –ò–∑–≤–ª–µ—á—å –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞ –∏ –¥–µ–π—Å—Ç–≤–∏—è\n"
    "‚Ä¢ üìä –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—Å–µ –≤ Notion —Å —É–º–Ω–æ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–µ–π\n"
    "‚Ä¢ üîç –£–ø—Ä–∞–≤–ª—è—Ç—å –æ—á–µ—Ä–µ–¥—å—é –∑–∞–¥–∞—á –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É\n\n"
    "üìé <b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –≤—Å—Ç—Ä–µ—á–∏ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã</b>\n\n"
    "üéØ <b>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:</b>\n"
    "‚Ä¢ üìÑ –¢–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã (.txt)\n"
    "‚Ä¢ üìã PDF –¥–æ–∫—É–º–µ–Ω—Ç—ã (.pdf)\n"
    "‚Ä¢ üìù Word –¥–æ–∫—É–º–µ–Ω—Ç—ã (.docx)\n"
    "‚Ä¢ üì∫ –°—É–±—Ç–∏—Ç—Ä—ã (.vtt, .webvtt)\n\n"
    "üí° <i>–ü—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ—Ç–∞—â–∏—Ç–µ —Ñ–∞–π–ª –≤ —á–∞—Ç –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏—è</i>"
)


async def send_startup_greetings(bot: Bot) -> None:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º –∞–∫—Ç–∏–≤–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞.

    Args:
        bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    """
    try:
        chat_ids = get_user_chat_ids()
        users_count = get_users_count()

        if not chat_ids:
            logger.info("No active users found for startup greetings")
            return

        logger.info(f"Sending startup greetings to {users_count} active users")

        successful_sends = 0
        failed_sends = 0

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π –¥–ª—è —Å–æ–±–ª—é–¥–µ–Ω–∏—è rate limits
        for i, chat_id in enumerate(chat_ids):
            try:
                await bot.send_message(chat_id=chat_id, text=STARTUP_GREETING, parse_mode="HTML")
                successful_sends += 1
                logger.debug(f"Sent greeting to user {chat_id}")

                # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ (—Å–æ–±–ª—é–¥–µ–Ω–∏–µ rate limits)
                if i < len(chat_ids) - 1:  # –ù–µ –∂–¥–µ–º –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                    await asyncio.sleep(0.1)  # 100ms –∑–∞–¥–µ—Ä–∂–∫–∞

            except Exception as e:
                failed_sends += 1
                logger.warning(f"Failed to send greeting to user {chat_id}: {e}")

                # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞, –º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –µ–≥–æ –∏–∑ —Å–ø–∏—Å–∫–∞
                if "bot was blocked by the user" in str(e).lower():
                    from app.bot.user_storage import remove_user

                    remove_user(chat_id)
                    logger.info(f"Removed blocked user {chat_id} from active users")

        logger.info(f"Startup greetings completed: {successful_sends} sent, {failed_sends} failed")

    except Exception as e:
        logger.error(f"Error in send_startup_greetings: {e}")


async def send_startup_greetings_safe(bot: Bot) -> None:
    """
    –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –≤–µ—Ä—Å–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–π —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –≤—Å–µ—Ö –æ—à–∏–±–æ–∫.

    Args:
        bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    """
    try:
        await send_startup_greetings(bot)
    except Exception as e:
        logger.error(f"Critical error in startup greetings: {e}")
        # –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∏–∑-–∑–∞ –æ—à–∏–±–æ–∫ –≤ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è—Ö
