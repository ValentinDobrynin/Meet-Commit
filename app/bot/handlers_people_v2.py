"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è People Miner v2 - —É–ª—É—á—à–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–¥–∏–¥–∞—Ç–∞–º–∏.

–û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
- –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ —Å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π –∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
- –ë–∞—Ç—á-–æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
- –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ —Å–Ω–∏–ø–ø–µ—Ç—ã –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏–π
- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
- –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å–∏—Å—Ç–µ–º–æ–π –∞–¥–º–∏–Ω—Å–∫–∏—Ö –ø—Ä–∞–≤
"""

from __future__ import annotations

import logging
import re
from typing import Any

from aiogram import F, Router
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup, Message

from app.bot.states.people_states import PeopleStates
from app.core.people_detect import propose_name_en
from app.core.people_miner2 import (
    approve_batch,
    approve_candidate,
    get_candidate_stats,
    list_candidates,
    reject_batch,
    reject_candidate,
)
from app.settings import settings

logger = logging.getLogger(__name__)

router = Router()

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è UI
ITEMS_PER_PAGE = 1  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ –æ–¥–Ω–æ–º—É –∫–∞–Ω–¥–∏–¥–∞—Ç—É –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è
MAX_CONTEXT_LENGTH = 150  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –≤ –∫–∞—Ä—Ç–æ—á–∫–µ


def _is_admin(user_id: int | None) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."""
    return settings.is_admin(user_id)


def _format_candidate_card(item: dict[str, Any], page: int, total: int, sort: str) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∫–∞—Ä—Ç–æ—á–∫—É –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è."""
    alias = item["alias"]
    freq = item["freq"]
    meetings = item["meetings"]
    last_seen = item["last_seen"]
    score = item["score"]
    samples = item.get("samples", [])

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç (–±–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 —Å–Ω–∏–ø–ø–µ—Ç–∞)
    context_lines = []
    for sample in samples[-2:]:
        snippet = sample["snippet"]
        if len(snippet) > MAX_CONTEXT_LENGTH:
            snippet = snippet[:MAX_CONTEXT_LENGTH] + "‚Ä¶"
        context_lines.append(f"‚Ä¢ {sample['date']}: <i>{snippet}</i>")

    context_text = "\n".join(context_lines) if context_lines else "‚Äî"

    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –∫–∞–Ω–æ–Ω–∏—á–µ—Å–∫–æ–µ –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ –∏–º—è
    suggested_name = propose_name_en(alias)

    return (
        f"üë§ <b>–ö–∞–Ω–¥–∏–¥–∞—Ç: {alias}</b>\n\n"
        f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
        f"   üî¢ –ß–∞—Å—Ç–æ—Ç–∞: {freq}\n"
        f"   üìé –í—Å—Ç—Ä–µ—á: {meetings}\n"
        f"   üïí –ü–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–∑: {last_seen}\n"
        f"   ‚öñÔ∏è Score: {score:.2f}\n\n"
        f"üí° <b>–ü—Ä–µ–¥–ª–∞–≥–∞–µ–º–æ–µ –∏–º—è:</b> <code>{suggested_name}</code>\n\n"
        f"üß© <b>–ö–æ–Ω—Ç–µ–∫—Å—Ç:</b>\n{context_text}\n\n"
        f"üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page} –∏–∑ {(total + ITEMS_PER_PAGE - 1) // ITEMS_PER_PAGE} "
        f"| –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞: {'üìÖ –ø–æ –¥–∞—Ç–µ' if sort == 'date' else 'üìà –ø–æ —á–∞—Å—Ç–æ—Ç–µ'}"
    )


def _create_navigation_keyboard(
    alias: str, page: int, total: int, sort: str
) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏ –¥–µ–π—Å—Ç–≤–∏–π."""
    total_pages = (total + ITEMS_PER_PAGE - 1) // ITEMS_PER_PAGE

    # –û—Å–Ω–æ–≤–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
    action_row = [
        InlineKeyboardButton(text="‚úÖ –î–æ–±–∞–≤–∏—Ç—å", callback_data=f"pm2:add:{alias}:{page}:{sort}"),
        InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"pm2:rej:{alias}:{page}:{sort}"),
    ]

    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –∏–º–µ–Ω–∏
    custom_row = [
        InlineKeyboardButton(text="‚úèÔ∏è –°–≤–æ—ë –∏–º—è", callback_data=f"pm2:custom:{alias}:{page}:{sort}"),
    ]

    # –ù–∞–≤–∏–≥–∞—Ü–∏—è
    nav_buttons = []
    if page > 1:
        nav_buttons.append(
            InlineKeyboardButton(text="‚èÆÔ∏è –ù–∞–∑–∞–¥", callback_data=f"pm2:nav:{page-1}:{sort}")
        )
    if page < total_pages:
        nav_buttons.append(
            InlineKeyboardButton(text="‚è≠Ô∏è –í–ø–µ—Ä–µ–¥", callback_data=f"pm2:nav:{page+1}:{sort}")
        )

    # –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
    sort_text = "üìÖ –ü–æ –¥–∞—Ç–µ" if sort == "freq" else "üìà –ü–æ —á–∞—Å—Ç–æ—Ç–µ"
    new_sort = "date" if sort == "freq" else "freq"
    sort_button = InlineKeyboardButton(text=sort_text, callback_data=f"pm2:sort:{page}:{new_sort}")

    # –ë–∞—Ç—á-–æ–ø–µ—Ä–∞—Ü–∏–∏
    batch_row = [
        InlineKeyboardButton(text="üü© –ë–∞—Ç—á +5", callback_data=f"pm2:badd:5:{sort}"),
        InlineKeyboardButton(text="üü• –ë–∞—Ç—á ‚àí5", callback_data=f"pm2:brej:5:{sort}"),
    ]

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
    extra_row = [
        InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="pm2:stats"),
        InlineKeyboardButton(text="üö™ –í—ã—Ö–æ–¥", callback_data="pm2:exit"),
    ]

    keyboard = [action_row, custom_row]

    if nav_buttons:
        keyboard.append(nav_buttons)

    keyboard.extend([[sort_button], batch_row, extra_row])

    return InlineKeyboardMarkup(inline_keyboard=keyboard)


async def _show_candidate_page(
    message_or_callback: Message | CallbackQuery, page: int, sort: str, edit_message: bool = False
) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–º."""
    items, total = list_candidates(sort=sort, page=page, per_page=ITEMS_PER_PAGE)

    if not items:
        no_candidates_text = (
            "üß© <b>People Miner v2</b>\n\n"
            "‚ùå –ö–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ—Ç.\n\n"
            "üí° <i>–ö–∞–Ω–¥–∏–¥–∞—Ç—ã –ø–æ—è–≤–ª—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—Å—Ç—Ä–µ—á.</i>"
        )

        if edit_message and isinstance(message_or_callback, CallbackQuery):
            if message_or_callback.message and hasattr(message_or_callback.message, "edit_text"):
                await message_or_callback.message.edit_text(no_candidates_text)
        else:
            await message_or_callback.answer(no_candidates_text)
        return

    item = items[0]
    card_text = _format_candidate_card(item, page, total, sort)
    keyboard = _create_navigation_keyboard(item["alias"], page, total, sort)

    if edit_message and isinstance(message_or_callback, CallbackQuery):
        if message_or_callback.message and hasattr(message_or_callback.message, "edit_text"):
            await message_or_callback.message.edit_text(
                card_text, reply_markup=keyboard, parse_mode="HTML"
            )
    else:
        await message_or_callback.answer(card_text, reply_markup=keyboard, parse_mode="HTML")


@router.message(F.text.regexp(r"^/people_miner2(\s+(freq|date))?$"))
async def people_miner_v2_start(message: Message, state: FSMContext) -> None:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç People Miner v2."""
    if not _is_admin(message.from_user.id if message.from_user else None):
        await message.answer("‚ùå –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
        return

    # –ü–∞—Ä—Å–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    parts = (message.text or "").strip().split()
    sort = "freq"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é

    if len(parts) >= 2 and parts[1] in ("freq", "date"):
        sort = parts[1]

    await state.set_state(PeopleStates.v2_reviewing)
    await state.update_data(current_page=1, current_sort=sort)

    await _show_candidate_page(message, page=1, sort=sort)

    user_id = message.from_user.id if message.from_user else "unknown"
    logger.info(f"Started People Miner v2 for user {user_id} with sort={sort}")


@router.callback_query(F.data.startswith("pm2:"))
async def people_miner_v2_callback(callback: CallbackQuery, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ callback-–∏ People Miner v2."""
    if not _is_admin(callback.from_user.id if callback.from_user else None):
        await callback.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤")
        return

    data_parts = (callback.data or "").split(":")
    if len(data_parts) < 2:
        await callback.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
        return

    action = data_parts[1]

    try:
        if action == "nav":
            # –ù–∞–≤–∏–≥–∞—Ü–∏—è: pm2:nav:page:sort
            page, sort = int(data_parts[2]), data_parts[3]
            await state.update_data(current_page=page, current_sort=sort)
            await _show_candidate_page(callback, page, sort, edit_message=True)
            await callback.answer(f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page}")

        elif action == "sort":
            # –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏: pm2:sort:page:new_sort
            page, sort = int(data_parts[2]), data_parts[3]
            await state.update_data(current_page=page, current_sort=sort)
            await _show_candidate_page(callback, page, sort, edit_message=True)
            sort_name = "–ø–æ –¥–∞—Ç–µ" if sort == "date" else "–ø–æ —á–∞—Å—Ç–æ—Ç–µ"
            await callback.answer(f"–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞: {sort_name}")

        elif action == "add":
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞: pm2:add:alias:page:sort
            alias, page, sort = data_parts[2], int(data_parts[3]), data_parts[4]

            # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –∫–∞–Ω–æ–Ω–∏—á–µ—Å–∫–æ–µ –∏–º—è –∏ –¥–æ–±–∞–≤–ª—è–µ–º
            suggested_name = propose_name_en(alias)
            success = approve_candidate(alias, name_en=suggested_name)

            if success:
                await callback.answer(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω: {alias} ‚Üí {suggested_name}")
                logger.info(f"Approved candidate {alias} as {suggested_name}")

                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
                await _show_candidate_page(callback, page, sort, edit_message=True)
            else:
                await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏")

        elif action == "rej":
            # –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞: pm2:rej:alias:page:sort
            alias, page, sort = data_parts[2], int(data_parts[3]), data_parts[4]

            success = reject_candidate(alias)
            if success:
                await callback.answer(f"‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω: {alias}")
                logger.info(f"Rejected candidate {alias}")

                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
                await _show_candidate_page(callback, page, sort, edit_message=True)
            else:
                await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏")

        elif action == "badd":
            # –ë–∞—Ç—á –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ: pm2:badd:count:sort
            count, sort = int(data_parts[2]), data_parts[3]

            result = approve_batch(top_n=count, sort=sort)
            await callback.answer(f"üü© –ë–∞—Ç—á –¥–æ–±–∞–≤–ª–µ–Ω: {result['added']}/{result['selected']}")
            logger.info(f"Batch approved {result['added']}/{result['selected']} candidates")

            # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            await _show_candidate_page(callback, 1, sort, edit_message=True)

        elif action == "brej":
            # –ë–∞—Ç—á –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: pm2:brej:count:sort
            count, sort = int(data_parts[2]), data_parts[3]

            result = reject_batch(top_n=count, sort=sort)
            await callback.answer(f"üü• –ë–∞—Ç—á –æ—Ç–∫–ª–æ–Ω–µ–Ω: {result['removed']}/{result['selected']}")
            logger.info(f"Batch rejected {result['removed']}/{result['selected']} candidates")

            # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            await _show_candidate_page(callback, 1, sort, edit_message=True)

        elif action == "stats":
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            stats = get_candidate_stats()

            stats_text = (
                f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ People Miner v2</b>\n\n"
                f"üë• <b>–í—Å–µ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤:</b> {stats['total']}\n"
                f"üìà <b>–°—Ä–µ–¥–Ω—è—è —á–∞—Å—Ç–æ—Ç–∞:</b> {stats['avg_freq']:.1f}\n"
                f"üìé <b>–°—Ä–µ–¥–Ω–µ–µ –≤—Å—Ç—Ä–µ—á:</b> {stats['avg_meetings']:.1f}\n"
                f"üïí <b>–ù–µ–¥–∞–≤–Ω–∏—Ö:</b> {stats['recent_candidates']}\n\n"
                f"üìã <b>–ü–æ —á–∞—Å—Ç–æ—Ç–µ:</b>\n"
                f"   üî¥ –í—ã—Å–æ–∫–∞—è (–±–æ–ª—å—à–µ 5): {stats['freq_distribution']['high']}\n"
                f"   üü° –°—Ä–µ–¥–Ω—è—è (2-4): {stats['freq_distribution']['medium']}\n"
                f"   üü¢ –ù–∏–∑–∫–∞—è (–º–µ–Ω—å—à–µ 2): {stats['freq_distribution']['low']}"
            )

            if callback.message:
                await callback.message.answer(stats_text, parse_mode="HTML")
            await callback.answer("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∫–∞–∑–∞–Ω–∞")

        elif action == "custom":
            # –ó–∞–ø—Ä–æ—Å –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –∏–º–µ–Ω–∏: pm2:custom:alias:page:sort
            alias, page, sort = data_parts[2], int(data_parts[3]), data_parts[4]

            await state.update_data(pending_alias=alias, current_page=page, current_sort=sort)
            await state.set_state(PeopleStates.v2_waiting_custom_name)

            suggested_name = propose_name_en(alias)
            if callback.message:
                await callback.message.answer(
                    f"‚úèÔ∏è <b>–í–≤–æ–¥ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –∏–º–µ–Ω–∏</b>\n\n"
                    f"üë§ <b>–ö–∞–Ω–¥–∏–¥–∞—Ç:</b> {alias}\n"
                    f"üí° <b>–ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç—Å—è:</b> <code>{suggested_name}</code>\n\n"
                    f"‚úèÔ∏è <b>–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—ë –∫–∞–Ω–æ–Ω–∏—á–µ—Å–∫–æ–µ –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ –∏–º—è:</b>\n"
                    f"–ù–∞–ø—Ä–∏–º–µ—Ä: <code>John Smith</code>\n\n"
                    f"<i>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã –∏ –ø—Ä–æ–±–µ–ª—ã</i>",
                    parse_mode="HTML",
                )
            await callback.answer("–í–≤–µ–¥–∏—Ç–µ –∫–∞—Å—Ç–æ–º–Ω–æ–µ –∏–º—è")

        elif action == "exit":
            # –í—ã—Ö–æ–¥
            await state.set_state(PeopleStates.idle)
            if callback.message and hasattr(callback.message, "edit_text"):
                await callback.message.edit_text(
                    "üß© <b>People Miner v2</b>\n\n"
                    "üëã <b>–†–∞–±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞</b>\n\n"
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ <code>/people_miner2</code> –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞.",
                    parse_mode="HTML",
                )
            await callback.answer("–†–∞–±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

        else:
            await callback.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ")

    except (ValueError, IndexError) as e:
        logger.error(f"Error processing People Miner v2 callback: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã")
    except Exception as e:
        logger.exception(f"Unexpected error in People Miner v2: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


@router.message(F.text == "/people_stats_v2")
async def people_stats_v2_handler(message: Message) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É People Miner v2."""
    if not _is_admin(message.from_user.id if message.from_user else None):
        await message.answer("‚ùå –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
        return

    try:
        stats = get_candidate_stats()
        items, total = list_candidates(sort="freq", page=1, per_page=5)

        # –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        stats_text = (
            f"üìä <b>People Miner v2 - –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n"
            f"üë• <b>–ö–∞–Ω–¥–∏–¥–∞—Ç—ã:</b> {stats['total']}\n"
            f"üìà <b>–°—Ä–µ–¥–Ω—è—è —á–∞—Å—Ç–æ—Ç–∞:</b> {stats['avg_freq']:.1f}\n"
            f"üìé <b>–°—Ä–µ–¥–Ω–µ–µ –≤—Å—Ç—Ä–µ—á:</b> {stats['avg_meetings']:.1f}\n"
            f"üïí <b>–ù–µ–¥–∞–≤–Ω–∏–µ (‚â§3 –¥–Ω—è):</b> {stats['recent_candidates']}\n\n"
            f"üìã <b>–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —á–∞—Å—Ç–æ—Ç–µ:</b>\n"
            f"   üî¥ –í—ã—Å–æ–∫–∞—è (‚â•5): {stats['freq_distribution']['high']}\n"
            f"   üü° –°—Ä–µ–¥–Ω—è—è (2-4): {stats['freq_distribution']['medium']}\n"
            f"   üü¢ –ù–∏–∑–∫–∞—è (<2): {stats['freq_distribution']['low']}\n\n"
        )

        # –¢–æ–ø –∫–∞–Ω–¥–∏–¥–∞—Ç—ã
        if items:
            stats_text += f"üèÜ <b>–¢–æ–ø-{len(items)} –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤:</b>\n"
            for i, item in enumerate(items, 1):
                stats_text += (
                    f"{i}. <b>{item['alias']}</b> "
                    f"(freq: {item['freq']}, score: {item['score']:.1f})\n"
                )
        else:
            stats_text += "üèÜ <b>–ö–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –Ω–µ—Ç</b>"

        await message.answer(stats_text, parse_mode="HTML")

        user_id = message.from_user.id if message.from_user else "unknown"
        logger.info(f"People Miner v2 stats requested by user {user_id}")

    except Exception as e:
        logger.exception(f"Error in people_stats_v2_handler: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")


@router.message(PeopleStates.v2_waiting_custom_name)
async def handle_custom_name_input(message: Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –∏–º–µ–Ω–∏ –¥–ª—è –∫–∞–Ω–¥–∏–¥–∞—Ç–∞."""
    if not _is_admin(message.from_user.id if message.from_user else None):
        await message.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤")
        await state.clear()
        return

    data = await state.get_data()
    pending_alias = data.get("pending_alias")
    page = data.get("current_page", 1)
    sort = data.get("current_sort", "freq")
    custom_name = (message.text or "").strip()

    if not pending_alias:
        await message.answer(
            "‚ùå <b>–û—à–∏–±–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è</b>\n\n"
            "–î–∞–Ω–Ω—ã–µ –æ –∫–∞–Ω–¥–∏–¥–∞—Ç–µ –ø–æ—Ç–µ—Ä—è–Ω—ã. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å <code>/people_miner2</code>",
            parse_mode="HTML",
        )
        await state.clear()
        return

    # –í–∞–ª–∏–¥–∞—Ü–∏—è –∏–º–µ–Ω–∏
    if not custom_name or not re.match(r"^[A-Za-z\s\-'\.]+$", custom_name):
        await message.answer(
            "‚ùå <b>–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è</b>\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã, –ø—Ä–æ–±–µ–ª—ã, –¥–µ—Ñ–∏—Å—ã –∏ –∞–ø–æ—Å—Ç—Ä–æ—Ñ—ã.\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: <code>John Smith</code> –∏–ª–∏ <code>Mary-Jane O'Connor</code>\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
            parse_mode="HTML",
        )
        return

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º –∏–º–µ–Ω–µ–º
    success = approve_candidate(pending_alias, name_en=custom_name)

    if success:
        await message.answer(
            f"‚úÖ <b>–ö–∞–Ω–¥–∏–¥–∞—Ç –¥–æ–±–∞–≤–ª–µ–Ω —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º –∏–º–µ–Ω–µ–º</b>\n\n"
            f"üë§ <b>–ê–ª–∏–∞—Å:</b> {pending_alias}\n"
            f"üè∑Ô∏è <b>–ö–∞–Ω–æ–Ω–∏—á–µ—Å–∫–æ–µ –∏–º—è:</b> {custom_name}\n"
            f"üìä <b>–¢–µ–≥:</b> <code>People/{custom_name}</code>\n\n"
            f"–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤...",
            parse_mode="HTML",
        )
        logger.info(f"Approved candidate {pending_alias} with custom name {custom_name}")
    else:
        await message.answer(
            "‚ùå <b>–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è</b>\n\n" "–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–¥–∏–¥–∞—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            parse_mode="HTML",
        )

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
    await state.set_state(PeopleStates.v2_reviewing)
    await _show_candidate_page(message, page, sort)


@router.message(F.text == "/people_clear_v2")
async def people_clear_v2_handler(message: Message) -> None:
    """–û—á–∏—â–∞–µ—Ç –≤—Å–µ—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)."""
    if not _is_admin(message.from_user.id if message.from_user else None):
        await message.answer("‚ùå –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
        return

    try:
        from app.core.people_miner2 import clear_candidates

        clear_candidates()
        await message.answer(
            "üßπ <b>–ö–∞–Ω–¥–∏–¥–∞—Ç—ã –æ—á–∏—â–µ–Ω—ã</b>\n\n"
            "–í—Å–µ –∫–∞–Ω–¥–∏–¥–∞—Ç—ã —É–¥–∞–ª–µ–Ω—ã –∏–∑ —Å–∏—Å—Ç–µ–º—ã.\n"
            "–ù–æ–≤—ã–µ –∫–∞–Ω–¥–∏–¥–∞—Ç—ã –±—É–¥—É—Ç —Å–æ–±–∏—Ä–∞—Ç—å—Å—è –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—Å—Ç—Ä–µ—á."
        )

        user_id = message.from_user.id if message.from_user else "unknown"
        logger.info(f"People Miner v2 candidates cleared by user {user_id}")

    except Exception as e:
        logger.exception(f"Error in people_clear_v2_handler: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤")
