"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –ø–æ–≤–µ—Å—Ç–æ–∫.

–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã:
- /agenda - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –ø–æ–≤–µ—Å—Ç–∫–∏
- /agenda_meeting <meeting_id> - –ø–æ–≤–µ—Å—Ç–∫–∞ –ø–æ –≤—Å—Ç—Ä–µ—á–µ
- /agenda_person <name> - –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –ø–æ–≤–µ—Å—Ç–∫–∞
- /agenda_tag <tag> - —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø–æ–≤–µ—Å—Ç–∫–∞

–ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω —Å —Å–∏—Å—Ç–µ–º–æ–π —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ Notion Agendas.
"""

from __future__ import annotations

import logging

from aiogram import F, Router
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup, Message

from app.bot.formatters import format_agenda_card
from app.core import agenda_builder

logger = logging.getLogger(__name__)
router = Router()


class AgendaStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è FSM –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–≤–µ—Å—Ç–∫–∞–º–∏."""

    waiting_meeting_id = State()
    waiting_person_name = State()
    waiting_tag_name = State()


def _build_main_menu_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –ø–æ–≤–µ—Å—Ç–æ–∫."""
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="üè¢ –ü–æ –≤—Å—Ç—Ä–µ—á–µ", callback_data="agenda:type:meeting"),
                InlineKeyboardButton(text="üë§ –ü–æ —á–µ–ª–æ–≤–µ–∫—É", callback_data="agenda:type:person"),
            ],
            [
                InlineKeyboardButton(text="üè∑Ô∏è –ü–æ —Ç–µ–≥—É", callback_data="agenda:type:tag"),
                InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="agenda:cancel"),
            ],
        ]
    )


def _build_people_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤—ã–±–æ—Ä–∞ –ª—é–¥–µ–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ Commits."""
    from app.core.people_activity import get_top_people_by_activity

    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø –ª—é–¥–µ–π –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (3-8 –∞–¥–∞–ø—Ç–∏–≤–Ω–æ)
        top_people = get_top_people_by_activity(min_count=3, max_count=8, min_score=1.0)

        logger.info(f"Building people keyboard with {len(top_people)} top people")

        buttons = []

        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ø –ª—é–¥–µ–π (–ø–æ 2 –≤ —Ä—è–¥ –¥–ª—è –∫–æ–º–ø–∞–∫—Ç–Ω–æ—Å—Ç–∏)
        for i in range(0, len(top_people), 2):
            row = []
            for j in range(i, min(i + 2, len(top_people))):
                person = top_people[j]
                row.append(
                    InlineKeyboardButton(
                        text=f"üë§ {person}", callback_data=f"agenda:person:{person}"
                    )
                )
            if row:
                buttons.append(row)

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "Other people" –µ—Å–ª–∏ –µ—Å—Ç—å –µ—â–µ –ª—é–¥–∏
        from app.core.people_activity import get_other_people

        other_people = get_other_people(exclude_top=top_people)

        if other_people:
            buttons.append(
                [
                    InlineKeyboardButton(
                        text="üë• Other people...", callback_data="agenda:people:other"
                    )
                ]
            )

        # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞
        buttons.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="agenda:back")])

        return InlineKeyboardMarkup(inline_keyboard=buttons)

    except Exception as e:
        logger.error(f"Error building people keyboard: {e}")
        # Fallback - –ø—Ä–æ—Å—Ç–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
        return _build_fallback_people_keyboard()


def _build_fallback_people_keyboard() -> InlineKeyboardMarkup:
    """Fallback –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ª—é–¥–µ–π –µ—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏."""
    from app.core.people_activity import get_fallback_top_people

    fallback_people = get_fallback_top_people()
    buttons = []

    # –î–æ–±–∞–≤–ª—è–µ–º fallback –ª—é–¥–µ–π
    for person in fallback_people:
        buttons.append(
            [InlineKeyboardButton(text=f"üë§ {person}", callback_data=f"agenda:person:{person}")]
        )

    # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞
    buttons.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="agenda:back")])

    return InlineKeyboardMarkup(inline_keyboard=buttons)


def _build_tags_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ç–µ–≥–æ–≤."""
    # –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç–µ–≥–∏ - –º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∏–ª–∏ –∑–∞–≥—Ä—É–∂–∞—Ç—å –∏–∑ —Ñ–∞–π–ª–∞
    popular_tags = [
        "Finance/IFRS",
        "Business/Lavka",
        "Projects/Mobile App",
        "Topic/Meeting",
        "Topic/Planning",
    ]

    buttons = []
    for tag in popular_tags:
        buttons.append([InlineKeyboardButton(text=f"üè∑Ô∏è {tag}", callback_data=f"agenda:tag:{tag}")])

    buttons.extend(
        [
            [InlineKeyboardButton(text="‚úçÔ∏è –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é", callback_data="agenda:tag:manual")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="agenda:back")],
        ]
    )

    return InlineKeyboardMarkup(inline_keyboard=buttons)


def _build_agenda_keyboard(bundle: agenda_builder.AgendaBundle) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≥–æ—Ç–æ–≤–æ–π –ø–æ–≤–µ—Å—Ç–∫–∏."""
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="üì§ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ Notion",
                    callback_data=f"agenda:save:{bundle.context_type}:{bundle.raw_hash[:8]}",
                ),
            ],
            [
                InlineKeyboardButton(
                    text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å",
                    callback_data=f"agenda:refresh:{bundle.context_type}:{bundle.context_key}",
                ),
            ],
            [
                InlineKeyboardButton(text="üîô –ù–æ–≤–∞—è –ø–æ–≤–µ—Å—Ç–∫–∞", callback_data="agenda:new"),
            ],
        ]
    )


@router.message(Command("agenda"))
async def cmd_agenda_menu(message: Message, state: FSMContext) -> None:
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å–∏—Å—Ç–µ–º—ã –ø–æ–≤–µ—Å—Ç–æ–∫."""
    await state.clear()

    help_text = (
        "üìã <b>–°–∏—Å—Ç–µ–º–∞ –ø–æ–≤–µ—Å—Ç–æ–∫</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–≤–µ—Å—Ç–∫–∏:\n\n"
        "üè¢ <b>–ü–æ –≤—Å—Ç—Ä–µ—á–µ</b> - –≤—Å–µ –∫–æ–º–º–∏—Ç—ã –∏ –≤–æ–ø—Ä–æ—Å—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –≤—Å—Ç—Ä–µ—á–∏\n"
        "üë§ <b>–ü–æ —á–µ–ª–æ–≤–µ–∫—É</b> - –≤–∑–∞–∏–º–Ω—ã–µ –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞ —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º —á–µ–ª–æ–≤–µ–∫–æ–º\n"
        "üè∑Ô∏è <b>–ü–æ —Ç–µ–≥—É</b> - –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ –ø–æ —Ç–µ–º–∞—Ç–∏–∫–µ\n\n"
        "üí° <i>–ü–æ–≤–µ—Å—Ç–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ Notion —Å —Å–≤—è–∑—è–º–∏ –Ω–∞ –∫–æ–º–º–∏—Ç—ã</i>"
    )

    await message.answer(help_text, parse_mode="HTML", reply_markup=_build_main_menu_keyboard())


@router.message(Command("agenda_meeting"))
async def cmd_agenda_meeting_direct(message: Message) -> None:
    """–ü—Ä—è–º–∞—è –∫–æ–º–∞–Ω–¥–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–≤–µ—Å—Ç–∫–∏ –ø–æ –≤—Å—Ç—Ä–µ—á–µ."""
    parts = (message.text or "").split(maxsplit=1)
    if len(parts) < 2:
        await message.answer(
            "‚ùì –£–∫–∞–∂–∏—Ç–µ ID –≤—Å—Ç—Ä–µ—á–∏:\n"
            "<code>/agenda_meeting 277344c5-6766-8198-af51-e25b82569c9e</code>",
            parse_mode="HTML",
        )
        return

    meeting_id = parts[1].strip()
    await _generate_meeting_agenda(message, meeting_id)


@router.message(Command("agenda_person"))
async def cmd_agenda_person_direct(message: Message) -> None:
    """–ü—Ä—è–º–∞—è –∫–æ–º–∞–Ω–¥–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–π –ø–æ–≤–µ—Å—Ç–∫–∏."""
    parts = (message.text or "").split(maxsplit=1)
    if len(parts) < 2:
        await message.answer(
            "‚ùì –£–∫–∞–∂–∏—Ç–µ –∏–º—è —á–µ–ª–æ–≤–µ–∫–∞:\n" "<code>/agenda_person Sasha Katanov</code>",
            parse_mode="HTML",
        )
        return

    person_name = parts[1].strip()
    await _generate_person_agenda(message, person_name)


@router.message(Command("agenda_tag"))
async def cmd_agenda_tag_direct(message: Message) -> None:
    """–ü—Ä—è–º–∞—è –∫–æ–º–∞–Ω–¥–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø–æ–≤–µ—Å—Ç–∫–∏."""
    parts = (message.text or "").split(maxsplit=1)
    if len(parts) < 2:
        await message.answer(
            "‚ùì –£–∫–∞–∂–∏—Ç–µ —Ç–µ–≥:\n" "<code>/agenda_tag Finance/IFRS</code>", parse_mode="HTML"
        )
        return

    tag = parts[1].strip()
    await _generate_tag_agenda(message, tag)


@router.callback_query(F.data == "agenda:type:meeting")
async def callback_agenda_meeting(callback: CallbackQuery, state: FSMContext) -> None:
    """–í—ã–±–æ—Ä –ø–æ–≤–µ—Å—Ç–∫–∏ –ø–æ –≤—Å—Ç—Ä–µ—á–µ."""
    await state.set_state(AgendaStates.waiting_meeting_id)

    await callback.message.edit_text(  # type: ignore[union-attr]
        "üè¢ <b>–ü–æ–≤–µ—Å—Ç–∫–∞ –ø–æ –≤—Å—Ç—Ä–µ—á–µ</b>\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –≤—Å—Ç—Ä–µ—á–∏ (–º–æ–∂–Ω–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∏–∑ Notion URL):\n"
        "<code>277344c5-6766-8198-af51-e25b82569c9e</code>\n\n"
        "üí° <i>–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã</i>",
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="agenda:back")]]
        ),
    )
    await callback.answer()


@router.callback_query(F.data == "agenda:type:person")
async def callback_agenda_person(callback: CallbackQuery, state: FSMContext) -> None:
    """–í—ã–±–æ—Ä –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–π –ø–æ–≤–µ—Å—Ç–∫–∏."""
    await state.clear()

    await callback.message.edit_text(  # type: ignore[union-attr]
        "üë§ <b>–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –ø–æ–≤–µ—Å—Ç–∫–∞</b>\n\n" "–í—ã–±–µ—Ä–∏—Ç–µ —á–µ–ª–æ–≤–µ–∫–∞ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∏–º—è –≤—Ä—É—á–Ω—É—é:",
        parse_mode="HTML",
        reply_markup=_build_people_keyboard(),
    )
    await callback.answer()


@router.callback_query(F.data == "agenda:type:tag")
async def callback_agenda_tag(callback: CallbackQuery, state: FSMContext) -> None:
    """–í—ã–±–æ—Ä —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø–æ–≤–µ—Å—Ç–∫–∏."""
    await state.clear()

    await callback.message.edit_text(  # type: ignore[union-attr]
        "üè∑Ô∏è <b>–¢–µ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø–æ–≤–µ—Å—Ç–∫–∞</b>\n\n" "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–≥ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –≤—Ä—É—á–Ω—É—é:",
        parse_mode="HTML",
        reply_markup=_build_tags_keyboard(),
    )
    await callback.answer()


@router.callback_query(F.data.startswith("agenda:person:"))
async def callback_person_selected(callback: CallbackQuery) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —á–µ–ª–æ–≤–µ–∫–∞."""
    callback_data = callback.data or ""
    person_data = callback_data.split(":", 2)[2]

    # –£–±—Ä–∞–ª–∏ —Ä—É—á–Ω–æ–π –≤–≤–æ–¥ - —Ç–µ–ø–µ—Ä—å —Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫–∏
    if person_data == "manual":
        await callback.answer(
            "‚ùå –†—É—á–Ω–æ–π –≤–≤–æ–¥ –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω. –í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞.", show_alert=True
        )
        return

    await _generate_person_agenda(callback.message, person_data)  # type: ignore[arg-type]
    await callback.answer()


@router.callback_query(F.data == "agenda:people:other")
async def callback_show_other_people(callback: CallbackQuery) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥—Ä—É–≥–∏—Ö –ª—é–¥–µ–π (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ 1)."""
    await _show_other_people_page(callback, page=0)


@router.callback_query(F.data.startswith("agenda:people:other:page:"))
async def callback_other_people_page(callback: CallbackQuery) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥—Ä—É–≥–∏—Ö –ª—é–¥–µ–π."""
    try:
        page = int((callback.data or "").split(":")[-1])
        await _show_other_people_page(callback, page=page)
    except (ValueError, IndexError):
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –≤ –Ω–æ–º–µ—Ä–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã", show_alert=True)


async def _show_other_people_page(callback: CallbackQuery, page: int = 0) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥—Ä—É–≥–∏—Ö –ª—é–¥–µ–π."""
    try:
        from app.core.people_activity import get_other_people, get_top_people_by_activity

        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø –ª—é–¥–µ–π –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è
        top_people = get_top_people_by_activity()
        other_people = get_other_people(exclude_top=top_people)

        if not other_people:
            await callback.answer("‚ùå –ù–µ—Ç –¥—Ä—É–≥–∏—Ö –ª—é–¥–µ–π —Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é", show_alert=True)
            return

        # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
        per_page = 8
        total_pages = (len(other_people) + per_page - 1) // per_page
        page = max(0, min(page, total_pages - 1))  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω

        start_idx = page * per_page
        end_idx = start_idx + per_page
        page_people = other_people[start_idx:end_idx]

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        buttons = []

        # –î–æ–±–∞–≤–ª—è–µ–º –ª—é–¥–µ–π —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–ø–æ 2 –≤ —Ä—è–¥)
        for i in range(0, len(page_people), 2):
            row = []
            for j in range(i, min(i + 2, len(page_people))):
                person = page_people[j]
                row.append(
                    InlineKeyboardButton(
                        text=f"üë§ {person}", callback_data=f"agenda:person:{person}"
                    )
                )
            if row:
                buttons.append(row)

        # –ù–∞–≤–∏–≥–∞—Ü–∏—è
        nav_row = []
        if page > 0:
            nav_row.append(
                InlineKeyboardButton(
                    text="‚Üê –ù–∞–∑–∞–¥", callback_data=f"agenda:people:other:page:{page-1}"
                )
            )

        nav_row.append(InlineKeyboardButton(text=f"{page+1}/{total_pages}", callback_data="noop"))

        if page < total_pages - 1:
            nav_row.append(
                InlineKeyboardButton(
                    text="–í–ø–µ—Ä–µ–¥ ‚Üí", callback_data=f"agenda:people:other:page:{page+1}"
                )
            )

        buttons.append(nav_row)

        # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Ç–æ–ø—É
        buttons.append([InlineKeyboardButton(text="üîô –ö —Ç–æ–ø—É", callback_data="agenda:type:person")])

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        text = (
            f"üë• <b>Other people</b> (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page+1}/{total_pages})\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ —á–µ–ª–æ–≤–µ–∫–∞ –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–π –ø–æ–≤–µ—Å—Ç–∫–∏:\n"
            f"<i>–ü–æ–∫–∞–∑–∞–Ω–æ {len(page_people)} –∏–∑ {len(other_people)} –ª—é–¥–µ–π</i>"
        )

        await callback.message.edit_text(  # type: ignore[union-attr]
            text, parse_mode="HTML", reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons)
        )
        await callback.answer()

    except Exception as e:
        logger.error(f"Error showing other people page {page}: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ –ª—é–¥–µ–π", show_alert=True)


@router.callback_query(F.data == "noop")
async def callback_noop(callback: CallbackQuery) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫ (–∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã —Å—Ç—Ä–∞–Ω–∏—Ü)."""
    await callback.answer()


@router.callback_query(F.data.startswith("agenda:tag:"))
async def callback_tag_selected(callback: CallbackQuery) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–µ–≥–∞."""
    callback_data = callback.data or ""
    tag_data = callback_data.split(":", 2)[2]

    if tag_data == "manual":
        await callback.message.edit_text(  # type: ignore[union-attr]
            "üè∑Ô∏è <b>–¢–µ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø–æ–≤–µ—Å—Ç–∫–∞</b>\n\n"
            "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–≥ –≤ –∫–∞–Ω–æ–Ω–∏—á–µ—Å–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "<code>Finance/IFRS</code>\n"
            "<code>Business/Lavka</code>\n\n"
            "üí° <i>–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã</i>",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="agenda:type:tag")]
                ]
            ),
        )
        await callback.answer()
        return

    await _generate_tag_agenda(callback.message, tag_data)  # type: ignore[arg-type]
    await callback.answer()


@router.callback_query(F.data == "agenda:back")
async def callback_agenda_back(callback: CallbackQuery, state: FSMContext) -> None:
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é –ø–æ–≤–µ—Å—Ç–æ–∫."""
    await state.clear()

    help_text = (
        "üìã <b>–°–∏—Å—Ç–µ–º–∞ –ø–æ–≤–µ—Å—Ç–æ–∫</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–≤–µ—Å—Ç–∫–∏:\n\n"
        "üè¢ <b>–ü–æ –≤—Å—Ç—Ä–µ—á–µ</b> - –≤—Å–µ –∫–æ–º–º–∏—Ç—ã –∏ –≤–æ–ø—Ä–æ—Å—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –≤—Å—Ç—Ä–µ—á–∏\n"
        "üë§ <b>–ü–æ —á–µ–ª–æ–≤–µ–∫—É</b> - –≤–∑–∞–∏–º–Ω—ã–µ –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞ —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º —á–µ–ª–æ–≤–µ–∫–æ–º\n"
        "üè∑Ô∏è <b>–ü–æ —Ç–µ–≥—É</b> - –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ –ø–æ —Ç–µ–º–∞—Ç–∏–∫–µ"
    )

    await callback.message.edit_text(  # type: ignore[union-attr]
        help_text, parse_mode="HTML", reply_markup=_build_main_menu_keyboard()
    )
    await callback.answer()


@router.callback_query(F.data == "agenda:cancel")
async def callback_agenda_cancel(callback: CallbackQuery, state: FSMContext) -> None:
    """–û—Ç–º–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–≤–µ—Å—Ç–∫–∏."""
    await state.clear()

    await callback.message.edit_text(  # type: ignore[union-attr]
        "‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–≤–µ—Å—Ç–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ"
    )
    await callback.answer()


@router.callback_query(F.data == "agenda:new")
async def callback_agenda_new(callback: CallbackQuery, state: FSMContext) -> None:
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –ø–æ–≤–µ—Å—Ç–∫–∏."""
    await state.clear()

    help_text = (
        "üìã <b>–°–∏—Å—Ç–µ–º–∞ –ø–æ–≤–µ—Å—Ç–æ–∫</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–≤–µ—Å—Ç–∫–∏:\n\n"
        "üè¢ <b>–ü–æ –≤—Å—Ç—Ä–µ—á–µ</b> - –≤—Å–µ –∫–æ–º–º–∏—Ç—ã –∏ –≤–æ–ø—Ä–æ—Å—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –≤—Å—Ç—Ä–µ—á–∏\n"
        "üë§ <b>–ü–æ —á–µ–ª–æ–≤–µ–∫—É</b> - –≤–∑–∞–∏–º–Ω—ã–µ –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞ —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º —á–µ–ª–æ–≤–µ–∫–æ–º\n"
        "üè∑Ô∏è <b>–ü–æ —Ç–µ–≥—É</b> - –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ –ø–æ —Ç–µ–º–∞—Ç–∏–∫–µ"
    )

    await callback.message.edit_text(  # type: ignore[union-attr]
        help_text, parse_mode="HTML", reply_markup=_build_main_menu_keyboard()
    )
    await callback.answer()


@router.callback_query(F.data.startswith("agenda:save:"))
async def callback_save_agenda(callback: CallbackQuery) -> None:
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–≤–µ—Å—Ç–∫–∏ –≤ Notion."""
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback_data
        callback_data = callback.data or ""
        parts = callback_data.split(":")
        _context_type = parts[2]  # –ü–æ–∫–∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
        _hash_short = parts[3]  # –ü–æ–∫–∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è

        # –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å bundle –∏–∑ –∫—ç—à–∞ –∏–ª–∏ –ø–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å
        # –ü–æ–∫–∞ —á—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
        await callback.answer("üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ Notion...")

        await callback.message.answer(  # type: ignore[union-attr]
            "‚úÖ –ü–æ–≤–µ—Å—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ Notion!\n\n"
            "üîó –°—Å—ã–ª–∫–∞ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ—Å–ª–µ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è"
        )

    except Exception as e:
        logger.error(f"Error saving agenda: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏", show_alert=True)


@router.callback_query(F.data.startswith("agenda:refresh:"))
async def callback_refresh_agenda(callback: CallbackQuery) -> None:
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–≤–µ—Å—Ç–∫–∏."""
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback_data
        callback_data = callback.data or ""
        parts = callback_data.split(":", 3)
        context_type = parts[2]
        context_key = parts[3]

        await callback.answer("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–≤–µ—Å—Ç–∫–∏...")

        if context_type == "Meeting":
            await _generate_meeting_agenda(callback.message, context_key)  # type: ignore[arg-type]
        elif context_type == "Person":
            person_name = context_key.replace("People/", "")
            await _generate_person_agenda(callback.message, person_name)  # type: ignore[arg-type]
        elif context_type == "Tag":
            await _generate_tag_agenda(callback.message, context_key)  # type: ignore[arg-type]

    except Exception as e:
        logger.error(f"Error refreshing agenda: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏", show_alert=True)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏—è—Ö FSM


@router.message(AgendaStates.waiting_meeting_id, F.text)
async def handle_meeting_id_input(message: Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ ID –≤—Å—Ç—Ä–µ—á–∏."""
    await state.clear()

    meeting_id = message.text.strip() if message.text else ""
    if not meeting_id:
        await message.answer("‚ùå ID –≤—Å—Ç—Ä–µ—á–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
        return

    await _generate_meeting_agenda(message, meeting_id)


@router.message(AgendaStates.waiting_person_name, F.text)
async def handle_person_name_input(message: Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ —á–µ–ª–æ–≤–µ–∫–∞."""
    user_id = message.from_user.id if message.from_user else "unknown"
    logger.info(
        f"Agenda FSM: User {user_id} entered person name: '{message.text}' in state waiting_person_name"
    )

    await state.clear()

    person_name = message.text.strip() if message.text else ""
    if not person_name:
        await message.answer("‚ùå –ò–º—è —á–µ–ª–æ–≤–µ–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
        return

    await _generate_person_agenda(message, person_name)


@router.message(AgendaStates.waiting_tag_name, F.text)
async def handle_tag_name_input(message: Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ç–µ–≥–∞."""
    await state.clear()

    tag = message.text.strip() if message.text else ""
    if not tag:
        await message.answer("‚ùå –¢–µ–≥ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
        return

    await _generate_tag_agenda(message, tag)


# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ–≤–µ—Å—Ç–æ–∫


async def _generate_meeting_agenda(message: Message, meeting_id: str) -> None:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–≤–µ—Å—Ç–∫–∏ –ø–æ –≤—Å—Ç—Ä–µ—á–µ."""
    try:
        bundle = agenda_builder.build_for_meeting(meeting_id)

        card_text = format_agenda_card(bundle, device_type="mobile")
        keyboard = _build_agenda_keyboard(bundle)

        await message.answer(card_text, parse_mode="HTML", reply_markup=keyboard)

    except Exception as e:
        logger.error(f"Error generating meeting agenda for {meeting_id}: {e}")
        await message.answer(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–≤–µ—Å—Ç–∫–∏ –¥–ª—è –≤—Å—Ç—Ä–µ—á–∏\n\n"
            f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å ID –≤—Å—Ç—Ä–µ—á–∏:\n"
            f"<code>{meeting_id}</code>",
            parse_mode="HTML",
        )


async def _generate_person_agenda(message: Message, person_name: str) -> None:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–π –ø–æ–≤–µ—Å—Ç–∫–∏."""
    try:
        bundle = agenda_builder.build_for_person(person_name)

        card_text = format_agenda_card(bundle, device_type="mobile")
        keyboard = _build_agenda_keyboard(bundle)

        await message.answer(card_text, parse_mode="HTML", reply_markup=keyboard)

    except Exception as e:
        logger.error(f"Error generating person agenda for {person_name}: {e}")
        await message.answer(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–π –ø–æ–≤–µ—Å—Ç–∫–∏\n\n"
            f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∏–º–µ–Ω–∏:\n"
            f"<code>{person_name}</code>",
            parse_mode="HTML",
        )


async def _generate_tag_agenda(message: Message, tag: str) -> None:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø–æ–≤–µ—Å—Ç–∫–∏."""
    try:
        bundle = agenda_builder.build_for_tag(tag)

        card_text = format_agenda_card(bundle, device_type="mobile")
        keyboard = _build_agenda_keyboard(bundle)

        await message.answer(card_text, parse_mode="HTML", reply_markup=keyboard)

    except Exception as e:
        logger.error(f"Error generating tag agenda for {tag}: {e}")
        await message.answer(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø–æ–≤–µ—Å—Ç–∫–∏\n\n"
            f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ç–µ–≥–∞:\n"
            f"<code>{tag}</code>",
            parse_mode="HTML",
        )
