"""–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä—è–º—ã—Ö –∫–æ–º–º–∏—Ç–æ–≤ –±–µ–∑ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞ –≤—Å—Ç—Ä–µ—á–∏."""

from __future__ import annotations

import logging

from aiogram import F, Router
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup, Message

from app.bot.states.commit_states import DirectCommitStates
from app.core.commit_normalize import build_key, build_title, validate_date_iso
from app.core.people_store import canonicalize_list, load_people
from app.core.tags import tag_text_for_commit
from app.gateways.notion_commits_async import upsert_commits_async
from app.gateways.notion_gateway import upsert_meeting

logger = logging.getLogger(__name__)

router = Router()


def _get_people_suggestions() -> list[str]:
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ª—é–¥–µ–π –¥–ª—è –ø–æ–¥—Å–∫–∞–∑–æ–∫."""
    try:
        people = load_people()
        return [person.get("name_en", "") for person in people if person.get("name_en")][:10]
    except Exception as e:
        logger.warning(f"Failed to load people suggestions: {e}")
        return []


def _build_people_keyboard(suggestions: list[str], callback_prefix: str) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–æ–¥—Å–∫–∞–∑–∫–∞–º–∏ –ª—é–¥–µ–π."""
    buttons = []

    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥—Å–∫–∞–∑–∫–∏ –ª—é–¥–µ–π (–ø–æ 2 –≤ —Ä—è–¥)
    for i in range(0, min(len(suggestions), 6), 2):
        row = []
        for j in range(i, min(i + 2, len(suggestions))):
            person = suggestions[j]
            row.append(
                InlineKeyboardButton(text=person, callback_data=f"{callback_prefix}:{person}")
            )
        if row:
            buttons.append(row)

    # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    buttons.append(
        [
            InlineKeyboardButton(
                text="‚úçÔ∏è –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é", callback_data=f"{callback_prefix}:manual"
            ),
            InlineKeyboardButton(text="üìù –°–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ", callback_data=f"{callback_prefix}:self"),
        ]
    )
    buttons.append(
        [
            InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="direct_commit:cancel"),
        ]
    )

    return InlineKeyboardMarkup(inline_keyboard=buttons)


def _build_confirm_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è."""
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úÖ –°–æ–∑–¥–∞—Ç—å", callback_data="direct_commit:confirm"),
                InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="direct_commit:edit"),
            ],
            [
                InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="direct_commit:cancel"),
            ],
        ]
    )


def _build_edit_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="üìù –¢–µ–∫—Å—Ç", callback_data="direct_commit:edit:text"),
                InlineKeyboardButton(text="üë§ –ó–∞–∫–∞–∑—á–∏–∫", callback_data="direct_commit:edit:from"),
            ],
            [
                InlineKeyboardButton(text="üë• –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å", callback_data="direct_commit:edit:to"),
                InlineKeyboardButton(text="‚è∞ –î–µ–¥–ª–∞–π–Ω", callback_data="direct_commit:edit:due"),
            ],
            [
                InlineKeyboardButton(text="‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="direct_commit:confirm"),
                InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="direct_commit:cancel"),
            ],
        ]
    )


async def _create_direct_meeting() -> str:
    """–°–æ–∑–¥–∞–µ—Ç –∏–ª–∏ –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ—Ç –µ–¥–∏–Ω—É—é –≤—Å—Ç—Ä–µ—á—É 'Direct Commits' –¥–ª—è –≤—Å–µ—Ö –ø—Ä—è–º—ã—Ö –∫–æ–º–º–∏—Ç–æ–≤."""
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ö–µ—à –¥–ª—è –µ–¥–∏–Ω–æ–π –≤—Å—Ç—Ä–µ—á–∏ Direct Commits
        # –≠—Ç–æ –ø–æ–∑–≤–æ–ª–∏—Ç upsert_meeting –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –≤—Å—Ç—Ä–µ—á—É
        DIRECT_COMMITS_HASH = "direct-commits-permanent-meeting"

        direct_meeting_data = {
            "title": "Direct Commits (–ü—Ä—è–º—ã–µ –∫–æ–º–º–∏—Ç—ã)",
            "date": "2025-01-01",  # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –¥–∞—Ç–∞ –¥–ª—è –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–π –≤—Å—Ç—Ä–µ—á–∏
            "attendees": ["System"],
            "source": "direct_commit",
            "raw_hash": DIRECT_COMMITS_HASH,  # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ö–µ—à –¥–ª—è –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏
            "summary_md": "–ü–æ—Å—Ç–æ—è–Ω–Ω–∞—è –≤—Å—Ç—Ä–µ—á–∞ –¥–ª—è –≤—Å–µ—Ö –ø—Ä—è–º—ã—Ö –∫–æ–º–º–∏—Ç–æ–≤, —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /commit. –ü–æ–∑–≤–æ–ª—è–µ—Ç –∏–∑–±–µ–∂–∞—Ç—å –∑–∞–º—É—Å–æ—Ä–∏–≤–∞–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö Meetings.",
            "tags": ["Topic/Direct"],
        }

        notion_url = upsert_meeting(direct_meeting_data)

        # –ò–∑–≤–ª–µ–∫–∞–µ–º page_id –∏–∑ URL
        from app.bot.handlers import _extract_page_id_from_url

        return _extract_page_id_from_url(notion_url)

    except Exception as e:
        logger.error(f"Failed to create direct meeting: {e}")
        raise RuntimeError("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≤—Å—Ç—Ä–µ—á—É –¥–ª—è –ø—Ä—è–º–æ–≥–æ –∫–æ–º–º–∏—Ç–∞") from e


@router.message(F.text == "/commit")
async def start_direct_commit(message: Message, state: FSMContext) -> None:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä—è–º–æ–≥–æ –∫–æ–º–º–∏—Ç–∞."""
    await state.clear()

    await message.answer(
        "üìù <b>–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä—è–º–æ–≥–æ –∫–æ–º–º–∏—Ç–∞</b>\n\n"
        "‚úçÔ∏è <b>–®–∞–≥ 1/4:</b> –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∫–æ–º–º–∏—Ç–∞\n\n"
        "üí° <i>–ù–∞–ø—Ä–∏–º–µ—Ä: '–ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –æ—Ç—á–µ—Ç –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º –¥–æ –ø—è—Ç–Ω–∏—Ü—ã'</i>",
        parse_mode="HTML",
    )

    await state.set_state(DirectCommitStates.waiting_text)
    logger.info(
        f"User {message.from_user.id if message.from_user else 'unknown'} started direct commit creation"
    )


@router.message(DirectCommitStates.waiting_text, F.text)
async def set_commit_text(message: Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ –∫–æ–º–º–∏—Ç–∞."""
    if not message.text or not message.text.strip():
        await message.answer("‚ùå –¢–µ–∫—Å—Ç –∫–æ–º–º–∏—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return

    text = message.text.strip()
    await state.update_data(text=text)

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫–∏ –ª—é–¥–µ–π
    suggestions = _get_people_suggestions()
    keyboard = _build_people_keyboard(suggestions, "direct_commit:from")

    await message.answer(
        "üë§ <b>–®–∞–≥ 2/4:</b> –ö—Ç–æ –ø–æ—Å—Ç–∞–≤–∏–ª –∑–∞–¥–∞—á—É?\n\n"
        "üí° <i>–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–∫–∞–∑—á–∏–∫–∞ –∏–ª–∏ —É–∫–∞–∂–∏—Ç–µ —Ç–∏–ø –∑–∞–¥–∞—á–∏:</i>",
        reply_markup=keyboard,
        parse_mode="HTML",
    )

    await state.set_state(DirectCommitStates.waiting_from)


@router.callback_query(DirectCommitStates.waiting_from, F.data.startswith("direct_commit:from:"))
async def set_from_callback(callback: CallbackQuery, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É."""
    await callback.answer()

    if not callback.data:
        return

    choice = callback.data.split(":", 2)[2]

    if choice == "manual":
        if callback.message:
            await callback.message.edit_text(  # type: ignore[union-attr]  # type: ignore[union-attr]
                "üë§ <b>–®–∞–≥ 2/4:</b> –ö—Ç–æ –ø–æ—Å—Ç–∞–≤–∏–ª –∑–∞–¥–∞—á—É?\n\n" "‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –∏–º—è –∑–∞–∫–∞–∑—á–∏–∫–∞:",
                parse_mode="HTML",
            )
        return

    if choice == "self":
        # –°–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–∞—è –∑–∞–¥–∞—á–∞ - –∑–∞–∫–∞–∑—á–∏–∫ = –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å
        current_user = callback.from_user.first_name if callback.from_user else "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        choice = f"{current_user} (—Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ)"

    # –í—ã–±—Ä–∞–Ω –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —á–µ–ª–æ–≤–µ–∫
    await state.update_data(from_person=choice)

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
    suggestions = _get_people_suggestions()
    keyboard = _build_people_keyboard(suggestions, "direct_commit:to")

    if callback.message:
        await callback.message.edit_text(  # type: ignore[union-attr]
            f"‚úÖ <b>–ó–∞–∫–∞–∑—á–∏–∫:</b> {choice}\n\n"
            "üë• <b>–®–∞–≥ 3/4:</b> –ö—Ç–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å?\n\n"
            "üí° <i>–í—ã–±–µ—Ä–∏—Ç–µ, –∫—Ç–æ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å –∑–∞–¥–∞—á—É:</i>",
            reply_markup=keyboard,
            parse_mode="HTML",
        )

    await state.set_state(DirectCommitStates.waiting_to)


@router.message(DirectCommitStates.waiting_from, F.text)
async def set_from_manual(message: Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä—É—á–Ω–æ–π –≤–≤–æ–¥ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è."""
    if not message.text or not message.text.strip():
        await message.answer("‚ùå –ò–º—è –∑–∞–∫–∞–∑—á–∏–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return

    from_person = message.text.strip()
    await state.update_data(from_person=from_person)

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
    suggestions = _get_people_suggestions()
    keyboard = _build_people_keyboard(suggestions, "direct_commit:to")

    await message.answer(
        f"‚úÖ <b>–ó–∞–∫–∞–∑—á–∏–∫:</b> {from_person}\n\n"
        "üë• <b>–®–∞–≥ 3/4:</b> –ö—Ç–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å?\n\n"
        "üí° <i>–í—ã–±–µ—Ä–∏—Ç–µ, –∫—Ç–æ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å –∑–∞–¥–∞—á—É:</i>",
        reply_markup=keyboard,
        parse_mode="HTML",
    )

    await state.set_state(DirectCommitStates.waiting_to)


@router.callback_query(DirectCommitStates.waiting_to, F.data.startswith("direct_commit:to:"))
async def set_to_callback(callback: CallbackQuery, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É."""
    await callback.answer()

    if not callback.data:
        return

    choice = callback.data.split(":", 2)[2]

    if choice == "manual":
        if callback.message:
            await callback.message.edit_text(  # type: ignore[union-attr]  # type: ignore[union-attr]
                "üë• <b>–®–∞–≥ 3/4:</b> –ö—Ç–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å?\n\n" "‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –∏–º—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è:",
                parse_mode="HTML",
            )
        return

    if choice == "self":
        # –°–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ - –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å = —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        current_user = callback.from_user.first_name if callback.from_user else "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        choice = f"{current_user} (—Å–∞–º)"

    # –í—ã–±—Ä–∞–Ω –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —á–µ–ª–æ–≤–µ–∫
    await state.update_data(to_person=choice)

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –¥–µ–¥–ª–∞–π–Ω—É
    due_keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="üìÖ –°–µ–≥–æ–¥–Ω—è", callback_data="direct_commit:due:today"),
                InlineKeyboardButton(text="üìÖ –ó–∞–≤—Ç—Ä–∞", callback_data="direct_commit:due:tomorrow"),
            ],
            [
                InlineKeyboardButton(
                    text="üìÖ –≠—Ç–∞ –Ω–µ–¥–µ–ª—è", callback_data="direct_commit:due:this_week"
                ),
                InlineKeyboardButton(
                    text="üìÖ –°–ª–µ–¥. –Ω–µ–¥–µ–ª—è", callback_data="direct_commit:due:next_week"
                ),
            ],
            [
                InlineKeyboardButton(
                    text="‚úçÔ∏è –í–≤–µ—Å—Ç–∏ –¥–∞—Ç—É", callback_data="direct_commit:due:manual"
                ),
                InlineKeyboardButton(text="‚è≠Ô∏è –ë–µ–∑ –¥–µ–¥–ª–∞–π–Ω–∞", callback_data="direct_commit:due:skip"),
            ],
            [
                InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="direct_commit:cancel"),
            ],
        ]
    )

    if callback.message:
        await callback.message.edit_text(  # type: ignore[union-attr]
            f"‚úÖ <b>–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å:</b> {choice}\n\n"
            "‚è∞ <b>–®–∞–≥ 4/4:</b> –î–µ–¥–ª–∞–π–Ω –∫–æ–º–º–∏—Ç–∞\n\n"
            "üí° <i>–í—ã–±–µ—Ä–∏—Ç–µ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É:</i>",
            reply_markup=due_keyboard,
            parse_mode="HTML",
        )

    await state.set_state(DirectCommitStates.waiting_due)


@router.message(DirectCommitStates.waiting_to, F.text)
async def set_to_manual(message: Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä—É—á–Ω–æ–π –≤–≤–æ–¥ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è."""
    if not message.text or not message.text.strip():
        await message.answer("‚ùå –ò–º—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return

    to_person = message.text.strip()
    await state.update_data(to_person=to_person)

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –¥–µ–¥–ª–∞–π–Ω—É
    due_keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="üìÖ –°–µ–≥–æ–¥–Ω—è", callback_data="direct_commit:due:today"),
                InlineKeyboardButton(text="üìÖ –ó–∞–≤—Ç—Ä–∞", callback_data="direct_commit:due:tomorrow"),
            ],
            [
                InlineKeyboardButton(
                    text="üìÖ –≠—Ç–∞ –Ω–µ–¥–µ–ª—è", callback_data="direct_commit:due:this_week"
                ),
                InlineKeyboardButton(
                    text="üìÖ –°–ª–µ–¥. –Ω–µ–¥–µ–ª—è", callback_data="direct_commit:due:next_week"
                ),
            ],
            [
                InlineKeyboardButton(
                    text="‚úçÔ∏è –í–≤–µ—Å—Ç–∏ –¥–∞—Ç—É", callback_data="direct_commit:due:manual"
                ),
                InlineKeyboardButton(text="‚è≠Ô∏è –ë–µ–∑ –¥–µ–¥–ª–∞–π–Ω–∞", callback_data="direct_commit:due:skip"),
            ],
            [
                InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="direct_commit:cancel"),
            ],
        ]
    )

    await message.answer(
        f"‚úÖ <b>–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å:</b> {to_person}\n\n"
        "‚è∞ <b>–®–∞–≥ 4/4:</b> –î–µ–¥–ª–∞–π–Ω –∫–æ–º–º–∏—Ç–∞\n\n"
        "üí° <i>–í—ã–±–µ—Ä–∏—Ç–µ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É:</i>",
        reply_markup=due_keyboard,
        parse_mode="HTML",
    )

    await state.set_state(DirectCommitStates.waiting_due)


@router.callback_query(DirectCommitStates.waiting_due, F.data.startswith("direct_commit:due:"))
async def set_due_callback(callback: CallbackQuery, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –¥–µ–¥–ª–∞–π–Ω–∞ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É."""
    await callback.answer()

    if not callback.data:
        return

    choice = callback.data.split(":", 2)[2]

    if choice == "manual":
        if callback.message:
            await callback.message.edit_text(  # type: ignore[union-attr]  # type: ignore[union-attr]
                "‚è∞ <b>–®–∞–≥ 4/4:</b> –î–µ–¥–ª–∞–π–Ω –∫–æ–º–º–∏—Ç–∞\n\n"
                "‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                "‚Ä¢ <code>2025-10-15</code>\n"
                "‚Ä¢ <code>15.10.2025</code>\n"
                "‚Ä¢ <code>15 –æ–∫—Ç—è–±—Ä—è</code>\n"
                "‚Ä¢ <code>–∑–∞–≤—Ç—Ä–∞</code>\n\n"
                "–ò–ª–∏ <code>/skip</code> –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞:",
                parse_mode="HTML",
            )
        return

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
    from datetime import date, timedelta

    today = date.today()
    due_iso = None

    if choice == "today":
        due_iso = today.isoformat()
    elif choice == "tomorrow":
        due_iso = (today + timedelta(days=1)).isoformat()
    elif choice == "this_week":
        # –ü—è—Ç–Ω–∏—Ü–∞ —Ç–µ–∫—É—â–µ–π –Ω–µ–¥–µ–ª–∏
        days_until_friday = (4 - today.weekday()) % 7
        if days_until_friday == 0:  # –°–µ–≥–æ–¥–Ω—è –ø—è—Ç–Ω–∏—Ü–∞
            days_until_friday = 7  # –°–ª–µ–¥—É—é—â–∞—è –ø—è—Ç–Ω–∏—Ü–∞
        due_iso = (today + timedelta(days=days_until_friday)).isoformat()
    elif choice == "next_week":
        # –ü—è—Ç–Ω–∏—Ü–∞ —Å–ª–µ–¥—É—é—â–µ–π –Ω–µ–¥–µ–ª–∏
        days_until_next_friday = (4 - today.weekday()) % 7 + 7
        due_iso = (today + timedelta(days=days_until_next_friday)).isoformat()
    elif choice == "skip":
        due_iso = None

    await state.update_data(due_iso=due_iso)
    if callback.message:
        await _show_confirmation(callback.message, state)  # type: ignore[arg-type]


@router.message(DirectCommitStates.waiting_due, F.text)
async def set_due_manual(message: Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä—É—á–Ω–æ–π –≤–≤–æ–¥ –¥–µ–¥–ª–∞–π–Ω–∞."""
    if message.text and message.text.strip().lower() in ["/skip", "skip", "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å"]:
        await state.update_data(due_iso=None)
        await _show_confirmation(message, state)
        return

    # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –¥–∞—Ç—É
    due_iso = validate_date_iso(message.text.strip()) if message.text else None

    if not due_iso and message.text and message.text.strip():
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n"
            "‚Ä¢ <code>2025-10-15</code>\n"
            "‚Ä¢ <code>15.10.2025</code>\n"
            "‚Ä¢ <code>15 –æ–∫—Ç—è–±—Ä—è</code>\n"
            "‚Ä¢ <code>/skip</code> –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞",
            parse_mode="HTML",
        )
        return

    await state.update_data(due_iso=due_iso)
    await _show_confirmation(message, state)


async def _show_confirmation(message: Message, state: FSMContext) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —ç–∫—Ä–∞–Ω –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∫–æ–º–º–∏—Ç–∞."""
    data = await state.get_data()

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    text = data.get("text", "‚Äî")
    from_person = data.get("from_person", "‚Äî")
    to_person = data.get("to_person", "‚Äî")
    due_iso = data.get("due_iso")

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–µ–¥–ª–∞–π–Ω
    if due_iso:
        try:
            from datetime import datetime

            due_date = datetime.fromisoformat(due_iso)
            due_formatted = due_date.strftime("%d.%m.%Y")
        except (ValueError, TypeError):
            due_formatted = str(due_iso)
    else:
        due_formatted = "‚Äî"

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
    # –ü—Ä–æ—Å—Ç–∞—è —ç–≤—Ä–∏—Å—Ç–∏–∫–∞: –µ—Å–ª–∏ –∑–∞–∫–∞–∑—á–∏–∫ —Å–æ–¥–µ—Ä–∂–∏—Ç "valya/–≤–∞–ª—è/valentin" - —ç—Ç–æ mine
    from_lower = from_person.lower()
    direction = (
        "mine"
        if any(name in from_lower for name in ["valya", "–≤–∞–ª—è", "valentin", "–≤–∞–ª–µ–Ω—Ç–∏–Ω"])
        else "theirs"
    )
    direction_text = "üì§ –º–æ–π" if direction == "mine" else "üì• —á—É–∂–æ–π"

    # –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä —Ç–µ–≥–æ–≤
    try:
        preview_tags = tag_text_for_commit(text)
        tags_preview = ", ".join(preview_tags[:3])
        if len(preview_tags) > 3:
            tags_preview += f" <i>+{len(preview_tags) - 3}</i>"
        tags_text = f"üè∑Ô∏è <b>–¢–µ–≥–∏:</b> {tags_preview}\n" if preview_tags else ""
    except Exception:
        tags_text = ""

    confirmation_text = (
        "üìã <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∫–æ–º–º–∏—Ç–∞</b>\n\n"
        f"üìù <b>–¢–µ–∫—Å—Ç:</b> {text}\n"
        f"üë§ <b>–ó–∞–∫–∞–∑—á–∏–∫:</b> {from_person}\n"
        f"üë• <b>–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å:</b> {to_person}\n"
        f"‚è∞ <b>–î–µ–¥–ª–∞–π–Ω:</b> {due_formatted}\n"
        f"üéØ <b>–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:</b> {direction_text}\n"
        f"{tags_text}\n"
        "‚úÖ –°–æ–∑–¥–∞—Ç—å –∫–æ–º–º–∏—Ç?"
    )

    await state.set_state(DirectCommitStates.confirm)

    if hasattr(message, "edit_text"):
        await message.edit_text(
            confirmation_text, reply_markup=_build_confirm_keyboard(), parse_mode="HTML"
        )
    else:
        await message.answer(
            confirmation_text, reply_markup=_build_confirm_keyboard(), parse_mode="HTML"
        )


@router.callback_query(DirectCommitStates.confirm, F.data == "direct_commit:confirm")
async def confirm_direct_commit(callback: CallbackQuery, state: FSMContext) -> None:
    """–°–æ–∑–¥–∞–µ—Ç –ø—Ä—è–º–æ–π –∫–æ–º–º–∏—Ç –≤ Notion."""
    await callback.answer()

    try:
        data = await state.get_data()

        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
        text = data.get("text", "").strip()
        from_person = data.get("from_person", "").strip()
        to_person = data.get("to_person", "").strip()
        due_iso = data.get("due_iso")

        if not all([text, from_person, to_person]):
            if callback.message:
                await callback.message.edit_text(  # type: ignore[union-attr]
                    "‚ùå <b>–û—à–∏–±–∫–∞:</b> –ù–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã", parse_mode="HTML"
                )
            return

        # –ö–∞–Ω–æ–Ω–∏–∑–∏—Ä—É–µ–º –∏–º–µ–Ω–∞
        to_canonical = canonicalize_list([to_person])

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
        from_lower = from_person.lower()
        direction = (
            "mine"
            if any(name in from_lower for name in ["valya", "–≤–∞–ª—è", "valentin", "–≤–∞–ª–µ–Ω—Ç–∏–Ω"])
            else "theirs"
        )

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª—é—á –∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫
        assignees = to_canonical
        key = build_key(text, assignees, due_iso)
        title = build_title(direction, text, assignees, due_iso)

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ–≥–∏
        tags = tag_text_for_commit(text)

        # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º Direct –≤—Å—Ç—Ä–µ—á—É
        direct_meeting_id = await _create_direct_meeting()

        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–º–º–∏—Ç–∞
        commit_data = {
            "title": title,
            "text": text,
            "direction": direction,
            "assignees": assignees,
            "from_person": [from_person],  # –ó–∞–∫–∞–∑—á–∏–∫ (–∫—Ç–æ –ø–æ—Å—Ç–∞–≤–∏–ª –∑–∞–¥–∞—á—É)
            "due_iso": due_iso,
            "confidence": 1.0,  # –ü—Ä—è–º—ã–µ –∫–æ–º–º–∏—Ç—ã –∏–º–µ—é—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
            "flags": ["direct"],  # –§–ª–∞–≥ –¥–ª—è –æ—Ç–ª–∏—á–∏—è –æ—Ç –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã—Ö –∫–æ–º–º–∏—Ç–æ–≤
            "key": key,
            "status": "open",
            "tags": tags,
        }

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Notion
        result = await upsert_commits_async(direct_meeting_id, [commit_data])
        created = result.get("created", [])
        updated = result.get("updated", [])

        if created or updated:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —Å –∫—Ä–∞—Å–∏–≤—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
            from app.bot.formatters import format_commit_card, format_success_card

            success_details = {
                "created": len(created),
                "updated": len(updated),
                "commit_id": created[0] if created else updated[0] if updated else "unknown",
                "tags_count": len(tags),
                "direction": direction,
            }

            success_message = format_success_card("–ü—Ä—è–º–æ–π –∫–æ–º–º–∏—Ç —Å–æ–∑–¥–∞–Ω!", success_details)

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –∫–æ–º–º–∏—Ç–∞
            commit_card = format_commit_card(
                {
                    "text": text,
                    "status": "open",
                    "direction": direction,
                    "assignees": assignees,
                    "from_person": [from_person],  # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–∫–∞–∑—á–∏–∫–∞
                    "due_iso": due_iso,
                    "confidence": 1.0,
                    "tags": tags,
                    "short_id": key[:8],
                }
            )

            if callback.message:
                await callback.message.edit_text(success_message, parse_mode="HTML")  # type: ignore[union-attr]
                await callback.message.answer(
                    f"üìù <b>–°–æ–∑–¥–∞–Ω–Ω—ã–π –∫–æ–º–º–∏—Ç:</b>\n\n{commit_card}", parse_mode="HTML"
                )

            user_id = callback.from_user.id if callback.from_user else None
            logger.info(
                f"Direct commit created by user {user_id}: '{text}' "
                f"from {from_person} to {to_person}, due {due_iso or 'none'}"
            )
        else:
            if callback.message:
                await callback.message.edit_text(  # type: ignore[union-attr]
                    "‚ùå <b>–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–º–∏—Ç–∞</b>\n\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                    parse_mode="HTML",
                )

    except Exception as e:
        logger.error(f"Error creating direct commit: {e}")
        if callback.message:
            await callback.message.edit_text(  # type: ignore[union-attr]  # type: ignore[union-attr]
                f"‚ùå <b>–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–º–∏—Ç–∞</b>\n\n" f"<code>{str(e)}</code>", parse_mode="HTML"
            )
    finally:
        await state.clear()


@router.callback_query(DirectCommitStates.confirm, F.data == "direct_commit:edit")
async def edit_direct_commit(callback: CallbackQuery, state: FSMContext) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–º–º–∏—Ç–∞."""
    await callback.answer()

    data = await state.get_data()

    edit_text = (
        "‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–º–∏—Ç–∞</b>\n\n"
        f"üìù <b>–¢–µ–∫—Å—Ç:</b> {data.get('text', '‚Äî')}\n"
        f"üë§ <b>–ó–∞–∫–∞–∑—á–∏–∫:</b> {data.get('from_person', '‚Äî')}\n"
        f"üë• <b>–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å:</b> {data.get('to_person', '‚Äî')}\n"
        f"‚è∞ <b>–î–µ–¥–ª–∞–π–Ω:</b> {data.get('due_iso', '‚Äî')}\n\n"
        "–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?"
    )

    if callback.message:
        await callback.message.edit_text(  # type: ignore[union-attr]
            edit_text, reply_markup=_build_edit_keyboard(), parse_mode="HTML"
        )


@router.callback_query(F.data.startswith("direct_commit:edit:"))
async def handle_edit_field(callback: CallbackQuery, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—è."""
    await callback.answer()

    if not callback.data:
        return

    field = callback.data.split(":", 2)[2]

    if field == "text":
        if callback.message:
            await callback.message.edit_text(  # type: ignore[union-attr]  # type: ignore[union-attr]
                "üìù <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞</b>\n\n" "‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –∫–æ–º–º–∏—Ç–∞:",
                parse_mode="HTML",
            )
        await state.set_state(DirectCommitStates.waiting_text)
    elif field == "from":
        suggestions = _get_people_suggestions()
        keyboard = _build_people_keyboard(suggestions, "direct_commit:from")
        if callback.message:
            await callback.message.edit_text(  # type: ignore[union-attr]  # type: ignore[union-attr]
                "üë§ <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑—á–∏–∫–∞</b>\n\n" "üí° <i>–í—ã–±–µ—Ä–∏—Ç–µ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ:</i>",
                reply_markup=keyboard,
                parse_mode="HTML",
            )
        await state.set_state(DirectCommitStates.waiting_from)
    elif field == "to":
        suggestions = _get_people_suggestions()
        keyboard = _build_people_keyboard(suggestions, "direct_commit:to")
        if callback.message:
            await callback.message.edit_text(  # type: ignore[union-attr]  # type: ignore[union-attr]
                "üë• <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è</b>\n\n" "üí° <i>–í—ã–±–µ—Ä–∏—Ç–µ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ:</i>",
                reply_markup=keyboard,
                parse_mode="HTML",
            )
        await state.set_state(DirectCommitStates.waiting_to)
    elif field == "due":
        due_keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="üìÖ –°–µ–≥–æ–¥–Ω—è", callback_data="direct_commit:due:today"
                    ),
                    InlineKeyboardButton(
                        text="üìÖ –ó–∞–≤—Ç—Ä–∞", callback_data="direct_commit:due:tomorrow"
                    ),
                ],
                [
                    InlineKeyboardButton(
                        text="‚úçÔ∏è –í–≤–µ—Å—Ç–∏ –¥–∞—Ç—É", callback_data="direct_commit:due:manual"
                    ),
                    InlineKeyboardButton(
                        text="‚è≠Ô∏è –ë–µ–∑ –¥–µ–¥–ª–∞–π–Ω–∞", callback_data="direct_commit:due:skip"
                    ),
                ],
                [
                    InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="direct_commit:cancel"),
                ],
            ]
        )
        if callback.message:
            await callback.message.edit_text(  # type: ignore[union-attr]  # type: ignore[union-attr]
                "‚è∞ <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–¥–ª–∞–π–Ω–∞</b>\n\n" "üí° <i>–í—ã–±–µ—Ä–∏—Ç–µ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É:</i>",
                reply_markup=due_keyboard,
                parse_mode="HTML",
            )
        await state.set_state(DirectCommitStates.waiting_due)


@router.callback_query(F.data == "direct_commit:cancel")
async def cancel_direct_commit(callback: CallbackQuery, state: FSMContext) -> None:
    """–û—Ç–º–µ–Ω—è–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä—è–º–æ–≥–æ –∫–æ–º–º–∏—Ç–∞."""
    await callback.answer()
    await state.clear()

    if callback.message:
        await callback.message.edit_text(  # type: ignore[union-attr]
            "‚ùå <b>–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–º–∏—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ</b>\n\n"
            "üí° <i>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /commit –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ</i>",
            parse_mode="HTML",
        )

    user_id = callback.from_user.id if callback.from_user else "unknown"
    logger.info(f"Direct commit creation cancelled by user {user_id}")
