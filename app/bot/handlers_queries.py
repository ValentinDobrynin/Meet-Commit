"""–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –∫–æ–º–º–∏—Ç–∞–º."""

from __future__ import annotations

import logging
import time
from typing import Any

from aiogram import F, Router
from aiogram.filters import Command
from aiogram.types import CallbackQuery, Message

from app.bot.formatters import format_commit_card, format_error_card, format_success_card
from app.bot.keyboards import (
    build_commit_action_keyboard,
    build_pagination_keyboard,
    build_query_help_keyboard,
)
from app.gateways.notion_commits import (
    query_commits_by_assignee,
    query_commits_by_tag,
    query_commits_due_today,
    query_commits_due_within,
    query_commits_mine,
    query_commits_mine_active,
    query_commits_recent,
    query_commits_theirs,
    update_commit_status,
)

logger = logging.getLogger(__name__)

router = Router()

# Rate limiting (–ø—Ä–æ—Å—Ç–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è)
_last_query_time: dict[int, float] = {}
RATE_LIMIT_SECONDS = 2


def _check_rate_limit(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç rate limit –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    now = time.time()
    last_time = _last_query_time.get(user_id, 0)

    if now - last_time < RATE_LIMIT_SECONDS:
        return False

    _last_query_time[user_id] = now
    return True


async def _send_commits_list(
    message: Message,
    commits: list[dict[str, Any]],
    query_type: str,
    query_description: str,
    *,
    extra_params: str = "",
    show_actions: bool = True,
) -> None:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–º–º–∏—Ç–æ–≤ —Å –∫—Ä–∞—Å–∏–≤—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º.

    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–≤–µ—Ç–∞
        commits: –°–ø–∏—Å–æ–∫ –∫–æ–º–º–∏—Ç–æ–≤
        query_type: –¢–∏–ø –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        query_description: –û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞
        extra_params: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ç–µ–≥)
        show_actions: –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ª–∏ –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
    """
    if not commits:
        await message.answer(
            f"üì≠ <b>{query_description}</b>\n\n" "üí° <i>–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ</i>", parse_mode="HTML"
        )
        return

    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
    header_text = f"üìã <b>{query_description}</b>\n\nüìä <b>–ù–∞–π–¥–µ–Ω–æ:</b> {len(commits)} –∫–æ–º–º–∏—Ç–æ–≤"

    # –ü—Ä–æ—Å—Ç–∞—è –ø–∞–≥–∏–Ω–∞—Ü–∏—è (v1 - –±–µ–∑ –Ω–∞—Å—Ç–æ—è—â–∏—Ö —Å—Ç—Ä–∞–Ω–∏—Ü)
    current_page = 1
    total_pages = 1

    pagination_kb = build_pagination_keyboard(
        query_type, current_page, total_pages, len(commits), extra_params=extra_params
    )

    await message.answer(header_text, reply_markup=pagination_kb, parse_mode="HTML")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π –∫–æ–º–º–∏—Ç –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É
    for commit in commits:
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
            card_text = format_commit_card(commit)

            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–º–º–∏—Ç–æ–≤
            reply_markup = None
            commit_status = commit.get("status", "open")
            if show_actions and commit_status not in ("done", "dropped", "cancelled"):
                reply_markup = build_commit_action_keyboard(commit.get("id", ""))

            await message.answer(card_text, parse_mode="HTML", reply_markup=reply_markup)

        except Exception as e:
            logger.error(f"Error formatting commit {commit.get('id', 'unknown')}: {e}")
            continue


@router.message(Command("commits"))
async def cmd_commits(message: Message) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∫–æ–º–º–∏—Ç—ã."""
    user_id = message.from_user.id if message.from_user else 0

    if not _check_rate_limit(user_id):
        await message.answer("‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∑–∞–ø—Ä–æ—Å–æ–º")
        return

    try:
        commits = query_commits_recent(limit=10)
        await _send_commits_list(message, commits, "recent", "–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∫–æ–º–º–∏—Ç—ã")

        logger.info(f"User {user_id} queried recent commits: {len(commits)} found")

    except Exception as e:
        logger.error(f"Error in cmd_commits: {e}")
        error_message = format_error_card("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–º–º–∏—Ç–æ–≤", str(e))
        await message.answer(error_message, parse_mode="HTML")


@router.message(Command("mine"))
async def cmd_mine(message: Message) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–æ–∏ –∑–∞–¥–∞—á–∏ (–≤—Å–µ: –∞–∫—Ç–∏–≤–Ω—ã–µ + –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ)."""
    user_id = message.from_user.id if message.from_user else 0

    if not _check_rate_limit(user_id):
        await message.answer("‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∑–∞–ø—Ä–æ—Å–æ–º")
        return

    try:
        commits = query_commits_mine(limit=10)
        await _send_commits_list(message, commits, "mine", "–ú–æ–∏ –∑–∞–¥–∞—á–∏ (–≤—Å–µ)")

        logger.info(f"User {user_id} queried mine commits: {len(commits)} found")

    except Exception as e:
        logger.error(f"Error in cmd_mine: {e}")
        error_message = format_error_card("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–æ–∏—Ö –∑–∞–¥–∞—á", str(e))
        await message.answer(error_message, parse_mode="HTML")


@router.message(Command("mine_active"))
async def cmd_mine_active(message: Message) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –º–æ–∏ –∑–∞–¥–∞—á–∏."""
    user_id = message.from_user.id if message.from_user else 0

    if not _check_rate_limit(user_id):
        await message.answer("‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∑–∞–ø—Ä–æ—Å–æ–º")
        return

    try:
        commits = query_commits_mine_active(limit=10)
        await _send_commits_list(message, commits, "mine_active", "–ú–æ–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏")

        logger.info(f"User {user_id} queried mine_active commits: {len(commits)} found")

    except Exception as e:
        logger.error(f"Error in cmd_mine_active: {e}")
        error_message = format_error_card("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á", str(e))
        await message.answer(error_message, parse_mode="HTML")


@router.message(Command("theirs"))
async def cmd_theirs(message: Message) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —á—É–∂–∏–µ –∫–æ–º–º–∏—Ç—ã (direction=theirs)."""
    user_id = message.from_user.id if message.from_user else 0

    if not _check_rate_limit(user_id):
        await message.answer("‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∑–∞–ø—Ä–æ—Å–æ–º")
        return

    try:
        commits = query_commits_theirs(limit=10)
        await _send_commits_list(message, commits, "theirs", "–ß—É–∂–∏–µ –∑–∞–¥–∞—á–∏")

        logger.info(f"User {user_id} queried theirs commits: {len(commits)} found")

    except Exception as e:
        logger.error(f"Error in cmd_theirs: {e}")
        error_message = format_error_card("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —á—É–∂–∏—Ö –∑–∞–¥–∞—á", str(e))
        await message.answer(error_message, parse_mode="HTML")


@router.message(Command("due"))
async def cmd_due(message: Message) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–æ–º–º–∏—Ç—ã —Å –¥–µ–¥–ª–∞–π–Ω–æ–º –≤ –±–ª–∏–∂–∞–π—à—É—é –Ω–µ–¥–µ–ª—é."""
    user_id = message.from_user.id if message.from_user else 0

    if not _check_rate_limit(user_id):
        await message.answer("‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∑–∞–ø—Ä–æ—Å–æ–º")
        return

    try:
        commits = query_commits_due_within(days=7, limit=10)
        await _send_commits_list(message, commits, "due", "–î–µ–¥–ª–∞–π–Ω—ã –Ω–∞ –Ω–µ–¥–µ–ª—é")

        logger.info(f"User {user_id} queried due commits: {len(commits)} found")

    except Exception as e:
        logger.error(f"Error in cmd_due: {e}")
        error_message = format_error_card("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ–¥–ª–∞–π–Ω–æ–≤", str(e))
        await message.answer(error_message, parse_mode="HTML")


@router.message(Command("today"))
async def cmd_today(message: Message) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–æ–º–º–∏—Ç—ã —Å –¥–µ–¥–ª–∞–π–Ω–æ–º —Å–µ–≥–æ–¥–Ω—è."""
    user_id = message.from_user.id if message.from_user else 0

    if not _check_rate_limit(user_id):
        await message.answer("‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∑–∞–ø—Ä–æ—Å–æ–º")
        return

    try:
        commits = query_commits_due_today(limit=10)
        await _send_commits_list(message, commits, "today", "–ì–æ—Ä—è—â–∏–µ –∑–∞–¥–∞—á–∏ —Å–µ–≥–æ–¥–Ω—è")

        logger.info(f"User {user_id} queried today commits: {len(commits)} found")

    except Exception as e:
        logger.error(f"Error in cmd_today: {e}")
        error_message = format_error_card("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á –Ω–∞ —Å–µ–≥–æ–¥–Ω—è", str(e))
        await message.answer(error_message, parse_mode="HTML")


@router.message(Command("by_tag"))
async def cmd_by_tag(message: Message) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–æ–º–º–∏—Ç—ã –ø–æ —Ç–µ–≥—É."""
    user_id = message.from_user.id if message.from_user else 0

    if not _check_rate_limit(user_id):
        await message.answer("‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∑–∞–ø—Ä–æ—Å–æ–º")
        return

    # –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç —Ç–µ–≥–∞
    parts = (message.text or "").strip().split(maxsplit=1)
    if len(parts) < 2:
        help_text = (
            "üè∑Ô∏è <b>–ü–æ–∏—Å–∫ –ø–æ —Ç–µ–≥—É</b>\n\n"
            "üìù <b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:</b>\n"
            "<code>/by_tag Finance/IFRS</code>\n"
            "<code>/by_tag Topic/Meeting</code>\n"
            "<code>/by_tag People/John</code>\n\n"
            "üí° <i>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —á–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ</i>"
        )
        await message.answer(help_text, reply_markup=build_query_help_keyboard(), parse_mode="HTML")
        return

    tag = parts[1].strip()

    try:
        commits = query_commits_by_tag(tag, limit=10)
        await _send_commits_list(
            message, commits, "by_tag", f"–ö–æ–º–º–∏—Ç—ã —Å —Ç–µ–≥–æ–º '{tag}'", extra_params=tag
        )

        logger.info(f"User {user_id} queried commits by tag '{tag}': {len(commits)} found")

    except Exception as e:
        logger.error(f"Error in cmd_by_tag: {e}")
        error_message = format_error_card("–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ —Ç–µ–≥—É", str(e))
        await message.answer(error_message, parse_mode="HTML")


@router.message(Command("by_assignee"))
async def cmd_by_assignee(message: Message) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–æ–º–º–∏—Ç—ã –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é."""
    user_id = message.from_user.id if message.from_user else 0

    if not _check_rate_limit(user_id):
        await message.answer("‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∑–∞–ø—Ä–æ—Å–æ–º")
        return

    # –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç –∏–º–µ–Ω–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
    parts = (message.text or "").strip().split(maxsplit=1)
    if len(parts) < 2:
        help_text = (
            "üë§ <b>–ü–æ–∏—Å–∫ –ø–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é</b>\n\n"
            "üìù <b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:</b>\n"
            "<code>/by_assignee Valya</code>\n"
            "<code>/by_assignee John Doe</code>\n"
            "<code>/by_assignee Nodari</code>\n\n"
            "üí° <i>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è –≤—Å–µ –∞–ª–∏–∞—Å—ã –∏–∑ people.json</i>\n"
            "üîç <i>–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ –∫–æ–º–º–∏—Ç—ã (–∞–∫—Ç–∏–≤–Ω—ã–µ + –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ)</i>"
        )
        await message.answer(help_text, parse_mode="HTML")
        return

    assignee_name = parts[1].strip()

    try:
        commits = query_commits_by_assignee(assignee_name, limit=10)
        await _send_commits_list(
            message,
            commits,
            "by_assignee",
            f"–ó–∞–¥–∞—á–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è '{assignee_name}'",
            extra_params=assignee_name,
        )

        logger.info(
            f"User {user_id} queried commits by assignee '{assignee_name}': {len(commits)} found"
        )

    except Exception as e:
        logger.error(f"Error in cmd_by_assignee: {e}")
        error_message = format_error_card("–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é", str(e))
        await message.answer(error_message, parse_mode="HTML")


@router.message(Command("queries_help"))
async def cmd_queries_help(message: Message) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø—Ä–∞–≤–∫—É –ø–æ –∫–æ–º–∞–Ω–¥–∞–º –∑–∞–ø—Ä–æ—Å–æ–≤."""
    help_text = (
        "üîç <b>–ö–æ–º–∞–Ω–¥—ã –±—ã—Å—Ç—Ä—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤</b>\n\n"
        "üìã <b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
        "‚Ä¢ <code>/commits</code> - –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∫–æ–º–º–∏—Ç–æ–≤\n"
        "‚Ä¢ <code>/mine</code> - –º–æ–∏ –∑–∞–¥–∞—á–∏ (–≤—Å–µ: –∞–∫—Ç–∏–≤–Ω—ã–µ + –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ)\n"
        "‚Ä¢ <code>/mine_active</code> - —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –º–æ–∏ –∑–∞–¥–∞—á–∏\n"
        "‚Ä¢ <code>/theirs</code> - —á—É–∂–∏–µ –∑–∞–¥–∞—á–∏ (direction=theirs)\n"
        "‚Ä¢ <code>/due</code> - –¥–µ–¥–ª–∞–π–Ω—ã –±–ª–∏–∂–∞–π—à–µ–π –Ω–µ–¥–µ–ª–∏\n"
        "‚Ä¢ <code>/today</code> - —á—Ç–æ –≥–æ—Ä–∏—Ç —Å–µ–≥–æ–¥–Ω—è\n"
        "‚Ä¢ <code>/by_tag &lt;—Ç–µ–≥&gt;</code> - —Ñ–∏–ª—å—Ç—Ä –ø–æ —Ç–µ–≥—É\n"
        "‚Ä¢ <code>/by_assignee &lt;–∏–º—è&gt;</code> - –∑–∞–¥–∞—á–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è\n\n"
        "üè∑Ô∏è <b>–ü—Ä–∏–º–µ—Ä—ã –ø–æ–∏—Å–∫–∞ –ø–æ —Ç–µ–≥–∞–º:</b>\n"
        "‚Ä¢ <code>/by_tag Finance/IFRS</code>\n"
        "‚Ä¢ <code>/by_tag Topic/Meeting</code>\n"
        "‚Ä¢ <code>/by_tag People/John</code>\n\n"
        "üë§ <b>–ü—Ä–∏–º–µ—Ä—ã –ø–æ–∏—Å–∫–∞ –ø–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é:</b>\n"
        "‚Ä¢ <code>/by_assignee Valya</code>\n"
        "‚Ä¢ <code>/by_assignee John Doe</code>\n"
        "‚Ä¢ <code>/by_assignee Nodari</code>\n\n"
        "‚ö° <b>–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:</b>\n"
        "‚Ä¢ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏\n"
        "‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —á–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Ç–µ–≥–æ–≤\n"
        "‚Ä¢ Rate limit: 1 –∑–∞–ø—Ä–æ—Å –≤ 2 —Å–µ–∫—É–Ω–¥—ã\n"
        "‚Ä¢ –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä—è–º–æ –∏–∑ —Å–ø–∏—Å–∫–∞"
    )

    await message.answer(help_text, reply_markup=build_query_help_keyboard(), parse_mode="HTML")


# ====== CALLBACK HANDLERS FOR PAGINATION ======


@router.callback_query(F.data.startswith("commits:"))
async def handle_commits_pagination(callback: CallbackQuery) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–∞–≥–∏–Ω–∞—Ü–∏—é –∏ –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –∫–æ–º–º–∏—Ç–æ–≤."""
    await callback.answer()

    if not callback.data or not callback.message:
        return

    user_id = callback.from_user.id if callback.from_user else 0

    # –ü–∞—Ä—Å–∏–º callback data: commits:query_type:page[:extra_params]
    parts = callback.data.split(":", 3)
    if len(parts) < 3:
        return

    query_type = parts[1]
    try:
        page = int(parts[2])
    except ValueError:
        page = 1

    extra_params = parts[3] if len(parts) > 3 else ""

    # Rate limiting –¥–ª—è callback –∑–∞–ø—Ä–æ—Å–æ–≤
    if not _check_rate_limit(user_id):
        await callback.answer("‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ", show_alert=True)
        return

    try:
        # –í—ã–ø–æ–ª–Ω—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –∑–∞–ø—Ä–æ—Å
        commits = []
        query_description = ""

        if query_type == "recent":
            commits = query_commits_recent(limit=10)
            query_description = "–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∫–æ–º–º–∏—Ç—ã"
        elif query_type == "mine":
            commits = query_commits_mine(limit=10)
            query_description = "–ú–æ–∏ –∑–∞–¥–∞—á–∏ (–≤—Å–µ)"
        elif query_type == "mine_active":
            commits = query_commits_mine_active(limit=10)
            query_description = "–ú–æ–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏"
        elif query_type == "theirs":
            commits = query_commits_theirs(limit=10)
            query_description = "–ß—É–∂–∏–µ –∑–∞–¥–∞—á–∏"
        elif query_type == "due":
            commits = query_commits_due_within(days=7, limit=10)
            query_description = "–î–µ–¥–ª–∞–π–Ω—ã –Ω–∞ –Ω–µ–¥–µ–ª—é"
        elif query_type == "today":
            commits = query_commits_due_today(limit=10)
            query_description = "–ì–æ—Ä—è—â–∏–µ –∑–∞–¥–∞—á–∏ —Å–µ–≥–æ–¥–Ω—è"
        elif query_type == "by_tag" and extra_params:
            commits = query_commits_by_tag(extra_params, limit=10)
            query_description = f"–ö–æ–º–º–∏—Ç—ã —Å —Ç–µ–≥–æ–º '{extra_params}'"
        elif query_type == "by_assignee" and extra_params:
            commits = query_commits_by_assignee(extra_params, limit=10)
            query_description = f"–ó–∞–¥–∞—á–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è '{extra_params}'"
        elif query_type == "help_tag":
            help_text = (
                "üè∑Ô∏è <b>–ü–æ–∏—Å–∫ –ø–æ —Ç–µ–≥—É</b>\n\n"
                "üìù <b>–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É:</b>\n"
                "<code>/by_tag Finance/IFRS</code>\n\n"
                "üí° <i>–ò–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –±—ã—Å—Ç—Ä—ã–π –∑–∞–ø—Ä–æ—Å:</i>"
            )
            await callback.message.edit_text(  # type: ignore[union-attr]
                help_text, reply_markup=build_query_help_keyboard(), parse_mode="HTML"
            )
            return
        else:
            await callback.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∑–∞–ø—Ä–æ—Å–∞", show_alert=True)
            return

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if not commits:
            await callback.message.edit_text(  # type: ignore[union-attr]
                f"üì≠ <b>{query_description}</b>\n\n" "üí° <i>–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ</i>",
                parse_mode="HTML",
            )
            return

        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        header_text = f"üìã <b>{query_description}</b>\n\nüìä <b>–ù–∞–π–¥–µ–Ω–æ:</b> {len(commits)} –∫–æ–º–º–∏—Ç–æ–≤"

        pagination_kb = build_pagination_keyboard(
            query_type,
            page,
            1,  # total_pages
            len(commits),
            extra_params=extra_params,
        )

        await callback.message.edit_text(header_text, reply_markup=pagination_kb, parse_mode="HTML")  # type: ignore[union-attr]

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏ (–≤ —Ä–µ–∞–ª—å–Ω–æ–π –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—ã–ª–∞ –±—ã –ª–æ–≥–∏–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç–∞—Ä—ã—Ö)
        for commit in commits[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –º–µ—Å—Ç–∞
            try:
                card_text = format_commit_card(commit)
                reply_markup = None
                commit_status = commit.get("status", "open")
                if commit_status not in ("done", "dropped", "cancelled"):
                    reply_markup = build_commit_action_keyboard(commit.get("id", ""))

                await callback.message.answer(
                    card_text, parse_mode="HTML", reply_markup=reply_markup
                )

            except Exception as e:
                logger.error(f"Error formatting commit in callback: {e}")
                continue

        logger.info(f"User {user_id} paginated {query_type} commits: {len(commits)} found")

    except Exception as e:
        logger.error(f"Error in handle_commits_pagination: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏", show_alert=True)


# ====== QUICK ACTIONS FOR COMMITS ======


@router.callback_query(F.data.startswith("commit_action:"))
async def handle_commit_action(callback: CallbackQuery) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –±—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è —Å –∫–æ–º–º–∏—Ç–∞–º–∏."""
    await callback.answer()

    if not callback.data:
        return

    # –ü–∞—Ä—Å–∏–º callback data: commit_action:action:commit_id
    parts = callback.data.split(":", 2)
    if len(parts) < 3:
        return

    action = parts[1]
    commit_id = parts[2]

    user_id = callback.from_user.id if callback.from_user else 0

    try:
        if action == "done":
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ Notion
            if update_commit_status(commit_id, "done"):
                success_message = format_success_card(
                    "–ö–æ–º–º–∏—Ç –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–π",
                    {"commit_id": commit_id[:8], "status": "‚úÖ done"},
                )
                await callback.message.edit_reply_markup(reply_markup=None)  # type: ignore[union-attr]
                await callback.message.answer(success_message, parse_mode="HTML")  # type: ignore[union-attr]
                logger.info(f"User {user_id} marked commit {commit_id} as done")
            else:
                await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –≤ Notion", show_alert=True)

        elif action == "drop":
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ Notion
            if update_commit_status(commit_id, "dropped"):
                success_message = format_success_card(
                    "–ö–æ–º–º–∏—Ç –æ—Ç–º–µ–Ω–µ–Ω", {"commit_id": commit_id[:8], "status": "‚ùå dropped"}
                )
                await callback.message.edit_reply_markup(reply_markup=None)  # type: ignore[union-attr]
                await callback.message.answer(success_message, parse_mode="HTML")  # type: ignore[union-attr]
                logger.info(f"User {user_id} dropped commit {commit_id}")
            else:
                await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –≤ Notion", show_alert=True)

        else:
            await callback.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ", show_alert=True)

    except Exception as e:
        logger.error(f"Error in handle_commit_action: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –¥–µ–π—Å—Ç–≤–∏—è", show_alert=True)
