"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ Review Queue.

–í–∫–ª—é—á–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã:
- /review_clean - –æ—Å–Ω–æ–≤–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –æ—á–∏—Å—Ç–∫–∏ —Å –ø–æ–¥—Ä–µ–∂–∏–º–∞–º–∏
- /review_clean_help - —Å–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º –æ—á–∏—Å—Ç–∫–∏
"""

from __future__ import annotations

import logging
from datetime import UTC

from aiogram import F, Router
from aiogram.types import Message

from app.core.review_cleanup import CleanupStats
from app.settings import settings

logger = logging.getLogger(__name__)

router = Router()


def _is_admin(message: Message) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."""
    user_id = message.from_user.id if message.from_user else None
    return settings.is_admin(user_id)


@router.message(F.text.regexp(r"^/review_clean\b"))
async def review_clean_handler(message: Message) -> None:
    """
    –ö–æ–º–∞–Ω–¥–∞ –æ—á–∏—Å—Ç–∫–∏ Review Queue.

    –°–∏–Ω—Ç–∞–∫—Å–∏—Å: /review_clean [old|dups|status|all] [days=N] [threshold=0.85] [dry-run]

    –ü—Ä–∏–º–µ—Ä—ã:
    /review_clean old days=7
    /review_clean dups threshold=0.9
    /review_clean status resolved
    /review_clean all dry-run
    """
    if not _is_admin(message):
        await message.answer("‚ùå –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
        return

    try:
        # –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
        text = message.text or ""
        args = text.split()[1:]  # –£–±–∏—Ä–∞–µ–º /review_clean

        # –ó–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        mode = "all"
        days = None
        threshold = None
        target_status = None
        dry_run = True  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é dry-run –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏

        # –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã
        for arg in args:
            if arg in ("old", "dups", "status", "all"):
                mode = arg
            elif arg in ("resolved", "dropped", "pending", "needs-review"):
                target_status = arg
                mode = "status"  # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –≤ —Ä–µ–∂–∏–º —Å—Ç–∞—Ç—É—Å–∞
            elif arg.startswith("days="):
                try:
                    days = int(arg.split("=", 1)[1])
                except ValueError:
                    await message.answer(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–Ω–µ–π: {arg}")
                    return
            elif arg.startswith("threshold="):
                try:
                    threshold = float(arg.split("=", 1)[1])
                except ValueError:
                    await message.answer(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø–æ—Ä–æ–≥–∞: {arg}")
                    return
            elif arg == "dry-run":
                dry_run = True
            elif arg == "real":
                dry_run = False

        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        from app.core.review_cleanup import estimate_cleanup_time, validate_cleanup_params

        is_valid, error_msg = validate_cleanup_params(mode, days, threshold)
        if not is_valid:
            await message.answer(f"‚ùå {error_msg}")
            return

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ü–µ–Ω–∫—É –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
        if mode in ("dups", "all"):
            estimate = estimate_cleanup_time(mode)
            await message.answer(
                f"‚ö†Ô∏è <b>–û—á–∏—Å—Ç–∫–∞ Review Queue ({mode})</b>\n\n"
                f"üìä –ü—Ä–∏–º–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞:\n"
                f"‚Ä¢ –ó–∞–ø–∏—Å–µ–π: ~{estimate['estimated_reviews']}\n"
                f"‚Ä¢ –í—Ä–µ–º—è: ~{estimate['estimated_time_minutes']} –º–∏–Ω\n"
                f"‚Ä¢ –°–ª–æ–∂–Ω–æ—Å—Ç—å: {estimate['complexity']}\n\n"
                f"üîÑ –ù–∞—á–∏–Ω–∞—é {'–∞–Ω–∞–ª–∏–∑' if dry_run else '–æ—á–∏—Å—Ç–∫—É'}..."
            )

        # –í—ã–ø–æ–ª–Ω—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
        from app.core.review_cleanup import (
            auto_archive_old_reviews,
            cleanup_by_status,
            comprehensive_cleanup,
            find_duplicate_reviews,
        )

        if mode == "old":
            # –ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π
            stats = auto_archive_old_reviews(days_threshold=days or 14, dry_run=dry_run)
            await _send_archive_report(message, stats, dry_run)

        elif mode == "dups":
            # –ü–æ–∏—Å–∫ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
            stats = find_duplicate_reviews(similarity_threshold=threshold or 0.85)
            await _send_duplicates_report(message, stats)

        elif mode == "status":
            # –û—á–∏—Å—Ç–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å—É
            if not target_status:
                await message.answer(
                    "‚ùå –ù–µ —É–∫–∞–∑–∞–Ω —Å—Ç–∞—Ç—É—Å –¥–ª—è –æ—á–∏—Å—Ç–∫–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: resolved, dropped, pending"
                )
                return

            stats = cleanup_by_status(target_status=target_status, dry_run=dry_run)
            await _send_status_cleanup_report(message, stats, target_status, dry_run)

        else:  # mode == "all"
            # –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞
            results = comprehensive_cleanup(
                archive_days=days or 14, similarity_threshold=threshold or 0.85, dry_run=dry_run
            )
            await _send_comprehensive_report(message, results, dry_run)

        # –õ–æ–≥–∏—Ä—É–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é
        user_id = message.from_user.id if message.from_user else "unknown"
        logger.info(
            f"Admin {user_id} executed review_clean: mode={mode}, "
            f"days={days}, threshold={threshold}, dry_run={dry_run}"
        )

    except Exception as e:
        logger.error(f"Error in review_clean_handler: {e}")
        await message.answer(
            f"‚ùå <b>–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è review_clean</b>\n\n<code>{str(e)}</code>", parse_mode="HTML"
        )


async def _send_archive_report(message: Message, stats: CleanupStats, dry_run: bool) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç—á–µ—Ç –æ–± –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–∏."""
    dry_prefix = "üß™ [DRY-RUN] " if dry_run else "‚úÖ "

    report = (
        f"{dry_prefix}<b>–ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π</b>\n\n"
        f"üìä <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã:</b>\n"
        f"‚Ä¢ –ü—Ä–æ—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ: {stats.scanned}\n"
        f"‚Ä¢ –ó–∞–∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–æ: {stats.archived}\n"
        f"‚Ä¢ –û—à–∏–±–æ–∫: {stats.errors}\n\n"
        f"üìã <b>–î–µ—Ç–∞–ª–∏:</b>\n"
        f"‚Ä¢ –°—Ç–∞—Ä—ã–µ resolved: {stats.old_resolved}\n"
        f"‚Ä¢ –°—Ç–∞—Ä—ã–µ dropped: {stats.old_dropped}\n\n"
        f"‚è±Ô∏è <b>–í—Ä–µ–º—è:</b> {stats.processing_time_s:.1f}—Å"
    )

    await message.answer(report, parse_mode="HTML")


async def _send_duplicates_report(message: Message, stats: CleanupStats) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç—á–µ—Ç –æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –¥—É–±–ª–∏–∫–∞—Ç–∞—Ö."""
    report = (
        f"üîç <b>–ü–æ–∏—Å–∫ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω</b>\n\n"
        f"üìä <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã:</b>\n"
        f"‚Ä¢ –ü—Ä–æ—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ: {stats.scanned}\n"
        f"‚Ä¢ –ù–∞–π–¥–µ–Ω–æ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: {stats.duplicates_found}\n"
        f"‚Ä¢ –ü—Ä–æ–≤–µ—Ä–æ–∫ –ø–æ—Ö–æ–∂–µ—Å—Ç–∏: {stats.similarity_checks}\n"
        f"‚Ä¢ –û—à–∏–±–æ–∫: {stats.errors}\n\n"
        f"‚è±Ô∏è <b>–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</b>\n"
        f"‚Ä¢ –û–±—â–µ–µ –≤—Ä–µ–º—è: {stats.processing_time_s:.1f}—Å\n"
        f"‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É: {stats.avg_similarity_time_ms:.1f}–º—Å"
    )

    # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –µ—Å–ª–∏ –Ω–∞–π–¥–µ–Ω—ã
    if stats.duplicate_pairs:
        report += "\n\nüîç <b>–ù–∞–π–¥–µ–Ω–Ω—ã–µ –¥—É–±–ª–∏–∫–∞—Ç—ã:</b>\n"
        for i, (id1, id2, similarity) in enumerate(stats.duplicate_pairs[:5], 1):
            short_id1 = id1.replace("-", "")[-6:] if id1 else "unknown"
            short_id2 = id2.replace("-", "")[-6:] if id2 else "unknown"
            report += f"{i}. [{short_id1}] ~ [{short_id2}] ({similarity:.1%})\n"

        if len(stats.duplicate_pairs) > 5:
            report += f"... –∏ –µ—â–µ {len(stats.duplicate_pairs) - 5} –ø–∞—Ä\n"

        report += "\nüí° <i>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /delete &lt;id&gt; –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤</i>"

    await message.answer(report, parse_mode="HTML")


async def _send_status_cleanup_report(
    message: Message, stats: CleanupStats, status: str, dry_run: bool
) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç—á–µ—Ç –æ–± –æ—á–∏—Å—Ç–∫–µ –ø–æ —Å—Ç–∞—Ç—É—Å—É."""
    dry_prefix = "üß™ [DRY-RUN] " if dry_run else "‚úÖ "

    report = (
        f"{dry_prefix}<b>–û—á–∏—Å—Ç–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å—É: {status}</b>\n\n"
        f"üìä <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã:</b>\n"
        f"‚Ä¢ –ü—Ä–æ—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ: {stats.scanned}\n"
        f"‚Ä¢ –ó–∞–∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–æ: {stats.archived}\n"
        f"‚Ä¢ –û—à–∏–±–æ–∫: {stats.errors}\n\n"
        f"‚è±Ô∏è <b>–í—Ä–µ–º—è:</b> {stats.processing_time_s:.1f}—Å"
    )

    await message.answer(report, parse_mode="HTML")


async def _send_comprehensive_report(
    message: Message, results: dict[str, CleanupStats], dry_run: bool
) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –æ—Ç—á–µ—Ç –æ–± –æ—á–∏—Å—Ç–∫–µ."""
    dry_prefix = "üß™ [DRY-RUN] " if dry_run else "‚úÖ "

    # –°—É–º–º–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    total_scanned = sum(stats.scanned for stats in results.values())
    total_archived = sum(stats.archived for stats in results.values())
    total_duplicates = sum(stats.duplicates_found for stats in results.values())
    total_errors = sum(stats.errors for stats in results.values())
    total_time = sum(stats.processing_time_s for stats in results.values())

    report = (
        f"{dry_prefix}<b>–ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ Review Queue</b>\n\n"
        f"üìä <b>–û–±—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:</b>\n"
        f"‚Ä¢ –ü—Ä–æ—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ: {total_scanned}\n"
        f"‚Ä¢ –ó–∞–∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–æ: {total_archived}\n"
        f"‚Ä¢ –ù–∞–π–¥–µ–Ω–æ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: {total_duplicates}\n"
        f"‚Ä¢ –û—à–∏–±–æ–∫: {total_errors}\n\n"
        f"‚è±Ô∏è <b>–í—Ä–µ–º—è:</b> {total_time:.1f}—Å\n\n"
    )

    # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª–∏ –ø–æ –∫–∞–∂–¥–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
    if "archive" in results:
        archive_stats = results["archive"]
        report += (
            f"üóÇÔ∏è <b>–ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–µ:</b>\n"
            f"‚Ä¢ Resolved: {archive_stats.old_resolved}\n"
            f"‚Ä¢ Dropped: {archive_stats.old_dropped}\n\n"
        )

    if "duplicates" in results:
        dup_stats = results["duplicates"]
        if dup_stats.duplicate_pairs:
            report += f"üîç <b>–î—É–±–ª–∏–∫–∞—Ç—ã ({len(dup_stats.duplicate_pairs)}):</b>\n"
            for i, (id1, id2, similarity) in enumerate(dup_stats.duplicate_pairs[:3], 1):
                short_id1 = id1.replace("-", "")[-6:] if id1 else "unknown"
                short_id2 = id2.replace("-", "")[-6:] if id2 else "unknown"
                report += f"{i}. [{short_id1}] ~ [{short_id2}] ({similarity:.1%})\n"

            if len(dup_stats.duplicate_pairs) > 3:
                report += f"... –∏ –µ—â–µ {len(dup_stats.duplicate_pairs) - 3} –ø–∞—Ä\n"

    await message.answer(report, parse_mode="HTML")


@router.message(F.text == "/review_clean_help")
async def review_clean_help_handler(message: Message) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø—Ä–∞–≤–∫—É –ø–æ –∫–æ–º–∞–Ω–¥–∞–º –æ—á–∏—Å—Ç–∫–∏ Review Queue."""
    if not _is_admin(message):
        await message.answer("‚ùå –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
        return

    help_text = (
        "üßπ <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –æ—á–∏—Å—Ç–∫–µ Review Queue</b>\n\n"
        "üìã <b>–û—Å–Ω–æ–≤–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞:</b>\n"
        "<code>/review_clean [—Ä–µ–∂–∏–º] [–ø–∞—Ä–∞–º–µ—Ç—Ä—ã]</code>\n\n"
        "üéõÔ∏è <b>–†–µ–∂–∏–º—ã –æ—á–∏—Å—Ç–∫–∏:</b>\n"
        "‚Ä¢ <code>old</code> - –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏\n"
        "‚Ä¢ <code>dups</code> - –Ω–∞–π—Ç–∏ –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É\n"
        "‚Ä¢ <code>status</code> - –æ—á–∏—Å—Ç–∏—Ç—å –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É —Å—Ç–∞—Ç—É—Å—É\n"
        "‚Ä¢ <code>all</code> - –∫–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)\n\n"
        "‚öôÔ∏è <b>–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:</b>\n"
        "‚Ä¢ <code>days=N</code> - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 14)\n"
        "‚Ä¢ <code>threshold=0.85</code> - –ø–æ—Ä–æ–≥ –ø–æ—Ö–æ–∂–µ—Å—Ç–∏ –¥–ª—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ (0.0-1.0)\n"
        "‚Ä¢ <code>dry-run</code> - —Ç–æ–ª—å–∫–æ –∞–Ω–∞–ª–∏–∑ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)\n"
        "‚Ä¢ <code>real</code> - —Ä–µ–∞–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è (–æ—Å—Ç–æ—Ä–æ–∂–Ω–æ!)\n\n"
        "üí° <b>–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:</b>\n\n"
        "<code>/review_clean old days=7</code>\n"
        "‚îî –ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø–∏—Å–∏ —Å—Ç–∞—Ä—à–µ 7 –¥–Ω–µ–π (—Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º)\n\n"
        "<code>/review_clean dups threshold=0.9</code>\n"
        "‚îî –ù–∞–π—Ç–∏ –¥—É–±–ª–∏–∫–∞—Ç—ã —Å –ø–æ—Ö–æ–∂–µ—Å—Ç—å—é >90%\n\n"
        "<code>/review_clean status resolved</code>\n"
        "‚îî –ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ resolved –∑–∞–ø–∏—Å–∏ (—Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º)\n\n"
        "<code>/review_clean all real</code>\n"
        "‚îî –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏\n\n"
        "‚ö†Ô∏è <b>–í–∞–∂–Ω—ã–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è:</b>\n"
        "‚Ä¢ –í—Å–µ–≥–¥–∞ –Ω–∞—á–∏–Ω–∞–π—Ç–µ —Å —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞ (dry-run)\n"
        "‚Ä¢ –û–ø–µ—Ä–∞—Ü–∏–∏ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ–æ–±—Ä–∞—Ç–∏–º—ã\n"
        "‚Ä¢ –ü–æ–∏—Å–∫ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –≤—Ä–µ–º—è –¥–ª—è –±–æ–ª—å—à–∏—Ö –æ—á–µ—Ä–µ–¥–µ–π\n"
        "‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–µ–ª–∞—Ç—å backup –ø–µ—Ä–µ–¥ –º–∞—Å—Å–æ–≤—ã–º–∏ –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏\n\n"
        "üîç <b>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
        "<code>/review_clean_help</code> - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n"
        "<code>/review</code> - –ø—Ä–æ—Å–º–æ—Ç—Ä —Ç–µ–∫—É—â–µ–π –æ—á–µ—Ä–µ–¥–∏\n"
        "<code>/admin_help</code> - –≤—Å–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã\n"
    )

    await message.answer(help_text, parse_mode="HTML")


@router.message(F.text == "/review_stats")
async def review_stats_handler(message: Message) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É Review Queue."""
    if not _is_admin(message):
        await message.answer("‚ùå –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
        return

    try:
        from app.core.review_queue import get_review_stats
        from app.gateways.notion_review import fetch_all_reviews

        # –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        basic_stats = get_review_stats()

        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        all_reviews = fetch_all_reviews()

        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
        status_counts: dict[str, int] = {}
        for review in all_reviews:
            status = review.get("status", "unknown")
            status_counts[status] = status_counts.get(status, 0) + 1

        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–æ–∑—Ä–∞—Å—Ç –∑–∞–ø–∏—Å–µ–π
        from datetime import datetime

        now = datetime.now(UTC)
        age_groups = {"week": 0, "month": 0, "quarter": 0, "older": 0}

        for review in all_reviews:
            updated_str = review.get("last_edited_time", "")
            if updated_str:
                try:
                    updated_date = datetime.fromisoformat(updated_str.replace("Z", "+00:00"))
                    days_old = (now - updated_date).days

                    if days_old <= 7:
                        age_groups["week"] += 1
                    elif days_old <= 30:
                        age_groups["month"] += 1
                    elif days_old <= 90:
                        age_groups["quarter"] += 1
                    else:
                        age_groups["older"] += 1
                except ValueError:
                    pass

        stats_text = (
            f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ Review Queue</b>\n\n"
            f"üìã <b>–û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>\n"
            f"‚Ä¢ –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {len(all_reviews)}\n"
            f"‚Ä¢ –û—Ç–∫—Ä—ã—Ç—ã—Ö: {basic_stats.get('total_open', 0)}\n\n"
            f"üìà <b>–ü–æ —Å—Ç–∞—Ç—É—Å–∞–º:</b>\n"
        )

        for status, count in sorted(status_counts.items()):
            emoji = {
                "pending": "‚è≥",
                "needs-review": "üîç",
                "resolved": "‚úÖ",
                "dropped": "‚ùå",
                "archived": "üóÇÔ∏è",
            }.get(status, "üìÑ")
            stats_text += f"‚Ä¢ {emoji} {status}: {count}\n"

        stats_text += (
            f"\nüìÖ <b>–ü–æ –≤–æ–∑—Ä–∞—Å—Ç—É:</b>\n"
            f"‚Ä¢ –ù–µ–¥–µ–ª—è: {age_groups['week']}\n"
            f"‚Ä¢ –ú–µ—Å—è—Ü: {age_groups['month']}\n"
            f"‚Ä¢ –ö–≤–∞—Ä—Ç–∞–ª: {age_groups['quarter']}\n"
            f"‚Ä¢ –°—Ç–∞—Ä—à–µ: {age_groups['older']}\n\n"
            f"üí° <i>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /review_clean –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π</i>"
        )

        await message.answer(stats_text, parse_mode="HTML")

        # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        user_id = message.from_user.id if message.from_user else "unknown"
        logger.info(f"Admin {user_id} requested review stats")

    except Exception as e:
        logger.error(f"Error in review_stats_handler: {e}")
        await message.answer(
            f"‚ùå <b>–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏</b>\n\n<code>{str(e)}</code>", parse_mode="HTML"
        )
