"""
–°–∏—Å—Ç–µ–º–∞ —Å–±–æ—Ä–∫–∏ –ø–æ–≤–µ—Å—Ç–æ–∫ –∏–∑ –∫–æ–º–º–∏—Ç–æ–≤ –∏ –∑–∞–¥–∞—á –Ω–∞ —Ä–µ–≤—å—é.

–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ç—Ä–∏ —Ä–µ–∂–∏–º–∞:
- Meeting: –ø–æ–≤–µ—Å—Ç–∫–∞ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –≤—Å—Ç—Ä–µ—á–µ
- Person: –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –ø–æ–≤–µ—Å—Ç–∫–∞ (–≤—Ö–æ–¥—è—â–∏–µ –∏ –∏—Å—Ö–æ–¥—è—â–∏–µ –∫–æ–º–º–∏—Ç—ã)
- Tag: —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø–æ–≤–µ—Å—Ç–∫–∞ –ø–æ —Ç–µ–≥—É

–ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–∞ —Å —Å–∏—Å—Ç–µ–º–æ–π –º–µ—Ç—Ä–∏–∫ –∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ gateway.
"""

from __future__ import annotations

import hashlib
import logging
from dataclasses import dataclass
from datetime import UTC, datetime, timedelta
from typing import Any

from app.core.clients import get_notion_http_client
from app.core.metrics import timer
from app.gateways.notion_commits import _map_commit_page
from app.settings import settings

logger = logging.getLogger(__name__)

NOTION_API = "https://api.notion.com/v1"


@dataclass
class AgendaBundle:
    """–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–≤–µ—Å—Ç–∫–∏."""

    context_type: str  # Meeting/Person/Tag
    context_key: str  # meeting_id –∏–ª–∏ People/Name –∏–ª–∏ tag
    debts_mine: list[dict[str, Any]]  # –ú–æ–∏ –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞
    debts_theirs: list[dict[str, Any]]  # –ò—Ö –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞
    review_open: list[dict[str, Any]]  # –û—Ç–∫—Ä—ã—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã –Ω–∞ —Ä–µ–≤—å—é
    recent_done: list[dict[str, Any]]  # –ù–µ–¥–∞–≤–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ
    commits_linked: list[str]  # ID –∫–æ–º–º–∏—Ç–æ–≤ –¥–ª—è relation
    summary_md: str  # Markdown —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
    tags: list[str]  # –¢–µ–≥–∏ –¥–ª—è –ø–æ–≤–µ—Å—Ç–∫–∏
    people: list[str]  # –£—á–∞—Å—Ç–Ω–∏–∫–∏
    raw_hash: str  # –•–µ—à –¥–ª—è –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏


def _query_commits(
    filter_: dict[str, Any], sorts: list[dict] | None = None, page_size: int = 50
) -> list[dict[str, Any]]:
    """–ó–∞–ø—Ä–æ—Å –∫–æ–º–º–∏—Ç–æ–≤ –∏–∑ Notion —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞."""
    if not settings.commits_db_id:
        return []  # Graceful fallback –µ—Å–ª–∏ –±–∞–∑–∞ Commits –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞

    client = get_notion_http_client()
    try:
        payload: dict[str, Any] = {
            "page_size": page_size,
            "filter": filter_,
        }

        if sorts:
            payload["sorts"] = sorts
        else:
            payload["sorts"] = [{"property": "Due", "direction": "ascending"}]

        response = client.post(
            f"{NOTION_API}/databases/{settings.commits_db_id}/query", json=payload
        )
        response.raise_for_status()

        results = response.json().get("results", [])
        return [_map_commit_page(page) for page in results]

    except Exception as e:
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –Ω–æ –Ω–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º —Ä–∞–±–æ—Ç—É
        import logging

        logger = logging.getLogger(__name__)
        logger.warning(f"Commits database query failed: {e}. Returning empty results.")
        return []

    finally:
        client.close()


def _query_review(filter_: dict[str, Any], page_size: int = 50) -> list[dict[str, Any]]:
    """–ó–∞–ø—Ä–æ—Å —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Ä–µ–≤—å—é –∏–∑ Notion."""
    if not settings.review_db_id:
        return []  # Graceful fallback –µ—Å–ª–∏ –±–∞–∑–∞ Review –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞

    client = get_notion_http_client()
    try:
        payload = {
            "page_size": page_size,
            "filter": filter_,
            "sorts": [{"timestamp": "last_edited_time", "direction": "descending"}],
        }

        response = client.post(
            f"{NOTION_API}/databases/{settings.review_db_id}/query", json=payload
        )
        response.raise_for_status()

        results = response.json().get("results", [])
        return [_map_review_page(page) for page in results]

    except Exception as e:
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –Ω–æ –Ω–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º —Ä–∞–±–æ—Ç—É
        import logging

        logger = logging.getLogger(__name__)
        logger.warning(f"Review database query failed: {e}. Continuing without review data.")
        return []

    finally:
        client.close()


def _map_review_page(page: dict[str, Any]) -> dict[str, Any]:
    """–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ä–µ–≤—å—é –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç."""
    props = page["properties"]

    def _extract_field(field_name: str, field_type: str) -> Any:
        field = props.get(field_name, {})
        if field_type == "rich_text":
            return "".join(item.get("plain_text", "") for item in field.get("rich_text", []))
        elif field_type == "select":
            select_value = field.get("select")
            return select_value.get("name") if select_value else None
        elif field_type == "multi_select":
            return [item["name"] for item in field.get("multi_select", [])]
        elif field_type == "relation":
            return [item["id"] for item in field.get("relation", [])]
        return field.get(field_type)

    return {
        "id": page["id"],
        "url": page.get("url", ""),
        "text": _extract_field("Commit text", "rich_text"),
        "reason": _extract_field("Reason", "rich_text"),  # –í Review —ç—Ç–æ rich_text, –Ω–µ multi_select
        "tags": [],  # –í Review –Ω–µ—Ç –ø–æ–ª—è Tags, –æ—Å—Ç–∞–≤–ª—è–µ–º –ø—É—Å—Ç—ã–º
        "status": _extract_field("Status", "select"),
        "meeting_ids": _extract_field("Meeting", "relation"),
        "context": _extract_field("Context", "rich_text"),  # –î–æ–±–∞–≤–ª—è–µ–º Context
    }


def _format_commit_line(commit: dict[str, Any], *, show_requester: bool = False) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –∫–æ–º–º–∏—Ç–∞ –¥–ª—è –ø–æ–≤–µ—Å—Ç–∫–∏."""
    assignees = commit.get("assignees", [])
    from_person = commit.get("from_person", [])

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–≥–æ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å
    if show_requester:
        who = ", ".join(from_person) if from_person else "‚Äî"
        who_emoji = "üíº"  # –ó–∞–∫–∞–∑—á–∏–∫
    else:
        who = ", ".join(assignees) if assignees else "‚Äî"
        who_emoji = "üë§"  # –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å

    due = commit.get("due_date") or "‚Äî"
    status_emoji = {"open": "üü•", "done": "‚úÖ", "dropped": "‚ùå"}.get(
        commit.get("status", "open"), "‚¨ú"
    )

    return f"{status_emoji} {commit['text']} ‚Äî {who_emoji} {who} | ‚è≥ {due}"


def _format_review_line(review: dict[str, Any]) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ —Ä–µ–≤—å—é –¥–ª—è –ø–æ–≤–µ—Å—Ç–∫–∏."""
    reason = review.get("reason", "")
    reason_text = f" ({reason})" if reason else ""
    return f"‚ùì {review['text']}{reason_text}"


def _extract_tags_and_people(
    commits: list[dict[str, Any]], reviews: list[dict[str, Any]]
) -> tuple[list[str], list[str]]:
    """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–≥–æ–≤ –∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–∑ –∫–æ–º–º–∏—Ç–æ–≤ –∏ —Ä–µ–≤—å—é."""
    tags = set()
    people = set()

    for commit in commits:
        tags.update(commit.get("tags", []))
        people.update(commit.get("assignees", []))

    for review in reviews:
        tags.update(review.get("tags", []))

    return sorted(list(tags)), sorted(list(people))


def _generate_hash(
    context_type: str, context_key: str, commits: list[dict], reviews: list[dict]
) -> str:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ö–µ—à–∞ –¥–ª—è –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏ –ø–æ–≤–µ—Å—Ç–æ–∫."""
    content = f"{context_type}:{context_key}"
    commit_ids = sorted([c["id"] for c in commits])
    review_ids = sorted([r["id"] for r in reviews])
    content += f":{','.join(commit_ids)}:{','.join(review_ids)}"

    return hashlib.sha256(content.encode()).hexdigest()[:16]


@timer("agenda.build_meeting")
def build_for_meeting(meeting_id: str) -> AgendaBundle:
    """–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –ø–æ–≤–µ—Å—Ç–∫–∏ –¥–ª—è –≤—Å—Ç—Ä–µ—á–∏."""
    # –ö–æ–º–º–∏—Ç—ã —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –≤—Å—Ç—Ä–µ—á–µ–π
    commits_filter = {"property": "Meeting", "relation": {"contains": meeting_id}}
    commits = _query_commits(commits_filter)

    # –†–µ–≤—å—é —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –≤—Å—Ç—Ä–µ—á–µ–π
    review_filter = {"property": "Meeting", "relation": {"contains": meeting_id}}
    reviews = _query_review(review_filter)

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
    md_parts = []
    if commits:
        md_parts.append("üßæ <b>–ö–æ–º–º–∏—Ç—ã –≤—Å—Ç—Ä–µ—á–∏</b>")
        md_parts.extend(_format_commit_line(c) for c in commits)

    if reviews:
        md_parts.append("\n‚ùì <b>–û—Ç–∫—Ä—ã—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã</b>")
        md_parts.extend(_format_review_line(r) for r in reviews)

    tags, people = _extract_tags_and_people(commits, reviews)
    linked_ids = [c["id"] for c in commits]
    raw_hash = _generate_hash("Meeting", meeting_id, commits, reviews)

    return AgendaBundle(
        context_type="Meeting",
        context_key=meeting_id,
        debts_mine=commits,
        debts_theirs=[],
        review_open=reviews,
        recent_done=[],
        commits_linked=linked_ids,
        summary_md="\n".join(md_parts) if md_parts else "üìã –ü–æ–≤–µ—Å—Ç–∫–∞ –ø—É—Å—Ç–∞",
        tags=tags,
        people=people,
        raw_hash=raw_hash,
    )


@timer("agenda.build_person")
def build_for_person(person_name_en: str) -> AgendaBundle:
    """–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–π –ø–æ–≤–µ—Å—Ç–∫–∏."""
    # –ú–æ–∏ –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞ –ø–µ—Ä–µ–¥ —ç—Ç–∏–º —á–µ–ª–æ–≤–µ–∫–æ–º (–∑–∞–¥–∞—á–∏, –∫–æ—Ç–æ—Ä—ã–µ —è –≤–∑—è–ª)
    mine_filter = {
        "and": [
            {
                "property": "From",
                "multi_select": {"contains": person_name_en},
            },  # –ó–∞–∫–∞–∑—á–∏–∫ = —ç—Ç–æ—Ç —á–µ–ª–æ–≤–µ–∫
            {"property": "Status", "select": {"does_not_equal": "done"}},
            {"property": "Status", "select": {"does_not_equal": "dropped"}},
        ]
    }
    debts_mine = _query_commits(mine_filter)

    # –ò—Ö –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞ (–∑–∞–¥–∞—á–∏, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–µ–Ω –≤—ã–ø–æ–ª–Ω–∏—Ç—å —ç—Ç–æ—Ç —á–µ–ª–æ–≤–µ–∫)
    theirs_filter = {
        "and": [
            {
                "property": "Assignee",
                "multi_select": {"contains": person_name_en},
            },  # –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å = —ç—Ç–æ—Ç —á–µ–ª–æ–≤–µ–∫
            {"property": "Status", "select": {"does_not_equal": "done"}},
            {"property": "Status", "select": {"does_not_equal": "dropped"}},
        ]
    }
    debts_theirs = _query_commits(theirs_filter)

    # –†–µ–≤—å—é —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —ç—Ç–∏–º —á–µ–ª–æ–≤–µ–∫–æ–º (—á–µ—Ä–µ–∑ Assignee)
    review_filter = {"property": "Assignee", "multi_select": {"contains": person_name_en}}
    reviews = _query_review(review_filter)

    # –ù–µ–¥–∞–≤–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π)
    since_date = (datetime.now(UTC) - timedelta(days=7)).date().isoformat()
    done_filter = {
        "and": [
            {
                "or": [
                    {"property": "Assignee", "multi_select": {"contains": person_name_en}},
                    {"property": "Tags", "multi_select": {"contains": f"People/{person_name_en}"}},
                ]
            },
            {"property": "Status", "select": {"equals": "done"}},
            {"timestamp": "last_edited_time", "last_edited_time": {"on_or_after": since_date}},
        ]
    }
    recent_done = _query_commits(
        done_filter, sorts=[{"timestamp": "last_edited_time", "direction": "descending"}]
    )

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
    md_parts = []

    if debts_mine:
        md_parts.append(f"üìã <b>–ó–∞–¥–∞—á–∏ –æ—Ç {person_name_en} (–∑–∞–∫–∞–∑—á–∏–∫)</b>")
        md_parts.extend(_format_commit_line(c) for c in debts_mine)

    if debts_theirs:
        md_parts.append(f"\nüì§ <b>–ó–∞–¥–∞—á–∏ –¥–ª—è {person_name_en} (–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å)</b>")
        md_parts.extend(_format_commit_line(c, show_requester=True) for c in debts_theirs)

    if reviews:
        md_parts.append("\n‚ùì <b>–û—Ç–∫—Ä—ã—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã</b>")
        md_parts.extend(_format_review_line(r) for r in reviews)

    if recent_done:
        md_parts.append("\n‚úÖ <b>–í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞ –Ω–µ–¥–µ–ª—é</b>")
        md_parts.extend(_format_commit_line(c) for c in recent_done[:5])  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 5

    all_commits = debts_mine + debts_theirs + recent_done
    tags, people = _extract_tags_and_people(all_commits, reviews)
    linked_ids = [c["id"] for c in debts_mine + debts_theirs]
    raw_hash = _generate_hash("Person", f"People/{person_name_en}", all_commits, reviews)

    return AgendaBundle(
        context_type="Person",
        context_key=f"People/{person_name_en}",
        debts_mine=debts_mine,
        debts_theirs=debts_theirs,
        review_open=reviews,
        recent_done=recent_done,
        commits_linked=linked_ids,
        summary_md="\n".join(md_parts) if md_parts else "üìã –ü–æ–≤–µ—Å—Ç–∫–∞ –ø—É—Å—Ç–∞",
        tags=tags,
        people=people,
        raw_hash=raw_hash,
    )


@timer("agenda.build_tag")
def build_for_tag(tag: str) -> AgendaBundle:
    """–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø–æ–≤–µ—Å—Ç–∫–∏ –ø–æ —Ç–µ–≥—É."""
    # –ê–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–º–º–∏—Ç—ã –ø–æ —Ç–µ–≥—É
    commits_filter = {
        "and": [
            {"property": "Tags", "multi_select": {"contains": tag}},
            {"property": "Status", "select": {"does_not_equal": "done"}},
            {"property": "Status", "select": {"does_not_equal": "dropped"}},
        ]
    }
    commits = _query_commits(commits_filter)

    # –†–µ–≤—å—é –ø–æ —Ç–µ–≥—É - –∏—Å–ø–æ–ª—å–∑—É–µ–º Context field –¥–ª—è –ø–æ–∏—Å–∫–∞ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π —Ç–µ–≥–∞
    review_filter = {"property": "Context", "rich_text": {"contains": tag}}
    reviews = _query_review(review_filter)

    # –ù–µ–¥–∞–≤–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –ø–æ —Ç–µ–≥—É
    since_date = (datetime.now(UTC) - timedelta(days=7)).date().isoformat()
    done_filter = {
        "and": [
            {"property": "Tags", "multi_select": {"contains": tag}},
            {"property": "Status", "select": {"equals": "done"}},
            {"timestamp": "last_edited_time", "last_edited_time": {"on_or_after": since_date}},
        ]
    }
    recent_done = _query_commits(
        done_filter, sorts=[{"timestamp": "last_edited_time", "direction": "descending"}]
    )

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
    md_parts = []

    if commits:
        md_parts.append(f"üè∑Ô∏è <b>–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ –ø–æ {tag}</b>")
        md_parts.extend(_format_commit_line(c) for c in commits)

    if reviews:
        md_parts.append("\n‚ùì <b>–û—Ç–∫—Ä—ã—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã</b>")
        md_parts.extend(_format_review_line(r) for r in reviews)

    if recent_done:
        md_parts.append("\n‚úÖ <b>–í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞ –Ω–µ–¥–µ–ª—é</b>")
        md_parts.extend(_format_commit_line(c) for c in recent_done[:10])  # –ë–æ–ª—å—à–µ –¥–ª—è —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö

    all_commits = commits + recent_done
    tags, people = _extract_tags_and_people(all_commits, reviews)
    linked_ids = [c["id"] for c in commits]
    raw_hash = _generate_hash("Tag", tag, all_commits, reviews)

    return AgendaBundle(
        context_type="Tag",
        context_key=tag,
        debts_mine=commits,
        debts_theirs=[],
        review_open=reviews,
        recent_done=recent_done,
        commits_linked=linked_ids,
        summary_md="\n".join(md_parts) if md_parts else "üìã –ü–æ–≤–µ—Å—Ç–∫–∞ –ø—É—Å—Ç–∞",
        tags=tags,
        people=people,
        raw_hash=raw_hash,
    )
