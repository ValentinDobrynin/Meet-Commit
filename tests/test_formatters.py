"""
–¢–µ—Å—Ç—ã –¥–ª—è –º–æ–¥—É–ª—è app/bot/formatters.py
"""

from app.bot.formatters import (
    _escape_html,
    _format_date,
    _format_tags_list,
    _get_urgency_level,
    _truncate_text,
    format_admin_command_response,
    format_commit_card,
    format_error_card,
    format_meeting_card,
    format_people_candidate_card,
    format_progress_card,
    format_review_card,
    format_success_card,
    format_tags_stats_card,
)


class TestUtilityFunctions:
    """–¢–µ—Å—Ç—ã –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""

    def test_escape_html(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ–º —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ HTML —Å–∏–º–≤–æ–ª–æ–≤."""
        assert _escape_html("") == ""
        assert _escape_html("normal text") == "normal text"
        assert (
            _escape_html("<script>alert('xss')</script>")
            == "&lt;script&gt;alert(&#x27;xss&#x27;)&lt;/script&gt;"
        )
        assert _escape_html("Tom & Jerry") == "Tom &amp; Jerry"
        assert _escape_html('"quoted text"') == "&quot;quoted text&quot;"

    def test_truncate_text(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ–º —É–º–Ω–æ–µ –æ–±—Ä–µ–∑–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞."""
        assert _truncate_text("") == "‚Äî"
        assert _truncate_text("short") == "short"
        result = _truncate_text("a" * 100, 50)
        assert result.endswith("...")
        assert len(result) <= 53  # 50 + "..."

        # –¢–µ—Å—Ç —É–º–Ω–æ–≥–æ –æ–±—Ä–µ–∑–∞–Ω–∏—è –ø–æ —Å–ª–æ–≤–∞–º
        long_text = "This is a very long sentence that should be truncated properly"
        result = _truncate_text(long_text, 30)
        assert len(result) <= 33  # 30 + "..."
        assert result.endswith("...")
        assert " " not in result[-10:-3]  # –ù–µ –æ–±—Ä–µ–∑–∞–µ–º –ø–æ—Å—Ä–µ–¥–∏ —Å–ª–æ–≤–∞

    def test_format_date(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç."""
        assert _format_date(None) == "‚Äî"
        assert _format_date("") == "‚Äî"
        assert _format_date("2025-01-15") == "15.01.2025"
        assert _format_date("2025-01-15T10:30:00Z") == "15.01.2025"
        assert _format_date("invalid") == "invalid"

    def test_get_urgency_level(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è —Å—Ä–æ—á–Ω–æ—Å—Ç–∏."""
        from datetime import date, timedelta

        today = date.today()

        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞—Ç–∞–º–∏
        assert _get_urgency_level(None) == "no_due"
        assert _get_urgency_level("") == "no_due"
        assert _get_urgency_level((today - timedelta(days=1)).isoformat()) == "overdue"
        assert _get_urgency_level(today.isoformat()) == "today"
        assert _get_urgency_level((today + timedelta(days=3)).isoformat()) == "this_week"
        assert _get_urgency_level((today + timedelta(days=10)).isoformat()) == "next_week"
        assert _get_urgency_level((today + timedelta(days=30)).isoformat()) == "no_due"

    def test_format_tags_list(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç–µ–≥–æ–≤."""
        assert _format_tags_list([]) == "‚Äî"
        assert _format_tags_list(["Finance/IFRS"]) == "üí∞ <code>IFRS</code>"
        assert (
            _format_tags_list(["Finance/IFRS", "Business/Lavka"])
            == "üí∞ <code>IFRS</code> ‚Ä¢ üè¢ <code>Lavka</code>"
        )

        # –¢–µ—Å—Ç —Å –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ–º –ª–∏–º–∏—Ç–∞
        many_tags = [
            "Finance/IFRS",
            "Business/Lavka",
            "People/John",
            "Projects/Mobile",
            "Topic/Planning",
        ]
        result = _format_tags_list(many_tags, max_tags=3)
        assert "IFRS" in result
        assert "Lavka" in result
        assert "John" in result
        assert "+2" in result  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è


class TestMeetingCard:
    """–¢–µ—Å—Ç—ã —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞—Ä—Ç–æ—á–µ–∫ –≤—Å—Ç—Ä–µ—á."""

    def test_format_meeting_card_basic(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ–º –±–∞–∑–æ–≤–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å—Ç—Ä–µ—á–∏."""
        meeting = {
            "Name": "–§–∏–Ω–∞–Ω—Å–æ–≤–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ",
            "Date": "2025-01-15",
            "Attendees": ["Valya Dobrynin", "Ivan Petrov"],
            "Tags": ["Finance/IFRS", "Business/Planning"],
            "url": "https://notion.so/meeting-123",
        }

        result = format_meeting_card(meeting)

        assert "üìÖ" in result
        assert "–§–∏–Ω–∞–Ω—Å–æ–≤–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ" in result
        assert "15.01.2025" in result
        assert "Valya Dobrynin, Ivan Petrov" in result
        assert "üí∞ <code>IFRS</code>" in result
        assert "üè¢ <code>Planning</code>" in result
        assert "https://notion.so/meeting-123" in result

    def test_format_meeting_card_minimal(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å—Ç—Ä–µ—á–∏ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏."""
        meeting = {}

        result = format_meeting_card(meeting, show_url=False)

        assert "üìÖ" in result
        assert "–í—Å—Ç—Ä–µ—á–∞ –±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è" in result
        assert "‚Äî" in result  # –î–ª—è –ø—É—Å—Ç—ã—Ö –ø–æ–ª–µ–π

    def test_format_meeting_card_long_data(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –¥–ª–∏–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏."""
        meeting = {
            "Name": "–û—á–µ–Ω—å –¥–ª–∏–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤—Å—Ç—Ä–µ—á–∏ –∫–æ—Ç–æ—Ä–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ–±—Ä–µ–∑–∞–Ω–æ –ø–æ –ª–∏–º–∏—Ç—É",
            "Attendees": ["Person1", "Person2", "Person3", "Person4", "Person5", "Person6"],
            "Tags": ["Finance/IFRS", "Business/Lavka", "People/John", "Projects/Mobile"],
        }

        result = format_meeting_card(meeting)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–±—Ä–µ–∑–∞–Ω–æ (60 —Å–∏–º–≤–æ–ª–æ–≤ –ª–∏–º–∏—Ç)
        assert len(meeting["Name"]) > 60  # –ò—Å—Ö–æ–¥–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª–∏–Ω–Ω–æ–µ
        assert "+2" in result  # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏
        assert "+1" in result or "Mobile" not in result  # –û–±—Ä–µ–∑–∞–Ω–∏–µ —Ç–µ–≥–æ–≤


class TestCommitCard:
    """–¢–µ—Å—Ç—ã —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞—Ä—Ç–æ—á–µ–∫ –∫–æ–º–º–∏—Ç–æ–≤."""

    def test_format_commit_card_basic(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ–º –±–∞–∑–æ–≤–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–º–∏—Ç–∞."""
        commit = {
            "text": "–ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –æ—Ç—á–µ—Ç –ø–æ IFRS",
            "status": "open",
            "direction": "mine",
            "assignees": ["Valya Dobrynin"],
            "due_iso": "2025-01-15",
            "confidence": 0.85,
            "short_id": "abc123",
        }

        result = format_commit_card(commit)

        assert "üü°" in result  # open status
        assert "üì§" in result  # mine direction
        assert "–ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –æ—Ç—á–µ—Ç –ø–æ IFRS" in result
        assert "Valya Dobrynin" in result
        assert "15.01.2025" in result
        assert "85%" in result  # confidence
        assert "abc123" in result

    def test_format_commit_card_completed(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–≥–æ –∫–æ–º–º–∏—Ç–∞."""
        commit = {
            "text": "–ó–∞–≤–µ—Ä—à–µ–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞",
            "status": "done",
            "direction": "theirs",
            "assignees": [],
            "due_iso": None,
            "confidence": None,
        }

        result = format_commit_card(commit)

        assert "‚úÖ" in result  # done status
        assert "üì•" in result  # theirs direction
        assert "‚Äî" in result  # empty assignees and due

    def test_format_commit_card_multiple_assignees(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è–º–∏."""
        commit = {
            "text": "Team task",
            "assignees": ["Person1", "Person2", "Person3", "Person4"],
            "status": "open",
        }

        result = format_commit_card(commit)

        assert "Person1, Person2" in result
        assert "+2" in result  # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏


class TestReviewCard:
    """–¢–µ—Å—Ç—ã —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞—Ä—Ç–æ—á–µ–∫ Review."""

    def test_format_review_card_with_reasons(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Review —Å –ø—Ä–∏—á–∏–Ω–∞–º–∏."""
        review = {
            "text": "Unclear task",
            "status": "pending",
            "direction": "theirs",
            "assignees": ["John"],
            "confidence": 0.5,
            "reasons": ["unclear_assignee", "low_confidence"],
            "context": "–û–±—Å—É–∂–¥–µ–Ω–∏–µ –Ω–∞ –≤—Å—Ç—Ä–µ—á–µ –ø–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—é",
        }

        result = format_review_card(review)

        assert "üü†" in result  # pending status
        assert "unclear_assignee" in result
        assert "–û–±—Å—É–∂–¥–µ–Ω–∏–µ –Ω–∞ –≤—Å—Ç—Ä–µ—á–µ" in result
        assert "50%" in result  # confidence


class TestSpecializedCards:
    """–¢–µ—Å—Ç—ã —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫."""

    def test_format_people_candidate_card(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ People."""
        candidate = {"alias": "–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤", "freq": 15, "name_en": "Ivan Petrov"}

        result = format_people_candidate_card(candidate, 5, 20)

        assert "üë§" in result
        assert "–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤" in result
        assert "üî•" in result  # high frequency emoji
        assert "5/20" in result
        assert "Ivan Petrov" in result

    def test_format_tags_stats_card(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç–µ–≥–æ–≤."""
        stats = {
            "total_calls": 1500,
            "total_tags_found": 3000,
            "avg_score": 1.25,
            "cache_hit_rate": 0.85,
            "top_tags": {"Finance/IFRS": 50, "Business/Lavka": 30},
            "mode_breakdown": {"v0": 800, "v1": 700},
        }

        result = format_tags_stats_card(stats)

        assert "üìä" in result
        assert "1,500" in result  # formatted number
        assert "85.0%" in result  # percentage
        assert "üí∞ <code>IFRS</code>" in result  # top tag with emoji
        assert "üè¢ <code>Lavka</code>" in result

    def test_format_admin_command_response(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤."""
        data = {
            "rules_count": 25,
            "cache_hit_rate": 0.75,
            "top_tags": {"Finance/IFRS": 10, "Business/Lavka": 8},
            "errors": ["Invalid regex in rule X"],
        }

        result = format_admin_command_response("–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞", data, success=True)

        assert "‚úÖ" in result
        assert "–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞" in result
        assert "25" in result
        assert "75.0%" in result

    def test_format_error_card(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫."""
        result = format_error_card("–û—à–∏–±–∫–∞ API", "Connection timeout", show_details=True)

        assert "‚ùå" in result
        assert "–û—à–∏–±–∫–∞ API" in result
        assert "Connection timeout" in result
        assert "–ß—Ç–æ –¥–µ–ª–∞—Ç—å:" in result

    def test_format_success_card(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π."""
        details = {"created": 5, "updated": 2, "commit_id": "12345678901234567890"}

        result = format_success_card("–û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞", details)

        assert "‚úÖ" in result
        assert "–û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞" in result
        assert "5" in result
        assert "12345678..." in result  # –°–æ–∫—Ä–∞—â–µ–Ω–Ω—ã–π ID

    def test_format_progress_card(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞."""
        result = format_progress_card(7, 10, "–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤")

        assert "‚è≥" in result
        assert "–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤" in result
        assert "7/10" in result
        assert "70%" in result
        assert "üü©" in result  # Progress bar


class TestIntegration:
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""

    def test_all_formatters_return_strings(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä—ã –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç —Å—Ç—Ä–æ–∫–∏."""
        # Meeting card
        meeting_result = format_meeting_card({})
        assert isinstance(meeting_result, str)
        assert len(meeting_result) > 0

        # Commit card
        commit_result = format_commit_card({})
        assert isinstance(commit_result, str)
        assert len(commit_result) > 0

        # Review card
        review_result = format_review_card({})
        assert isinstance(review_result, str)
        assert len(review_result) > 0

        # People candidate
        candidate_result = format_people_candidate_card({}, 1, 10)
        assert isinstance(candidate_result, str)
        assert len(candidate_result) > 0

        # Tags stats
        stats_result = format_tags_stats_card({})
        assert isinstance(stats_result, str)
        assert len(stats_result) > 0

    def test_html_safety(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å HTML –≤–æ –≤—Å–µ—Ö —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä–∞—Ö."""
        dangerous_data = {
            "Name": "<script>alert('xss')</script>",
            "text": "<img src=x onerror=alert(1)>",
            "alias": "'; DROP TABLE users; --",
        }

        # –í—Å–µ —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä—ã –¥–æ–ª–∂–Ω—ã —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –æ–ø–∞—Å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
        meeting_result = format_meeting_card(dangerous_data)
        assert "<script>" not in meeting_result
        assert "&lt;script&gt;" in meeting_result

        commit_result = format_commit_card(dangerous_data)
        assert "<img" not in commit_result
        assert "&lt;img" in commit_result

        candidate_result = format_people_candidate_card(dangerous_data, 1, 10)
        assert "DROP TABLE" not in candidate_result or "&" in candidate_result

    def test_emoji_consistency(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å —ç–º–æ–¥–∑–∏."""
        # –°—Ç–∞—Ç—É—Å—ã –¥–æ–ª–∂–Ω—ã –∏–º–µ—Ç—å –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω—ã–µ —ç–º–æ–¥–∑–∏
        open_commit = format_commit_card({"status": "open"})
        done_commit = format_commit_card({"status": "done"})

        assert "üü°" in open_commit
        assert "‚úÖ" in done_commit

        # –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω—ã–º–∏
        mine_commit = format_commit_card({"direction": "mine"})
        theirs_commit = format_commit_card({"direction": "theirs"})

        assert "üì§" in mine_commit
        assert "üì•" in theirs_commit

    def test_fallback_values(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ–º fallback –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –ø—É—Å—Ç—ã—Ö –¥–∞–Ω–Ω—ã—Ö."""
        empty_meeting = format_meeting_card({})
        empty_commit = format_commit_card({})

        # –î–æ–ª–∂–Ω—ã —Å–æ–¥–µ—Ä–∂–∞—Ç—å fallback –∑–Ω–∞—á–µ–Ω–∏—è
        assert "‚Äî" in empty_meeting  # –î–ª—è –ø—É—Å—Ç—ã—Ö –ø–æ–ª–µ–π
        assert "‚Äî" in empty_commit
        assert "–í—Å—Ç—Ä–µ—á–∞ –±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è" in empty_meeting
        assert "–ó–∞–¥–∞—á–∞ –±–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è" in empty_commit

    def test_date_formatting_edge_cases(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ–º edge cases —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç."""
        # –¢–µ—Å—Ç —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –¥–∞—Ç–∞–º–∏ - —Ñ—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –∏—Å—Ö–æ–¥–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        result1 = _format_date("not-a-date")
        assert isinstance(result1, str)  # –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É

        result2 = _format_date("2025-13-45")
        assert isinstance(result2, str)  # –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É

        # –¢–µ—Å—Ç —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ —Ñ–æ—Ä–º–∞—Ç–∞–º–∏
        assert _format_date("2025-01-15T00:00:00") == "15.01.2025"
        assert _format_date("2025-01-15") == "15.01.2025"
