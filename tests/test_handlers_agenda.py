"""
–¢–µ—Å—Ç—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –ø–æ–≤–µ—Å—Ç–æ–∫ –≤ Telegram.
"""

from unittest.mock import AsyncMock, Mock, patch

import pytest
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message, User

from app.bot.handlers_agenda import (
    AgendaStates,
    _build_agenda_keyboard,
    _build_main_menu_keyboard,
    _build_people_keyboard,
    _build_tags_keyboard,
    _generate_meeting_agenda,
    _generate_person_agenda,
    _generate_tag_agenda,
    callback_agenda_back,
    callback_agenda_cancel,
    callback_agenda_meeting,
    callback_agenda_person,
    callback_agenda_tag,
    callback_person_selected,
    callback_tag_selected,
    cmd_agenda_meeting_direct,
    cmd_agenda_menu,
    cmd_agenda_person_direct,
    cmd_agenda_tag_direct,
    handle_meeting_id_input,
    handle_person_name_input,
    handle_tag_name_input,
)
from app.core.agenda_builder import AgendaBundle


class TestKeyboards:
    """–¢–µ—Å—Ç—ã –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–π —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä."""

    def test_build_main_menu_keyboard(self):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é."""
        keyboard = _build_main_menu_keyboard()

        assert keyboard.inline_keyboard is not None
        assert len(keyboard.inline_keyboard) == 2  # 2 —Ä—è–¥–∞ –∫–Ω–æ–ø–æ–∫

        # –ü–µ—Ä–≤—ã–π —Ä—è–¥: –≤—Å—Ç—Ä–µ—á–∞ –∏ —á–µ–ª–æ–≤–µ–∫
        first_row = keyboard.inline_keyboard[0]
        assert len(first_row) == 2
        assert first_row[0].text == "üè¢ –ü–æ –≤—Å—Ç—Ä–µ—á–µ"
        assert first_row[0].callback_data == "agenda:type:meeting"
        assert first_row[1].text == "üë§ –ü–æ —á–µ–ª–æ–≤–µ–∫—É"
        assert first_row[1].callback_data == "agenda:type:person"

        # –í—Ç–æ—Ä–æ–π —Ä—è–¥: —Ç–µ–≥ –∏ –æ—Ç–º–µ–Ω–∞
        second_row = keyboard.inline_keyboard[1]
        assert len(second_row) == 2
        assert second_row[0].text == "üè∑Ô∏è –ü–æ —Ç–µ–≥—É"
        assert second_row[0].callback_data == "agenda:type:tag"
        assert second_row[1].text == "‚ùå –û—Ç–º–µ–Ω–∞"
        assert second_row[1].callback_data == "agenda:cancel"

    @patch("app.bot.handlers_agenda.load_people")
    def test_build_people_keyboard(self, mock_load_people):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ª—é–¥–µ–π."""
        mock_load_people.return_value = [
            {"name_en": "Valya Dobrynin", "aliases": ["Valya", "–í–∞–ª–µ–Ω—Ç–∏–Ω"]},
            {"name_en": "Sasha Katanov", "aliases": ["Sasha", "–ê–ª–µ–∫—Å–∞–Ω–¥—Ä"]},
            {"name_en": "Ivan Petrov", "aliases": ["Ivan", "–ò–≤–∞–Ω"]},
        ]

        keyboard = _build_people_keyboard()

        assert keyboard.inline_keyboard is not None
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –ª—é–¥–µ–π
        found_people = []
        for row in keyboard.inline_keyboard[:-2]:  # –ò—Å–∫–ª—é—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 —Ä—è–¥–∞ (manual + back)
            for button in row:
                if button.text.startswith("üë§"):
                    found_people.append(button.text)

        assert len(found_people) > 0

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∫–Ω–æ–ø–∫–∏
        manual_row = keyboard.inline_keyboard[-2]
        assert manual_row[0].text == "‚úçÔ∏è –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é"
        assert manual_row[0].callback_data == "agenda:person:manual"

        back_row = keyboard.inline_keyboard[-1]
        assert back_row[0].text == "üîô –ù–∞–∑–∞–¥"
        assert back_row[0].callback_data == "agenda:back"

    def test_build_tags_keyboard(self):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Ç–µ–≥–æ–≤."""
        keyboard = _build_tags_keyboard()

        assert keyboard.inline_keyboard is not None

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ç–µ–≥–æ–≤
        found_tags = []
        for row in keyboard.inline_keyboard[:-2]:  # –ò—Å–∫–ª—é—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 —Ä—è–¥–∞
            for button in row:
                if button.text.startswith("üè∑Ô∏è"):
                    found_tags.append(button.text)

        assert len(found_tags) > 0
        assert any("Finance/IFRS" in tag for tag in found_tags)

    def test_build_agenda_keyboard(self):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≥–æ—Ç–æ–≤–æ–π –ø–æ–≤–µ—Å—Ç–∫–∏."""
        bundle = AgendaBundle(
            context_type="Meeting",
            context_key="test-meeting",
            debts_mine=[],
            debts_theirs=[],
            review_open=[],
            recent_done=[],
            commits_linked=[],
            summary_md="Test",
            tags=[],
            people=[],
            raw_hash="abcd1234",
        )

        keyboard = _build_agenda_keyboard(bundle)

        assert keyboard.inline_keyboard is not None
        assert len(keyboard.inline_keyboard) == 3  # 3 —Ä—è–¥–∞ –∫–Ω–æ–ø–æ–∫

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–Ω–æ–ø–∫–∏
        save_button = keyboard.inline_keyboard[0][0]
        assert save_button.text == "üì§ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ Notion"
        assert save_button.callback_data.startswith("agenda:save:Meeting:")

        refresh_button = keyboard.inline_keyboard[1][0]
        assert refresh_button.text == "üîÑ –û–±–Ω–æ–≤–∏—Ç—å"
        assert refresh_button.callback_data == "agenda:refresh:Meeting:test-meeting"

        new_button = keyboard.inline_keyboard[2][0]
        assert new_button.text == "üîô –ù–æ–≤–∞—è –ø–æ–≤–µ—Å—Ç–∫–∞"
        assert new_button.callback_data == "agenda:new"


class TestCommands:
    """–¢–µ—Å—Ç—ã –¥–ª—è –∫–æ–º–∞–Ω–¥ –ø–æ–≤–µ—Å—Ç–æ–∫."""

    @pytest.mark.asyncio
    async def test_cmd_agenda_menu(self):
        """–¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã /agenda."""
        mock_message = Mock(spec=Message)
        mock_message.answer = AsyncMock()
        mock_state = Mock(spec=FSMContext)
        mock_state.clear = AsyncMock()

        await cmd_agenda_menu(mock_message, mock_state)

        mock_state.clear.assert_called_once()
        mock_message.answer.assert_called_once()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        call_args = mock_message.answer.call_args
        message_text = call_args[0][0]
        assert "üìã <b>–°–∏—Å—Ç–µ–º–∞ –ø–æ–≤–µ—Å—Ç–æ–∫</b>" in message_text
        assert "üè¢ <b>–ü–æ –≤—Å—Ç—Ä–µ—á–µ</b>" in message_text
        assert "üë§ <b>–ü–æ —á–µ–ª–æ–≤–µ–∫—É</b>" in message_text
        assert "üè∑Ô∏è <b>–ü–æ —Ç–µ–≥—É</b>" in message_text

    @pytest.mark.asyncio
    @patch("app.bot.handlers_agenda._generate_meeting_agenda")
    async def test_cmd_agenda_meeting_direct_with_id(self, mock_generate):
        """–¢–µ—Å—Ç –ø—Ä—è–º–æ–π –∫–æ–º–∞–Ω–¥—ã /agenda_meeting —Å ID."""
        mock_message = Mock(spec=Message)
        mock_message.text = "/agenda_meeting 277344c5-6766-8198-af51-e25b82569c9e"
        mock_generate.return_value = None

        await cmd_agenda_meeting_direct(mock_message)

        mock_generate.assert_called_once_with(mock_message, "277344c5-6766-8198-af51-e25b82569c9e")

    @pytest.mark.asyncio
    async def test_cmd_agenda_meeting_direct_no_id(self):
        """–¢–µ—Å—Ç –ø—Ä—è–º–æ–π –∫–æ–º–∞–Ω–¥—ã /agenda_meeting –±–µ–∑ ID."""
        mock_message = Mock(spec=Message)
        mock_message.text = "/agenda_meeting"
        mock_message.answer = AsyncMock()

        await cmd_agenda_meeting_direct(mock_message)

        mock_message.answer.assert_called_once()
        call_args = mock_message.answer.call_args
        message_text = call_args[0][0]
        assert "‚ùì –£–∫–∞–∂–∏—Ç–µ ID –≤—Å—Ç—Ä–µ—á–∏:" in message_text

    @pytest.mark.asyncio
    @patch("app.bot.handlers_agenda._generate_person_agenda")
    async def test_cmd_agenda_person_direct_with_name(self, mock_generate):
        """–¢–µ—Å—Ç –ø—Ä—è–º–æ–π –∫–æ–º–∞–Ω–¥—ã /agenda_person —Å –∏–º–µ–Ω–µ–º."""
        mock_message = Mock(spec=Message)
        mock_message.text = "/agenda_person Sasha Katanov"
        mock_generate.return_value = None

        await cmd_agenda_person_direct(mock_message)

        mock_generate.assert_called_once_with(mock_message, "Sasha Katanov")

    @pytest.mark.asyncio
    async def test_cmd_agenda_person_direct_no_name(self):
        """–¢–µ—Å—Ç –ø—Ä—è–º–æ–π –∫–æ–º–∞–Ω–¥—ã /agenda_person –±–µ–∑ –∏–º–µ–Ω–∏."""
        mock_message = Mock(spec=Message)
        mock_message.text = "/agenda_person"
        mock_message.answer = AsyncMock()

        await cmd_agenda_person_direct(mock_message)

        mock_message.answer.assert_called_once()
        call_args = mock_message.answer.call_args
        message_text = call_args[0][0]
        assert "‚ùì –£–∫–∞–∂–∏—Ç–µ –∏–º—è —á–µ–ª–æ–≤–µ–∫–∞:" in message_text

    @pytest.mark.asyncio
    @patch("app.bot.handlers_agenda._generate_tag_agenda")
    async def test_cmd_agenda_tag_direct_with_tag(self, mock_generate):
        """–¢–µ—Å—Ç –ø—Ä—è–º–æ–π –∫–æ–º–∞–Ω–¥—ã /agenda_tag —Å —Ç–µ–≥–æ–º."""
        mock_message = Mock(spec=Message)
        mock_message.text = "/agenda_tag Finance/IFRS"
        mock_generate.return_value = None

        await cmd_agenda_tag_direct(mock_message)

        mock_generate.assert_called_once_with(mock_message, "Finance/IFRS")


class TestCallbacks:
    """–¢–µ—Å—Ç—ã –¥–ª—è callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤."""

    @pytest.mark.asyncio
    async def test_callback_agenda_meeting(self):
        """–¢–µ—Å—Ç callback –≤—ã–±–æ—Ä–∞ –ø–æ–≤–µ—Å—Ç–∫–∏ –ø–æ –≤—Å—Ç—Ä–µ—á–µ."""
        mock_callback = Mock(spec=CallbackQuery)
        mock_callback.data = "agenda:type:meeting"
        mock_callback.message = Mock()
        mock_callback.message.edit_text = AsyncMock()
        mock_callback.answer = AsyncMock()

        mock_state = Mock(spec=FSMContext)
        mock_state.set_state = AsyncMock()

        await callback_agenda_meeting(mock_callback, mock_state)

        mock_state.set_state.assert_called_once_with(AgendaStates.waiting_meeting_id)
        mock_callback.message.edit_text.assert_called_once()
        mock_callback.answer.assert_called_once()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        call_args = mock_callback.message.edit_text.call_args
        message_text = call_args[0][0]
        assert "üè¢ <b>–ü–æ–≤–µ—Å—Ç–∫–∞ –ø–æ –≤—Å—Ç—Ä–µ—á–µ</b>" in message_text

    @pytest.mark.asyncio
    async def test_callback_agenda_person(self):
        """–¢–µ—Å—Ç callback –≤—ã–±–æ—Ä–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–π –ø–æ–≤–µ—Å—Ç–∫–∏."""
        mock_callback = Mock(spec=CallbackQuery)
        mock_callback.data = "agenda:type:person"
        mock_callback.message = Mock()
        mock_callback.message.edit_text = AsyncMock()
        mock_callback.answer = AsyncMock()

        mock_state = Mock(spec=FSMContext)
        mock_state.clear = AsyncMock()

        await callback_agenda_person(mock_callback, mock_state)

        mock_state.clear.assert_called_once()
        mock_callback.message.edit_text.assert_called_once()
        mock_callback.answer.assert_called_once()

    @pytest.mark.asyncio
    async def test_callback_agenda_tag(self):
        """–¢–µ—Å—Ç callback –≤—ã–±–æ—Ä–∞ —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø–æ–≤–µ—Å—Ç–∫–∏."""
        mock_callback = Mock(spec=CallbackQuery)
        mock_callback.data = "agenda:type:tag"
        mock_callback.message = Mock()
        mock_callback.message.edit_text = AsyncMock()
        mock_callback.answer = AsyncMock()

        mock_state = Mock(spec=FSMContext)
        mock_state.clear = AsyncMock()

        await callback_agenda_tag(mock_callback, mock_state)

        mock_state.clear.assert_called_once()
        mock_callback.message.edit_text.assert_called_once()
        mock_callback.answer.assert_called_once()

    @pytest.mark.asyncio
    @patch("app.bot.handlers_agenda._generate_person_agenda")
    async def test_callback_person_selected_specific(self, mock_generate):
        """–¢–µ—Å—Ç –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞."""
        mock_callback = Mock(spec=CallbackQuery)
        mock_callback.data = "agenda:person:Sasha Katanov"
        mock_callback.message = Mock()
        mock_callback.answer = AsyncMock()
        mock_generate.return_value = None

        await callback_person_selected(mock_callback)

        mock_generate.assert_called_once_with(mock_callback.message, "Sasha Katanov")
        mock_callback.answer.assert_called_once()

    @pytest.mark.asyncio
    async def test_callback_person_selected_manual(self):
        """–¢–µ—Å—Ç –≤—ã–±–æ—Ä–∞ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏."""
        mock_callback = Mock(spec=CallbackQuery)
        mock_callback.data = "agenda:person:manual"
        mock_callback.message = Mock()
        mock_callback.message.edit_text = AsyncMock()
        mock_callback.answer = AsyncMock()

        await callback_person_selected(mock_callback)

        mock_callback.message.edit_text.assert_called_once()
        mock_callback.answer.assert_called_once()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        call_args = mock_callback.message.edit_text.call_args
        message_text = call_args[0][0]
        assert "–í–≤–µ–¥–∏—Ç–µ –∏–º—è —á–µ–ª–æ–≤–µ–∫–∞" in message_text

    @pytest.mark.asyncio
    @patch("app.bot.handlers_agenda._generate_tag_agenda")
    async def test_callback_tag_selected_specific(self, mock_generate):
        """–¢–µ—Å—Ç –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–µ–≥–∞."""
        mock_callback = Mock(spec=CallbackQuery)
        mock_callback.data = "agenda:tag:Finance/IFRS"
        mock_callback.message = Mock()
        mock_callback.answer = AsyncMock()
        mock_generate.return_value = None

        await callback_tag_selected(mock_callback)

        mock_generate.assert_called_once_with(mock_callback.message, "Finance/IFRS")
        mock_callback.answer.assert_called_once()

    @pytest.mark.asyncio
    async def test_callback_agenda_back(self):
        """–¢–µ—Å—Ç –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é."""
        mock_callback = Mock(spec=CallbackQuery)
        mock_callback.data = "agenda:back"
        mock_callback.message = Mock()
        mock_callback.message.edit_text = AsyncMock()
        mock_callback.answer = AsyncMock()

        mock_state = Mock(spec=FSMContext)
        mock_state.clear = AsyncMock()

        await callback_agenda_back(mock_callback, mock_state)

        mock_state.clear.assert_called_once()
        mock_callback.message.edit_text.assert_called_once()
        mock_callback.answer.assert_called_once()

    @pytest.mark.asyncio
    async def test_callback_agenda_cancel(self):
        """–¢–µ—Å—Ç –æ—Ç–º–µ–Ω—ã —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–≤–µ—Å—Ç–∫–∏."""
        mock_callback = Mock(spec=CallbackQuery)
        mock_callback.data = "agenda:cancel"
        mock_callback.message = Mock()
        mock_callback.message.edit_text = AsyncMock()
        mock_callback.answer = AsyncMock()

        mock_state = Mock(spec=FSMContext)
        mock_state.clear = AsyncMock()

        await callback_agenda_cancel(mock_callback, mock_state)

        mock_state.clear.assert_called_once()
        mock_callback.message.edit_text.assert_called_once()
        mock_callback.answer.assert_called_once()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        call_args = mock_callback.message.edit_text.call_args
        message_text = call_args[0][0]
        assert "‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–≤–µ—Å—Ç–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ" in message_text


class TestFSMHandlers:
    """–¢–µ—Å—Ç—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ FSM —Å–æ—Å—Ç–æ—è–Ω–∏–π."""

    @pytest.mark.asyncio
    @patch("app.bot.handlers_agenda._generate_meeting_agenda")
    async def test_handle_meeting_id_input_valid(self, mock_generate):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∞–ª–∏–¥–Ω–æ–≥–æ ID –≤—Å—Ç—Ä–µ—á–∏."""
        mock_message = Mock(spec=Message)
        mock_message.text = "277344c5-6766-8198-af51-e25b82569c9e"
        mock_state = Mock(spec=FSMContext)
        mock_state.clear = AsyncMock()
        mock_generate.return_value = None

        await handle_meeting_id_input(mock_message, mock_state)

        mock_state.clear.assert_called_once()
        mock_generate.assert_called_once_with(mock_message, "277344c5-6766-8198-af51-e25b82569c9e")

    @pytest.mark.asyncio
    async def test_handle_meeting_id_input_empty(self):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—É—Å—Ç–æ–≥–æ ID –≤—Å—Ç—Ä–µ—á–∏."""
        mock_message = Mock(spec=Message)
        mock_message.text = "  "  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ —Å –ø—Ä–æ–±–µ–ª–∞–º–∏
        mock_message.answer = AsyncMock()
        mock_state = Mock(spec=FSMContext)
        mock_state.clear = AsyncMock()

        await handle_meeting_id_input(mock_message, mock_state)

        mock_state.clear.assert_called_once()
        mock_message.answer.assert_called_once_with("‚ùå ID –≤—Å—Ç—Ä–µ—á–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")

    @pytest.mark.asyncio
    @patch("app.bot.handlers_agenda._generate_person_agenda")
    async def test_handle_person_name_input_valid(self, mock_generate):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∞–ª–∏–¥–Ω–æ–≥–æ –∏–º–µ–Ω–∏ —á–µ–ª–æ–≤–µ–∫–∞."""
        mock_message = Mock(spec=Message)
        mock_message.text = "John Doe"
        mock_state = Mock(spec=FSMContext)
        mock_state.clear = AsyncMock()
        mock_generate.return_value = None

        await handle_person_name_input(mock_message, mock_state)

        mock_state.clear.assert_called_once()
        mock_generate.assert_called_once_with(mock_message, "John Doe")

    @pytest.mark.asyncio
    @patch("app.bot.handlers_agenda._generate_tag_agenda")
    async def test_handle_tag_name_input_valid(self, mock_generate):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∞–ª–∏–¥–Ω–æ–≥–æ —Ç–µ–≥–∞."""
        mock_message = Mock(spec=Message)
        mock_message.text = "Finance/IFRS"
        mock_state = Mock(spec=FSMContext)
        mock_state.clear = AsyncMock()
        mock_generate.return_value = None

        await handle_tag_name_input(mock_message, mock_state)

        mock_state.clear.assert_called_once()
        mock_generate.assert_called_once_with(mock_message, "Finance/IFRS")


class TestAgendaGeneration:
    """–¢–µ—Å—Ç—ã –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ–≤–µ—Å—Ç–æ–∫."""

    @pytest.mark.asyncio
    @patch("app.bot.handlers_agenda.agenda_builder.build_for_meeting")
    @patch("app.bot.handlers_agenda.format_agenda_card")
    async def test_generate_meeting_agenda_success(self, mock_format, mock_build):
        """–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ–≤–µ—Å—Ç–∫–∏ –≤—Å—Ç—Ä–µ—á–∏."""
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –º–æ–∫–∏
        mock_bundle = AgendaBundle(
            context_type="Meeting",
            context_key="meeting-123",
            debts_mine=[],
            debts_theirs=[],
            review_open=[],
            recent_done=[],
            commits_linked=[],
            summary_md="Test agenda",
            tags=["Finance/IFRS"],
            people=["John Doe"],
            raw_hash="abcd1234",
        )
        mock_build.return_value = mock_bundle
        mock_format.return_value = "Formatted agenda card"

        mock_message = Mock(spec=Message)
        mock_message.answer = AsyncMock()

        # –¢–µ—Å—Ç–∏—Ä—É–µ–º
        await _generate_meeting_agenda(mock_message, "meeting-123")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–∑–æ–≤—ã
        mock_build.assert_called_once_with("meeting-123")
        mock_format.assert_called_once_with(mock_bundle, device_type="mobile")
        mock_message.answer.assert_called_once()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –æ—Ç–≤–µ—Ç–∞
        call_args = mock_message.answer.call_args
        assert call_args[0][0] == "Formatted agenda card"
        assert call_args[1]["parse_mode"] == "HTML"
        assert "reply_markup" in call_args[1]

    @pytest.mark.asyncio
    @patch("app.bot.handlers_agenda.agenda_builder.build_for_meeting")
    async def test_generate_meeting_agenda_error(self, mock_build):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–∫–∏ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ–≤–µ—Å—Ç–∫–∏ –≤—Å—Ç—Ä–µ—á–∏."""
        mock_build.side_effect = Exception("Test error")

        mock_message = Mock(spec=Message)
        mock_message.answer = AsyncMock()

        # –¢–µ—Å—Ç–∏—Ä—É–µ–º
        await _generate_meeting_agenda(mock_message, "invalid-meeting")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        mock_message.answer.assert_called_once()
        call_args = mock_message.answer.call_args
        message_text = call_args[0][0]
        assert "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–≤–µ—Å—Ç–∫–∏ –¥–ª—è –≤—Å—Ç—Ä–µ—á–∏" in message_text
        assert "invalid-meeting" in message_text

    @pytest.mark.asyncio
    @patch("app.bot.handlers_agenda.agenda_builder.build_for_person")
    @patch("app.bot.handlers_agenda.format_agenda_card")
    async def test_generate_person_agenda_success(self, mock_format, mock_build):
        """–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–π –ø–æ–≤–µ—Å—Ç–∫–∏."""
        mock_bundle = AgendaBundle(
            context_type="Person",
            context_key="People/John Doe",
            debts_mine=[{"text": "My task"}],
            debts_theirs=[{"text": "Their task"}],
            review_open=[],
            recent_done=[],
            commits_linked=["commit-1"],
            summary_md="Personal agenda",
            tags=["People/John Doe"],
            people=["John Doe"],
            raw_hash="efgh5678",
        )
        mock_build.return_value = mock_bundle
        mock_format.return_value = "Formatted personal agenda"

        mock_message = Mock(spec=Message)
        mock_message.answer = AsyncMock()

        await _generate_person_agenda(mock_message, "John Doe")

        mock_build.assert_called_once_with("John Doe")
        mock_format.assert_called_once_with(mock_bundle, device_type="mobile")
        mock_message.answer.assert_called_once()

    @pytest.mark.asyncio
    @patch("app.bot.handlers_agenda.agenda_builder.build_for_tag")
    @patch("app.bot.handlers_agenda.format_agenda_card")
    async def test_generate_tag_agenda_success(self, mock_format, mock_build):
        """–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø–æ–≤–µ—Å—Ç–∫–∏."""
        mock_bundle = AgendaBundle(
            context_type="Tag",
            context_key="Finance/IFRS",
            debts_mine=[{"text": "Finance task"}],
            debts_theirs=[],
            review_open=[{"text": "Review question"}],
            recent_done=[{"text": "Completed task"}],
            commits_linked=["commit-2"],
            summary_md="Tag agenda",
            tags=["Finance/IFRS"],
            people=["Finance Team"],
            raw_hash="ijkl9012",
        )
        mock_build.return_value = mock_bundle
        mock_format.return_value = "Formatted tag agenda"

        mock_message = Mock(spec=Message)
        mock_message.answer = AsyncMock()

        await _generate_tag_agenda(mock_message, "Finance/IFRS")

        mock_build.assert_called_once_with("Finance/IFRS")
        mock_format.assert_called_once_with(mock_bundle, device_type="mobile")
        mock_message.answer.assert_called_once()


class TestErrorScenarios:
    """–¢–µ—Å—Ç—ã –¥–ª—è —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ —Å –æ—à–∏–±–∫–∞–º–∏."""

    @pytest.mark.asyncio
    async def test_handle_none_text_message(self):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å None —Ç–µ–∫—Å—Ç–æ–º."""
        mock_message = Mock(spec=Message)
        mock_message.text = None
        mock_message.answer = AsyncMock()
        mock_state = Mock(spec=FSMContext)
        mock_state.clear = AsyncMock()

        await handle_meeting_id_input(mock_message, mock_state)

        mock_state.clear.assert_called_once()
        mock_message.answer.assert_called_once_with("‚ùå ID –≤—Å—Ç—Ä–µ—á–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")

    @pytest.mark.asyncio
    async def test_callback_save_agenda_error(self):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–∫–∏ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–æ–≤–µ—Å—Ç–∫–∏."""
        mock_callback = Mock(spec=CallbackQuery)
        mock_callback.data = "agenda:save:Meeting:abcd"
        mock_callback.answer = AsyncMock()
        mock_callback.message = Mock()
        mock_callback.message.answer = AsyncMock()

        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏ —Ç–µ—Å—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Å –æ—à–∏–±–∫–æ–π
        from app.bot.handlers_agenda import callback_save_agenda

        # –ú–æ–∫–∞–µ–º –æ—à–∏–±–∫—É –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        with patch("app.bot.handlers_agenda.logger"):
            await callback_save_agenda(mock_callback)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–∫–∞–∑–∞–Ω–∞ –∑–∞–≥–ª—É—à–∫–∞ (–ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ –ø–æ–ª–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ)
            mock_callback.answer.assert_called_once_with("üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ Notion...")
            mock_callback.message.answer.assert_called_once()


class TestIntegration:
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã."""

    @pytest.mark.asyncio
    @patch("app.bot.handlers_agenda.agenda_builder.build_for_meeting")
    @patch("app.bot.handlers_agenda.format_agenda_card")
    async def test_full_meeting_agenda_workflow(self, mock_format, mock_build):
        """–¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–≤–µ—Å—Ç–∫–∏ –≤—Å—Ç—Ä–µ—á–∏."""
        # –°–æ–∑–¥–∞–µ–º —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—É—é –ø–æ–≤–µ—Å—Ç–∫—É
        mock_bundle = AgendaBundle(
            context_type="Meeting",
            context_key="277344c5-6766-8198-af51-e25b82569c9e",
            debts_mine=[
                {
                    "id": "commit-1",
                    "text": "Prepare report",
                    "assignees": ["John Doe"],
                    "due_date": "2025-10-15",
                    "status": "open",
                }
            ],
            debts_theirs=[],
            review_open=[{"id": "review-1", "text": "Need clarification", "reason": ["unclear"]}],
            recent_done=[],
            commits_linked=["commit-1"],
            summary_md="üßæ <b>–ö–æ–º–º–∏—Ç—ã –≤—Å—Ç—Ä–µ—á–∏</b>\nüü• Prepare report ‚Äî üë§ John Doe | ‚è≥ 2025-10-15\n\n‚ùì <b>–û—Ç–∫—Ä—ã—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã</b>\n‚ùì Need clarification (unclear)",
            tags=["Finance/IFRS", "Topic/Meeting"],
            people=["John Doe"],
            raw_hash="test1234hash",
        )

        mock_build.return_value = mock_bundle
        mock_format.return_value = (
            "<b>üè¢ –ü–æ–≤–µ—Å—Ç–∫–∞ ‚Äî –í—Å—Ç—Ä–µ—á–∞</b>\n"
            "üìä üë§ –ú–æ–∏: 1 | ‚ùì –í–æ–ø—Ä–æ—Å—ã: 1\n"
            "üè∑Ô∏è Finance/IFRS, Topic/Meeting\n"
            "üë• John Doe\n\n"
            "üßæ –ö–æ–º–º–∏—Ç—ã –≤—Å—Ç—Ä–µ—á–∏\n"
            "üü• Prepare report ‚Äî üë§ John Doe | ‚è≥ 2025-10-15\n"
            "...\n\n"
            "üïí –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: 24.09 12:00 UTC"
        )

        # –°–æ–∑–¥–∞–µ–º –º–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏—è
        mock_user = Mock(spec=User)
        mock_user.id = 12345
        mock_message = Mock(spec=Message)
        mock_message.from_user = mock_user
        mock_message.text = "/agenda_meeting 277344c5-6766-8198-af51-e25b82569c9e"
        mock_message.answer = AsyncMock()

        # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É
        await cmd_agenda_meeting_direct(mock_message)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        mock_build.assert_called_once_with("277344c5-6766-8198-af51-e25b82569c9e")
        mock_format.assert_called_once()
        mock_message.answer.assert_called_once()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ—Ç–≤–µ—Ç–∞
        call_args = mock_message.answer.call_args
        response_text = call_args[0][0]
        assert "üè¢ –ü–æ–≤–µ—Å—Ç–∫–∞ ‚Äî –í—Å—Ç—Ä–µ—á–∞" in response_text
        assert "Finance/IFRS" in response_text
        assert "John Doe" in response_text

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = call_args[1]["reply_markup"]
        assert keyboard is not None
        assert len(keyboard.inline_keyboard) == 3  # save, refresh, new
