"""–¢–µ—Å—Ç—ã –¥–ª—è –Ω–æ–≤—ã—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö –∫–æ–º–∞–Ω–¥."""

from unittest.mock import AsyncMock, patch

import pytest

from app.bot.handlers_admin import retag_handler, tags_validate_handler


class TestTagsValidateHandler:
    """–¢–µ—Å—Ç—ã –∫–æ–º–∞–Ω–¥—ã /tags_validate."""

    @pytest.mark.asyncio
    async def test_tags_validate_success(self):
        """–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏ YAML."""
        mock_message = AsyncMock()
        mock_message.text = "/tags_validate"

        with patch("app.bot.handlers_admin.validate_rules", return_value=[]):
            await tags_validate_handler(mock_message)

            mock_message.answer.assert_called_once()
            call_args = mock_message.answer.call_args[0][0]
            assert "‚úÖ" in call_args
            assert "–≤–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ–π–¥–µ–Ω–∞" in call_args

    @pytest.mark.asyncio
    async def test_tags_validate_with_errors(self):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å –æ—à–∏–±–∫–∞–º–∏."""
        mock_message = AsyncMock()
        mock_message.text = "/tags_validate"

        test_errors = [
            "Invalid regex in Finance/IFRS pattern 0: '[invalid' -> missing closing bracket",
            "Weight must be 0.0-10.0 for tag Finance/Audit: 15.0",
            "Duplicate tag: Finance/IFRS",
        ]

        with patch("app.bot.handlers_admin.validate_rules", return_value=test_errors):
            await tags_validate_handler(mock_message)

            mock_message.answer.assert_called_once()
            call_args = mock_message.answer.call_args[0][0]
            assert "‚ùå" in call_args
            assert f"({len(test_errors)})" in call_args
            assert "Invalid regex" in call_args

    @pytest.mark.asyncio
    async def test_tags_validate_many_errors(self):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å –±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –æ—à–∏–±–æ–∫."""
        mock_message = AsyncMock()
        mock_message.text = "/tags_validate"

        # –°–æ–∑–¥–∞–µ–º –±–æ–ª–µ–µ 20 –æ—à–∏–±–æ–∫
        many_errors = [f"Error {i}" for i in range(25)]

        with patch("app.bot.handlers_admin.validate_rules", return_value=many_errors):
            await tags_validate_handler(mock_message)

            mock_message.answer.assert_called_once()
            call_args = mock_message.answer.call_args[0][0]
            assert "–∏ –µ—â–µ 5 –æ—à–∏–±–æ–∫" in call_args  # 25 - 20 = 5

    @pytest.mark.asyncio
    async def test_tags_validate_exception(self):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏–π –≤ –≤–∞–ª–∏–¥–∞—Ü–∏–∏."""
        mock_message = AsyncMock()
        mock_message.text = "/tags_validate"

        with patch(
            "app.bot.handlers_admin.validate_rules", side_effect=Exception("Validation error")
        ):
            await tags_validate_handler(mock_message)

            mock_message.answer.assert_called_once()
            call_args = mock_message.answer.call_args[0][0]
            assert "‚ùå" in call_args
            assert "Validation error" in call_args


class TestRetagHandler:
    """–¢–µ—Å—Ç—ã –∫–æ–º–∞–Ω–¥—ã /retag."""

    @pytest.fixture
    def mock_page_data(self):
        """–ú–æ–∫–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤—Å—Ç—Ä–µ—á–∏."""
        return {
            "page_id": "12345678-9012-3456-7890-123456789012",
            "title": "Test Meeting",
            "summary_md": "–û–±—Å—É–¥–∏–ª–∏ IFRS –∞—É–¥–∏—Ç –¥–ª—è Lavka –ø—Ä–æ–µ–∫—Ç–∞",
            "current_tags": ["Finance/IFRS", "Topic/Meeting"],
            "url": "https://notion.so/test-meeting",
        }

    @pytest.mark.asyncio
    async def test_retag_dry_run(self, mock_page_data):
        """–¢–µ—Å—Ç dry-run —Ä–µ–∂–∏–º–∞."""
        mock_message = AsyncMock()
        mock_message.text = "/retag 12345678901234567890123456789012 dry-run"

        with patch("app.gateways.notion_meetings.validate_meeting_access", return_value=True):
            with patch(
                "app.gateways.notion_meetings.fetch_meeting_page", return_value=mock_page_data
            ):
                with patch(
                    "app.core.tags.tag_text",
                    return_value=["Finance/IFRS", "Finance/Audit", "Business/Lavka"],
                ):
                    await retag_handler(mock_message)

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—ã–ª–æ –¥–≤–∞ –≤—ã–∑–æ–≤–∞ answer (—Å—Ç–∞—Ç—É—Å + —Ä–µ–∑—É–ª—å—Ç–∞—Ç)
                    assert mock_message.answer.call_count == 2

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ—Ç–≤–µ—Ç–∞
                    final_call = mock_message.answer.call_args_list[-1][0][0]
                    assert "üîç" in final_call  # Dry-run
                    assert "Test Meeting" in final_call
                    assert "Finance/Audit" in final_call  # –ù–æ–≤—ã–π —Ç–µ–≥
                    assert "Business/Lavka" in final_call  # –ù–æ–≤—ã–π —Ç–µ–≥

    @pytest.mark.asyncio
    async def test_retag_real_update(self, mock_page_data):
        """–¢–µ—Å—Ç —Ä–µ–∞–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–µ–≥–æ–≤."""
        mock_message = AsyncMock()
        mock_message.text = "/retag 12345678901234567890123456789012"

        with patch("app.gateways.notion_meetings.validate_meeting_access", return_value=True):
            with patch(
                "app.gateways.notion_meetings.fetch_meeting_page", return_value=mock_page_data
            ):
                with patch(
                    "app.core.tags.tag_text", return_value=["Finance/IFRS", "Finance/Audit"]
                ):
                    with patch(
                        "app.gateways.notion_meetings.update_meeting_tags", return_value=True
                    ) as mock_update:
                        await retag_handler(mock_message)

                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ update_meeting_tags –±—ã–ª –≤—ã–∑–≤–∞–Ω
                        mock_update.assert_called_once()
                        call_args = mock_update.call_args[0]
                        assert call_args[0] == "12345678901234567890123456789012"
                        assert "Finance/IFRS" in call_args[1]
                        assert "Finance/Audit" in call_args[1]

    @pytest.mark.asyncio
    async def test_retag_no_changes(self, mock_page_data):
        """–¢–µ—Å—Ç —Å–ª—É—á–∞—è –∫–æ–≥–¥–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ—Ç."""
        mock_message = AsyncMock()
        mock_message.text = "/retag 12345678901234567890123456789012"

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ –∂–µ —Ç–µ–≥–∏, —á—Ç–æ —É–∂–µ –µ—Å—Ç—å
        with patch("app.gateways.notion_meetings.validate_meeting_access", return_value=True):
            with patch(
                "app.gateways.notion_meetings.fetch_meeting_page", return_value=mock_page_data
            ):
                with patch(
                    "app.core.tags.tag_text", return_value=["Finance/IFRS", "Topic/Meeting"]
                ):
                    await retag_handler(mock_message)

                    final_call = mock_message.answer.call_args_list[-1][0][0]
                    assert "–ò–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ—Ç" in final_call

    @pytest.mark.asyncio
    async def test_retag_access_denied(self):
        """–¢–µ—Å—Ç —Å–ª—É—á–∞—è –∫–æ–≥–¥–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Å—Ç—Ä–∞–Ω–∏—Ü–µ."""
        mock_message = AsyncMock()
        mock_message.text = "/retag 12345678901234567890123456789012"

        with patch("app.gateways.notion_meetings.validate_meeting_access", return_value=False):
            await retag_handler(mock_message)

            mock_message.answer.assert_called()
            call_args = mock_message.answer.call_args[0][0]
            assert "‚ùå" in call_args
            assert "–Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞" in call_args

    @pytest.mark.asyncio
    async def test_retag_no_summary(self, mock_page_data):
        """–¢–µ—Å—Ç —Å–ª—É—á–∞—è –∫–æ–≥–¥–∞ –Ω–µ—Ç summary –¥–ª—è –ø–µ—Ä–µ—Å—á–µ—Ç–∞."""
        mock_message = AsyncMock()
        mock_message.text = "/retag 12345678901234567890123456789012"

        # –£–±–∏—Ä–∞–µ–º summary
        mock_page_data["summary_md"] = ""

        with patch("app.gateways.notion_meetings.validate_meeting_access", return_value=True):
            with patch(
                "app.gateways.notion_meetings.fetch_meeting_page", return_value=mock_page_data
            ):
                await retag_handler(mock_message)

                final_call = mock_message.answer.call_args_list[-1][0][0]
                assert "‚ùå" in final_call
                assert "–ù–µ—Ç summary" in final_call

    @pytest.mark.asyncio
    async def test_retag_update_error(self, mock_page_data):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–∫–∏ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏."""
        mock_message = AsyncMock()
        mock_message.text = "/retag 12345678901234567890123456789012"

        with patch("app.gateways.notion_meetings.validate_meeting_access", return_value=True):
            with patch(
                "app.gateways.notion_meetings.fetch_meeting_page", return_value=mock_page_data
            ):
                with patch("app.core.tags.tag_text", return_value=["Finance/Audit"]):
                    with patch(
                        "app.gateways.notion_meetings.update_meeting_tags",
                        side_effect=Exception("Update failed"),
                    ):
                        await retag_handler(mock_message)

                        final_call = mock_message.answer.call_args_list[-1][0][0]
                        assert "‚ùå" in final_call
                        assert "Update failed" in final_call

    @pytest.mark.asyncio
    async def test_retag_invalid_command_format(self):
        """–¢–µ—Å—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ –∫–æ–º–∞–Ω–¥—ã."""
        mock_message = AsyncMock()
        mock_message.text = "/retag invalid-format"

        await retag_handler(mock_message)

        mock_message.answer.assert_called_once()
        call_args = mock_message.answer.call_args[0][0]
        assert "‚ùå" in call_args
        assert "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç" in call_args

    @pytest.mark.asyncio
    async def test_retag_general_exception(self):
        """–¢–µ—Å—Ç –æ–±—â–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏–π."""
        mock_message = AsyncMock()
        mock_message.text = "/retag 12345678901234567890123456789012"

        with patch(
            "app.gateways.notion_meetings.validate_meeting_access",
            side_effect=Exception("General error"),
        ):
            await retag_handler(mock_message)

            mock_message.answer.assert_called()
            call_args = mock_message.answer.call_args[0][0]
            assert "‚ùå" in call_args
            assert "General error" in call_args
