"""–¢–µ—Å—Ç—ã –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–º –∫–æ–º–∞–Ω–¥–∞–º."""

from __future__ import annotations

from unittest.mock import AsyncMock, MagicMock, patch

import pytest

from app.bot.handlers_admin import _is_admin


class TestAdminAccessControl:
    """–¢–µ—Å—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞."""

    def test_is_admin_with_admin_user(self):
        """–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞."""
        # –°–æ–∑–¥–∞–µ–º –º–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∞–¥–º–∏–Ω—Å–∫–∏–º ID
        message = MagicMock()
        message.from_user.id = 50929545

        # –ú–æ–∫–∞–µ–º _admin_ids_set
        with patch("app.settings._admin_ids_set", {50929545, 123456}):
            assert _is_admin(message) is True

    def test_is_admin_with_regular_user(self):
        """–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        # –°–æ–∑–¥–∞–µ–º –º–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ–±—ã—á–Ω—ã–º ID
        message = MagicMock()
        message.from_user.id = 999999

        # –ú–æ–∫–∞–µ–º _admin_ids_set
        with patch("app.settings._admin_ids_set", {50929545, 123456}):
            assert _is_admin(message) is False

    def test_is_admin_with_no_user(self):
        """–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –±–µ–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        # –°–æ–∑–¥–∞–µ–º –º–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏—è –±–µ–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        message = MagicMock()
        message.from_user = None

        with patch("app.settings._admin_ids_set", {50929545, 123456}):
            assert _is_admin(message) is False

    @pytest.mark.asyncio
    async def test_admin_command_with_admin_user(self):
        """–¢–µ—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∞–¥–º–∏–Ω—Å–∫–æ–π –∫–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–æ–º."""
        from app.bot.handlers_admin import tags_stats_handler

        # –°–æ–∑–¥–∞–µ–º –º–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∞–¥–º–∏–Ω–∞
        message = AsyncMock()
        message.from_user.id = 50929545
        message.answer = AsyncMock()

        # –ú–æ–∫–∞–µ–º —Ñ—É–Ω–∫—Ü–∏–∏
        with (
            patch("app.bot.handlers_admin._is_admin", return_value=True),
            patch(
                "app.bot.handlers_admin.get_tagging_stats",
                return_value={
                    "current_mode": "both",
                    "stats": {"calls_by_mode": {"both": 10}, "calls_by_kind": {"meeting": 5}},
                    "cache_info": {"hits": 8, "misses": 2, "currsize": 5, "maxsize": 100},
                    "mapping_rules": 15,
                    "tags_min_score": 0.8,
                },
            ),
        ):
            await tags_stats_handler(message)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–∏–ª–∞—Å—å (–Ω–µ –±—ã–ª–æ –æ—Ç–∫–∞–∑–∞ –≤ –¥–æ—Å—Ç—É–ø–µ)
            message.answer.assert_called_once()
            call_args = message.answer.call_args[0][0]
            assert "üìä" in call_args
            assert "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã —Ç–µ–≥–∏—Ä–æ–≤–∞–Ω–∏—è" in call_args

    @pytest.mark.asyncio
    async def test_admin_command_with_regular_user(self):
        """–¢–µ—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∞–¥–º–∏–Ω—Å–∫–æ–π –∫–æ–º–∞–Ω–¥—ã –æ–±—ã—á–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º."""
        from app.bot.handlers_admin import tags_stats_handler

        # –°–æ–∑–¥–∞–µ–º –º–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        message = AsyncMock()
        message.from_user.id = 999999
        message.answer = AsyncMock()

        # –ú–æ–∫–∞–µ–º —Ñ—É–Ω–∫—Ü–∏–∏
        with patch("app.bot.handlers_admin._is_admin", return_value=False):
            await tags_stats_handler(message)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—ã–ª –æ—Ç–∫–∞–∑ –≤ –¥–æ—Å—Ç—É–ø–µ
            message.answer.assert_called_once_with("‚ùå –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")

    @pytest.mark.asyncio
    async def test_retag_command_with_admin_user(self):
        """–¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã retag –æ—Ç –∞–¥–º–∏–Ω–∞."""
        from app.bot.handlers_admin import retag_handler

        # –°–æ–∑–¥–∞–µ–º –º–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∞–¥–º–∏–Ω–∞
        message = AsyncMock()
        message.from_user.id = 50929545
        message.answer = AsyncMock()
        message.text = "/retag deadbeef12345678 dry-run"

        # –ú–æ–∫–∞–µ–º —Ñ—É–Ω–∫—Ü–∏–∏
        with (
            patch("app.bot.handlers_admin._is_admin", return_value=True),
            patch("app.gateways.notion_meetings.validate_meeting_access", return_value=True),
            patch(
                "app.gateways.notion_meetings.fetch_meeting_page",
                return_value={
                    "summary_md": "Test meeting about IFRS",
                    "current_tags": ["Business/Lavka"],
                },
            ),
            patch("app.core.tags.tag_text", return_value=["Finance/IFRS", "Business/Lavka"]),
        ):
            await retag_handler(message)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–∏–ª–∞—Å—å
            assert message.answer.call_count >= 1
            # –ü–µ—Ä–≤—ã–π –≤—ã–∑–æ–≤ - —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ
            first_call = message.answer.call_args_list[0][0][0]
            assert "üîç" in first_call and "dry-run" in first_call

    @pytest.mark.asyncio
    async def test_retag_command_with_regular_user(self):
        """–¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã retag –æ—Ç –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        from app.bot.handlers_admin import retag_handler

        # –°–æ–∑–¥–∞–µ–º –º–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        message = AsyncMock()
        message.from_user.id = 999999
        message.answer = AsyncMock()
        message.text = "/retag deadbeef12345678"

        # –ú–æ–∫–∞–µ–º —Ñ—É–Ω–∫—Ü–∏–∏
        with patch("app.bot.handlers_admin._is_admin", return_value=False):
            await retag_handler(message)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—ã–ª –æ—Ç–∫–∞–∑ –≤ –¥–æ—Å—Ç—É–ø–µ
            message.answer.assert_called_once_with("‚ùå –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")

    @pytest.mark.asyncio
    async def test_tags_validate_command_with_admin_user(self):
        """–¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã tags_validate –æ—Ç –∞–¥–º–∏–Ω–∞."""
        from app.bot.handlers_admin import tags_validate_handler

        # –°–æ–∑–¥–∞–µ–º –º–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∞–¥–º–∏–Ω–∞
        message = AsyncMock()
        message.from_user.id = 50929545
        message.answer = AsyncMock()

        # –ú–æ–∫–∞–µ–º —Ñ—É–Ω–∫—Ü–∏–∏
        with (
            patch("app.bot.handlers_admin._is_admin", return_value=True),
            patch("app.bot.handlers_admin.validate_rules", return_value=[]),
        ):
            await tags_validate_handler(message)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–∏–ª–∞—Å—å
            message.answer.assert_called_once()
            call_args = message.answer.call_args[0][0]
            assert "‚úÖ" in call_args
            assert "YAML –≤–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ–π–¥–µ–Ω–∞" in call_args

    @pytest.mark.asyncio
    async def test_tags_validate_command_with_errors(self):
        """–¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã tags_validate —Å –æ—à–∏–±–∫–∞–º–∏ –≤ YAML."""
        from app.bot.handlers_admin import tags_validate_handler

        # –°–æ–∑–¥–∞–µ–º –º–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∞–¥–º–∏–Ω–∞
        message = AsyncMock()
        message.from_user.id = 50929545
        message.answer = AsyncMock()

        # –ú–æ–∫–∞–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ —Å –æ—à–∏–±–∫–∞–º–∏
        with (
            patch("app.bot.handlers_admin._is_admin", return_value=True),
            patch(
                "app.bot.handlers_admin.validate_rules",
                return_value=[
                    "Broken regex in tag Finance/IFRS",
                    "Empty patterns in tag Business/Test",
                ],
            ),
        ):
            await tags_validate_handler(message)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–∞–º–∏
            message.answer.assert_called_once()
            call_args = message.answer.call_args[0][0]
            assert "‚ùå" in call_args
            assert "–ù–∞–π–¥–µ–Ω—ã –æ—à–∏–±–∫–∏ –≤ YAML" in call_args
            assert "Broken regex" in call_args

    @pytest.mark.asyncio
    async def test_admin_config_command(self):
        """–¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã admin_config."""
        from app.bot.handlers_admin import admin_config_handler
        
        # –°–æ–∑–¥–∞–µ–º –º–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∞–¥–º–∏–Ω–∞
        message = AsyncMock()
        message.from_user.id = 50929545
        message.answer = AsyncMock()
        
        # –ú–æ–∫–∞–µ–º —Ñ—É–Ω–∫—Ü–∏–∏
        mock_config = {
            "admin_ids": [50929545, 123456],
            "source": "APP_ADMIN_USER_IDS=50929545,123456",
            "count": 2,
            "env_file_exists": True,
            "recommended_setup": "–°–æ–∑–¥–∞–π—Ç–µ .env —Ñ–∞–π–ª —Å APP_ADMIN_USER_IDS=your_telegram_id"
        }
        
        with patch("app.bot.handlers_admin._is_admin", return_value=True), \
             patch("app.settings.get_admin_config_info", return_value=mock_config):
            
            await admin_config_handler(message)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–∏–ª–∞—Å—å
            message.answer.assert_called_once()
            call_args = message.answer.call_args[0][0]
            assert "üîß" in call_args
            assert "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –ø—Ä–∞–≤" in call_args
            assert "50929545" in call_args
            assert "APP_ADMIN_USER_IDS" in call_args
