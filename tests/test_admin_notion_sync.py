"""–¢–µ—Å—Ç—ã –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å Notion."""

from __future__ import annotations

from unittest.mock import AsyncMock, patch

import pytest

from app.bot.handlers_admin import sync_status_handler, sync_tags_handler
from app.core.tags_notion_sync import TagsSyncResult


@pytest.fixture(autouse=True)
def mock_is_admin():
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –º–æ–∫–∞–µ—Ç _is_admin –¥–ª—è –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤."""
    with patch("app.bot.handlers_admin._is_admin", return_value=True):
        yield


class TestSyncTagsHandler:
    """–¢–µ—Å—Ç—ã –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /sync_tags."""

    @pytest.mark.asyncio
    async def test_sync_tags_success(self):
        """–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏."""
        mock_message = AsyncMock()
        mock_message.text = "/sync_tags"
        mock_message.answer = AsyncMock()

        # –ú–æ–∫–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        mock_result = TagsSyncResult(
            success=True,
            source="notion",
            rules_count=25,
            kind_breakdown={"Finance": 10, "Business": 8, "People": 7},
            cache_updated=True,
        )

        with patch("app.core.tags_notion_sync.smart_sync", return_value=mock_result):
            await sync_tags_handler(mock_message)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—ã–ª–æ 2 –≤—ã–∑–æ–≤–∞ answer (–Ω–∞—á–∞–ª—å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ + —Ä–µ–∑—É–ª—å—Ç–∞—Ç)
            assert mock_message.answer.call_count == 2

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            final_call = mock_message.answer.call_args_list[1][0][0]
            assert "‚úÖ" in final_call
            assert "–∑–∞–≤–µ—Ä—à–µ–Ω–∞" in final_call
            assert "25" in final_call
            assert "Finance=10" in final_call

    @pytest.mark.asyncio
    async def test_sync_tags_dry_run(self):
        """–¢–µ—Å—Ç dry-run —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏."""
        mock_message = AsyncMock()
        mock_message.text = "/sync_tags dry-run"
        mock_message.answer = AsyncMock()

        mock_result = TagsSyncResult(
            success=True,
            source="notion",
            rules_count=25,
            kind_breakdown={"Finance": 10, "Business": 15},
        )

        with patch("app.core.tags_notion_sync.smart_sync", return_value=mock_result) as mock_sync:
            await sync_tags_handler(mock_message)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—ã–∑–≤–∞–Ω —Å dry_run=True
            mock_sync.assert_called_once_with(dry_run=True)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ dry-run
            final_call = mock_message.answer.call_args_list[1][0][0]
            assert "–ø—Ä–æ–≤–µ—Ä–µ–Ω–∞" in final_call
            assert "–î–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–µ–∑ dry-run" in final_call

    @pytest.mark.asyncio
    async def test_sync_tags_failure(self):
        """–¢–µ—Å—Ç –Ω–µ—É–¥–∞—á–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏."""
        mock_message = AsyncMock()
        mock_message.text = "/sync_tags"
        mock_message.answer = AsyncMock()

        mock_result = TagsSyncResult(
            success=False, source="notion", rules_count=0, error="Connection timeout"
        )

        with patch("app.core.tags_notion_sync.smart_sync", return_value=mock_result):
            await sync_tags_handler(mock_message)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            final_call = mock_message.answer.call_args_list[1][0][0]
            assert "‚ùå" in final_call
            assert "–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏" in final_call
            assert "Connection timeout" in final_call

    @pytest.mark.asyncio
    async def test_sync_tags_exception(self):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏—è."""
        mock_message = AsyncMock()
        mock_message.text = "/sync_tags"
        mock_message.answer = AsyncMock()

        with patch("app.core.tags_notion_sync.smart_sync", side_effect=Exception("Test error")):
            await sync_tags_handler(mock_message)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∏—Å–∫–ª—é—á–µ–Ω–∏—è
            final_call = mock_message.answer.call_args_list[1][0][0]
            assert "‚ùå" in final_call
            assert "Test error" in final_call


class TestSyncStatusHandler:
    """–¢–µ—Å—Ç—ã –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /sync_status."""

    @pytest.mark.asyncio
    async def test_sync_status_success(self):
        """–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞."""
        mock_message = AsyncMock()
        mock_message.answer = AsyncMock()

        mock_sync_status = {
            "last_sync": "2025-09-22 15:30:00",
            "hours_since_sync": 2.5,
            "source": "notion",
            "status": "success",
            "rules_count": 30,
            "kind_breakdown": {"Finance": 15, "Business": 10, "People": 5},
            "cache_available": True,
            "notion_accessible": True,
        }

        mock_catalog_info = {
            "accessible": True,
            "title": "Tag Catalog",
            "properties": ["Name", "Kind", "Pattern(s)", "Weight", "Active"],
        }

        with (
            patch("app.core.tags_notion_sync.get_sync_status", return_value=mock_sync_status),
            patch(
                "app.gateways.notion_tag_catalog.get_tag_catalog_info",
                return_value=mock_catalog_info,
            ),
        ):
            await sync_status_handler(mock_message)

            mock_message.answer.assert_called_once()
            call_args = mock_message.answer.call_args[0][0]

            assert "üìä" in call_args
            assert "2025-09-22 15:30:00" in call_args
            assert "2.5 —á–∞—Å–æ–≤" in call_args
            assert "notion" in call_args
            assert "success" in call_args
            assert "30" in call_args
            assert "Finance=15" in call_args

    @pytest.mark.asyncio
    async def test_sync_status_notion_not_accessible(self):
        """–¢–µ—Å—Ç —Å—Ç–∞—Ç—É—Å–∞ –∫–æ–≥–¥–∞ Notion –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω."""
        mock_message = AsyncMock()
        mock_message.answer = AsyncMock()

        mock_sync_status = {
            "last_sync": "–Ω–∏–∫–æ–≥–¥–∞",
            "status": "never_synced",
            "source": "unknown",
            "rules_count": 0,
        }

        mock_catalog_info = {"accessible": False, "error": "Database not found"}

        with (
            patch("app.core.tags_notion_sync.get_sync_status", return_value=mock_sync_status),
            patch(
                "app.gateways.notion_tag_catalog.get_tag_catalog_info",
                return_value=mock_catalog_info,
            ),
        ):
            await sync_status_handler(mock_message)

            call_args = mock_message.answer.call_args[0][0]
            assert "‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω" in call_args
            assert "Database not found" in call_args

    @pytest.mark.asyncio
    async def test_sync_status_with_error(self):
        """–¢–µ—Å—Ç —Å—Ç–∞—Ç—É—Å–∞ —Å –æ—à–∏–±–∫–æ–π."""
        mock_message = AsyncMock()
        mock_message.answer = AsyncMock()

        mock_sync_status = {
            "last_sync": "2025-09-22 15:30:00",
            "status": "failed",
            "source": "notion",
            "rules_count": 0,
            "error": "API timeout",
        }

        mock_catalog_info = {"accessible": False, "error": "timeout"}

        with (
            patch("app.core.tags_notion_sync.get_sync_status", return_value=mock_sync_status),
            patch(
                "app.gateways.notion_tag_catalog.get_tag_catalog_info",
                return_value=mock_catalog_info,
            ),
        ):
            await sync_status_handler(mock_message)

            call_args = mock_message.answer.call_args[0][0]
            assert "‚ùå" in call_args
            assert "API timeout" in call_args

    @pytest.mark.asyncio
    async def test_sync_status_exception(self):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏—è –≤ sync_status."""
        mock_message = AsyncMock()
        mock_message.answer = AsyncMock()

        with patch(
            "app.core.tags_notion_sync.get_sync_status", side_effect=Exception("Test error")
        ):
            await sync_status_handler(mock_message)

            call_args = mock_message.answer.call_args[0][0]
            assert "‚ùå" in call_args
            assert "Test error" in call_args


class TestAdminAccessControl:
    """–¢–µ—Å—Ç—ã –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–º–∞–Ω–¥–∞–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏."""

    @pytest.mark.asyncio
    async def test_sync_tags_non_admin_access(self):
        """–¢–µ—Å—Ç –æ—Ç–∫–∞–∑–∞ –≤ –¥–æ—Å—Ç—É–ø–µ –¥–ª—è –Ω–µ-–∞–¥–º–∏–Ω–∞."""
        mock_message = AsyncMock()
        mock_message.text = "/sync_tags"
        mock_message.answer = AsyncMock()

        with patch("app.bot.handlers_admin._is_admin", return_value=False):
            await sync_tags_handler(mock_message)

            mock_message.answer.assert_called_once_with(
                "‚ùå –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º"
            )

    @pytest.mark.asyncio
    async def test_sync_status_non_admin_access(self):
        """–¢–µ—Å—Ç –æ—Ç–∫–∞–∑–∞ –≤ –¥–æ—Å—Ç—É–ø–µ –¥–ª—è –Ω–µ-–∞–¥–º–∏–Ω–∞."""
        mock_message = AsyncMock()
        mock_message.answer = AsyncMock()

        with patch("app.bot.handlers_admin._is_admin", return_value=False):
            await sync_status_handler(mock_message)

            mock_message.answer.assert_called_once_with(
                "‚ùå –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º"
            )
