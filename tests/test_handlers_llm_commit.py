"""
–¢–µ—Å—Ç—ã –¥–ª—è LLM commit handler.
"""

from unittest.mock import AsyncMock, Mock, patch

import pytest
from aiogram.types import Message, User

from app.bot.handlers_llm_commit import _get_user_name, llm_commit_handler


class TestGetUserName:
    """–¢–µ—Å—Ç—ã –ø–æ–ª—É—á–µ–Ω–∏—è –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""

    def test_get_user_name_full_name(self):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ –∏–º–µ–Ω–∏."""
        user = User(id=123, is_bot=False, first_name="Valya", last_name="Dobrynin")
        message = Mock(spec=Message)
        message.from_user = user

        result = _get_user_name(message)
        assert result == "Valya Dobrynin"

    def test_get_user_name_username(self):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è username."""
        user = User(id=123, is_bot=False, first_name="Valya", username="valya_d")
        message = Mock(spec=Message)
        message.from_user = user

        result = _get_user_name(message)
        assert result == "Valya"  # first_name –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–µ–µ username

    def test_get_user_name_id_fallback(self):
        """–¢–µ—Å—Ç fallback –∫ ID."""
        user = User(id=123, is_bot=False, first_name="")
        message = Mock(spec=Message)
        message.from_user = user

        result = _get_user_name(message)
        assert result == "User_123"

    def test_get_user_name_no_user(self):
        """–¢–µ—Å—Ç –±–µ–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        message = Mock(spec=Message)
        message.from_user = None

        result = _get_user_name(message)
        assert result == "Unknown User"


class TestLLMCommitHandler:
    """–¢–µ—Å—Ç—ã LLM commit handler."""

    @pytest.fixture
    def mock_message(self):
        """–°–æ–∑–¥–∞–µ—Ç –º–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏—è."""
        user = User(id=123, is_bot=False, first_name="Valya", last_name="Dobrynin")
        message = Mock(spec=Message)
        message.from_user = user
        message.answer = AsyncMock()
        return message

    @pytest.mark.asyncio
    async def test_llm_commit_no_text(self, mock_message):
        """–¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã –±–µ–∑ —Ç–µ–∫—Å—Ç–∞."""
        mock_message.text = "/llm"

        await llm_commit_handler(mock_message)

        mock_message.answer.assert_called_once()
        args = mock_message.answer.call_args[0]
        assert "–£–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç –∫–æ–º–º–∏—Ç–∞" in args[0]

    @pytest.mark.asyncio
    async def test_llm_commit_empty_text(self, mock_message):
        """–¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã —Å –ø—É—Å—Ç—ã–º —Ç–µ–∫—Å—Ç–æ–º."""
        mock_message.text = "/llm   "

        await llm_commit_handler(mock_message)

        mock_message.answer.assert_called_once()
        args = mock_message.answer.call_args[0]
        assert "–£–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç –∫–æ–º–º–∏—Ç–∞" in args[0]

    @pytest.mark.asyncio
    async def test_llm_commit_no_message_text(self, mock_message):
        """–¢–µ—Å—Ç –∫–æ–≥–¥–∞ message.text is None."""
        mock_message.text = None

        await llm_commit_handler(mock_message)

        mock_message.answer.assert_called_once()
        args = mock_message.answer.call_args[0]
        assert "–û—à–∏–±–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç–µ–∫—Å—Ç –∫–æ–º–∞–Ω–¥—ã" in args[0]

    @pytest.mark.asyncio
    @patch("app.bot.handlers_llm_commit.parse_commit_text")
    @patch("app.bot.handlers_llm_commit._save_commit_to_notion")
    @patch("app.bot.handlers_llm_commit.format_commit_card")
    async def test_llm_commit_success(self, mock_format, mock_save, mock_parse, mock_message):
        """–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è LLM –∫–æ–º–º–∏—Ç–∞."""
        mock_message.text = "/llm –°–∞—à–∞ —Å–¥–µ–ª–∞–µ—Ç –æ—Ç—á–µ—Ç"

        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫–∏
        mock_parse.return_value = {
            "text": "—Å–¥–µ–ª–∞—Ç—å –æ—Ç—á–µ—Ç",
            "assignees": ["Sasha"],
            "from_person": ["Valya"],
            "due_iso": "2025-10-05",
        }

        mock_save.return_value = {"id": "test-id", "short_id": "12345678", "title": "Test Title"}

        mock_format.return_value = "üìã Test Card"

        # –ú–æ–∫–∞–µ–º processing message
        processing_msg = Mock()
        processing_msg.edit_text = AsyncMock()
        mock_message.answer.return_value = processing_msg

        await llm_commit_handler(mock_message)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–∑–æ–≤—ã
        mock_parse.assert_called_once_with("–°–∞—à–∞ —Å–¥–µ–ª–∞–µ—Ç –æ—Ç—á–µ—Ç", "Valya Dobrynin")
        mock_save.assert_called_once()
        mock_format.assert_called_once()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        processing_msg.edit_text.assert_called()
        final_call = processing_msg.edit_text.call_args_list[-1]
        assert "LLM –∫–æ–º–º–∏—Ç —Å–æ–∑–¥–∞–Ω" in final_call[0][0]

    @pytest.mark.asyncio
    @patch("app.bot.handlers_llm_commit.parse_commit_text")
    async def test_llm_commit_validation_error(self, mock_parse, mock_message):
        """–¢–µ—Å—Ç –æ—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏."""
        mock_message.text = "/llm –ø—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç"
        mock_parse.side_effect = ValueError("–¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π")

        processing_msg = Mock()
        processing_msg.edit_text = AsyncMock()
        mock_message.answer.return_value = processing_msg

        await llm_commit_handler(mock_message)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–∫–∞–∑–∞–Ω–∞ –æ—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        processing_msg.edit_text.assert_called()
        error_call = processing_msg.edit_text.call_args_list[-1]
        assert "–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏" in error_call[0][0]
        assert "–¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π" in error_call[0][0]

    @pytest.mark.asyncio
    @patch("app.bot.handlers_llm_commit.parse_commit_text")
    async def test_llm_commit_runtime_error(self, mock_parse, mock_message):
        """–¢–µ—Å—Ç –æ—à–∏–±–∫–∏ LLM –∏–ª–∏ Notion."""
        mock_message.text = "/llm —Ç–µ—Å—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç"
        mock_parse.side_effect = RuntimeError("LLM API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")

        processing_msg = Mock()
        processing_msg.edit_text = AsyncMock()
        mock_message.answer.return_value = processing_msg

        await llm_commit_handler(mock_message)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–∫–∞–∑–∞–Ω–∞ –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        processing_msg.edit_text.assert_called()
        error_call = processing_msg.edit_text.call_args_list[-1]
        assert "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏" in error_call[0][0]
        assert "LLM API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω" in error_call[0][0]

    @pytest.mark.asyncio
    @patch("app.bot.handlers_llm_commit.parse_commit_text")
    async def test_llm_commit_handler_exception(self, mock_parse, mock_message):
        """–¢–µ—Å—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–∏ –≤ handler."""
        mock_message.text = "/llm —Ç–µ—Å—Ç"
        # –ò–º–∏—Ç–∏—Ä—É–µ–º –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—É—é –æ—à–∏–±–∫—É
        mock_parse.side_effect = Exception("Unexpected error")

        processing_msg = Mock()
        processing_msg.edit_text = AsyncMock()
        mock_message.answer.return_value = processing_msg

        await llm_commit_handler(mock_message)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–∫–∞–∑–∞–Ω–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞
        processing_msg.edit_text.assert_called()
        error_call = processing_msg.edit_text.call_args_list[-1]
        assert "–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞" in error_call[0][0]


class TestIntegration:
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã."""

    def test_all_functions_importable(self):
        """–¢–µ—Å—Ç —á—Ç–æ –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –º–æ–∂–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å."""
        from app.bot.handlers_llm_commit import (
            _create_direct_meeting,
            _get_user_name,
            _save_commit_to_notion,
            llm_commit_handler,
        )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
        assert callable(_get_user_name)
        assert callable(_create_direct_meeting)
        assert callable(_save_commit_to_notion)
        assert callable(llm_commit_handler)
