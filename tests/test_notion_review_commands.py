"""–¢–µ—Å—Ç—ã –¥–ª—è –∫–æ–º–∞–Ω–¥ Review queue –≤ Telegram –±–æ—Ç–µ."""

from unittest.mock import AsyncMock, patch

import pytest
from aiogram.types import Message

from app.bot.handlers import (
    cmd_assign_manual,
    cmd_confirm,
    cmd_delete,
    cmd_flip,
    cmd_review,
    cmd_review_fallback,
)


class TestReviewCommands:
    """–¢–µ—Å—Ç—ã –¥–ª—è –∫–æ–º–∞–Ω–¥ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Review queue."""

    @pytest.fixture
    def mock_message(self):
        """–°–æ–∑–¥–∞–µ—Ç mock –æ–±—ä–µ–∫—Ç Message."""
        msg = AsyncMock(spec=Message)
        msg.answer = AsyncMock()
        return msg

    @pytest.fixture
    def sample_review_item(self):
        """–û–±—Ä–∞–∑–µ—Ü —ç–ª–µ–º–µ–Ω—Ç–∞ Review queue."""
        return {
            "page_id": "12345678-1234-1234-1234-123456789012",
            "short_id": "789012",
            "text": "–ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –æ—Ç—á–µ—Ç –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º",
            "direction": "theirs",
            "assignees": ["Daniil"],
            "due_iso": "2025-10-15",
            "confidence": 0.8,
            "reasons": ["unclear_assignee"],
            "context": "–û–±—Å—É–∂–¥–µ–Ω–∏–µ –Ω–∞ –≤—Å—Ç—Ä–µ—á–µ",
            "meeting_page_id": "87654321-4321-4321-4321-210987654321",
        }

    @patch("app.bot.handlers.list_open_reviews")  # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—É—Ç—å –¥–ª—è –Ω–æ–≤–æ–π –ª–æ–≥–∏–∫–∏
    @pytest.mark.asyncio
    async def test_cmd_review_success(self, mock_list_pending, mock_message, sample_review_item):
        """–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã /review."""
        mock_message.text = "/review"
        mock_list_pending.return_value = [sample_review_item]

        await cmd_review(mock_message)

        mock_list_pending.assert_called_once_with(limit=5)
        # –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è 2 —Å–æ–æ–±—â–µ–Ω–∏—è: –∑–∞–≥–æ–ª–æ–≤–æ–∫ + —ç–ª–µ–º–µ–Ω—Ç
        assert mock_message.answer.call_count == 2

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–µ—Ä–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è (–∑–∞–≥–æ–ª–æ–≤–æ–∫)
        first_call_args = mock_message.answer.call_args_list[0][0][0]
        assert "üìã <b>Review Queue" in first_call_args

    @patch("app.bot.handlers.list_open_reviews")
    @pytest.mark.asyncio
    async def test_cmd_review_empty(self, mock_list_pending, mock_message):
        """–¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã /review —Å –ø—É—Å—Ç–æ–π –æ—á–µ—Ä–µ–¥—å—é."""
        mock_message.text = "/review"
        mock_list_pending.return_value = []

        await cmd_review(mock_message)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –Ω–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –∏ –∫–Ω–æ–ø–∫–∞–º–∏
        mock_message.answer.assert_called_once()
        call_args = mock_message.answer.call_args
        assert "üìã Review queue –ø—É—Å—Ç–∞." in call_args[0][0]
        assert "üí°" in call_args[0][0]  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
        assert call_args[1]["reply_markup"] is not None  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã

    @patch("app.bot.handlers.list_open_reviews")  # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—É—Ç—å
    @pytest.mark.asyncio
    async def test_cmd_review_with_limit(self, mock_list_pending, mock_message, sample_review_item):
        """–¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã /review —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –ª–∏–º–∏—Ç–∞."""
        mock_message.text = "/review 10"
        mock_list_pending.return_value = [sample_review_item]

        await cmd_review(mock_message)

        mock_list_pending.assert_called_once_with(limit=10)

    @patch("app.bot.handlers.get_by_short_id")
    @patch("app.bot.handlers.update_fields")
    @pytest.mark.asyncio
    async def test_cmd_flip_success(
        self, mock_update_fields, mock_get_by_short_id, mock_message, sample_review_item
    ):
        """–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã /flip."""
        mock_message.text = "/flip 789012"
        mock_get_by_short_id.return_value = sample_review_item
        mock_update_fields.return_value = True

        await cmd_flip(mock_message)

        mock_get_by_short_id.assert_called_once_with("789012")
        mock_update_fields.assert_called_once_with(sample_review_item["page_id"], direction="mine")
        mock_message.answer.assert_called_once_with("‚úÖ [789012] Direction ‚Üí mine")

    @patch("app.bot.handlers.get_by_short_id")
    @pytest.mark.asyncio
    async def test_cmd_flip_not_found(self, mock_get_by_short_id, mock_message):
        """–¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã /flip —Å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º ID."""
        mock_message.text = "/flip abc123"
        mock_get_by_short_id.return_value = None

        await cmd_flip(mock_message)

        mock_message.answer.assert_called_once_with(
            "‚ùå –ö–∞—Ä—Ç–æ—á–∫–∞ [abc123] –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ /review."
        )

    @pytest.mark.asyncio
    async def test_cmd_confirm_wrong_syntax_too_many_args(self, mock_message):
        """–¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã /confirm —Å –ª–∏—à–Ω–∏–º–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏."""
        mock_message.text = "/confirm 123456 Daniil"

        await cmd_confirm(mock_message)

        expected_msg = (
            "‚ùå –ö–æ–º–∞–Ω–¥–∞ /confirm –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ç–æ–ª—å–∫–æ ID –∫–∞—Ä—Ç–æ—á–∫–∏.\n"
            "–°–∏–Ω—Ç–∞–∫—Å–∏—Å: /confirm <short_id>\n"
            "–í–æ–∑–º–æ–∂–Ω–æ, –≤—ã —Ö–æ—Ç–µ–ª–∏: /assign 123456 Daniil"
        )
        mock_message.answer.assert_called_once_with(expected_msg)

    @pytest.mark.asyncio
    async def test_cmd_confirm_wrong_syntax_no_args(self, mock_message):
        """–¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã /confirm –±–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤."""
        mock_message.text = "/confirm"

        await cmd_confirm(mock_message)

        mock_message.answer.assert_called_once_with("‚ùå –°–∏–Ω—Ç–∞–∫—Å–∏—Å: /confirm <short_id>")

    @pytest.mark.asyncio
    async def test_cmd_review_fallback_review(self, mock_message):
        """–¢–µ—Å—Ç fallback –¥–ª—è –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã /review."""
        mock_message.text = "/review abc def"

        await cmd_review_fallback(mock_message)

        mock_message.answer.assert_called_once_with(
            "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å.\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /review [–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ]"
        )

    @pytest.mark.asyncio
    async def test_cmd_review_fallback_confirm(self, mock_message):
        """–¢–µ—Å—Ç fallback –¥–ª—è –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã /confirm."""
        mock_message.text = "/confirm"

        await cmd_review_fallback(mock_message)

        mock_message.answer.assert_called_once_with(
            "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å.\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /confirm <short_id>"
        )

    @patch("app.bot.handlers.get_by_short_id")
    @patch("app.bot.handlers.normalize_assignees")
    @patch("app.bot.handlers.update_fields")
    @pytest.mark.asyncio
    async def test_cmd_assign_success(
        self,
        mock_update_fields,
        mock_normalize_assignees,
        mock_get_by_short_id,
        mock_message,
        sample_review_item,
    ):
        """–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã /assign."""
        mock_message.text = "/assign 789012 Valentin"
        mock_get_by_short_id.return_value = sample_review_item
        mock_normalize_assignees.return_value = ["Valentin"]
        mock_update_fields.return_value = True

        await cmd_assign_manual(mock_message)

        mock_get_by_short_id.assert_called_once_with("789012")
        mock_normalize_assignees.assert_called_once_with(["Valentin"], attendees_en=[])
        mock_update_fields.assert_called_once_with(
            sample_review_item["page_id"], assignees=["Valentin"]
        )
        mock_message.answer.assert_called_once_with("‚úÖ [789012] Assignee ‚Üí Valentin")

    @patch("app.bot.handlers.get_by_short_id")
    @patch("app.bot.handlers.normalize_assignees")
    @pytest.mark.asyncio
    async def test_cmd_assign_unknown_person(
        self, mock_normalize_assignees, mock_get_by_short_id, mock_message, sample_review_item
    ):
        """–¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã /assign —Å –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–º —á–µ–ª–æ–≤–µ–∫–æ–º."""
        mock_message.text = "/assign 789012 UnknownPerson"
        mock_get_by_short_id.return_value = sample_review_item
        mock_normalize_assignees.return_value = []

        await cmd_assign_manual(mock_message)

        mock_message.answer.assert_called_once_with(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è(–µ–π): UnknownPerson"
        )

    @patch("app.bot.handlers.get_by_short_id")
    @patch("app.bot.handlers.set_status")
    @pytest.mark.asyncio
    async def test_cmd_delete_success(
        self, mock_set_status, mock_get_by_short_id, mock_message, sample_review_item
    ):
        """–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã /delete."""
        mock_message.text = "/delete 789012"
        mock_get_by_short_id.return_value = sample_review_item

        await cmd_delete(mock_message)

        mock_get_by_short_id.assert_called_once_with("789012")
        mock_set_status.assert_called_once_with(sample_review_item["page_id"], "dropped")
        mock_message.answer.assert_called_once_with("‚úÖ [789012] –£–¥–∞–ª–µ–Ω–æ (dropped).")

    @patch("app.bot.handlers.get_by_short_id")
    @patch("app.bot.handlers.build_title")
    @patch("app.bot.handlers.build_key")
    @patch("app.bot.handlers.upsert_commits")
    @patch("app.bot.handlers.set_status")
    @pytest.mark.asyncio
    async def test_cmd_confirm_success(
        self,
        mock_set_status,
        mock_upsert_commits,
        mock_build_key,
        mock_build_title,
        mock_get_by_short_id,
        mock_message,
        sample_review_item,
    ):
        """–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã /confirm."""
        mock_message.text = "/confirm 789012"
        mock_get_by_short_id.return_value = sample_review_item
        mock_build_title.return_value = "Daniil: –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –æ—Ç—á–µ—Ç –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º [due 2025-10-15]"
        mock_build_key.return_value = "test_key_hash"
        mock_upsert_commits.return_value = {"created": ["new_commit_id"], "updated": []}

        await cmd_confirm(mock_message)

        mock_get_by_short_id.assert_called_once_with("789012")
        mock_build_title.assert_called_once_with(
            "theirs", "–ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –æ—Ç—á–µ—Ç –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º", ["Daniil"], "2025-10-15"
        )
        mock_build_key.assert_called_once_with(
            "–ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –æ—Ç—á–µ—Ç –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º", ["Daniil"], "2025-10-15"
        )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–∑–æ–≤ upsert_commits
        mock_upsert_commits.assert_called_once()
        commit_call_args = mock_upsert_commits.call_args
        assert commit_call_args[0][0] == sample_review_item["meeting_page_id"]
        commit_item = commit_call_args[0][1][0]
        assert commit_item["text"] == "–ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –æ—Ç—á–µ—Ç –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º"
        assert commit_item["direction"] == "theirs"
        assert commit_item["assignees"] == ["Daniil"]

        mock_set_status.assert_called_once_with(
            sample_review_item["page_id"], "resolved", linked_commit_id="new_commit_id"
        )
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–≤–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        mock_message.answer.assert_called_once()
        call_args = mock_message.answer.call_args[0][0]
        assert "‚úÖ <b>[789012] –ö–æ–º–º–∏—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω</b>" in call_args  # –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        assert "‚ÑπÔ∏è <b>Review Status:</b> resolved" in call_args  # –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Ç–∞—Ç—É—Å–∞

    @patch("app.bot.handlers.get_by_short_id")
    @pytest.mark.asyncio
    async def test_cmd_confirm_no_meeting_id(
        self, mock_get_by_short_id, mock_message, sample_review_item
    ):
        """–¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã /confirm –±–µ–∑ meeting_page_id."""
        mock_message.text = "/confirm 789012"
        sample_review_item["meeting_page_id"] = None
        mock_get_by_short_id.return_value = sample_review_item

        await cmd_confirm(mock_message)

        mock_message.answer.assert_called_once_with("‚ùå [789012] –ù–µ –Ω–∞–π–¥–µ–Ω meeting_page_id.")


class TestReviewCommandsErrorHandling:
    """–¢–µ—Å—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –≤ –∫–æ–º–∞–Ω–¥–∞—Ö Review queue."""

    @pytest.fixture
    def mock_message(self):
        """–°–æ–∑–¥–∞–µ—Ç mock –æ–±—ä–µ–∫—Ç Message."""
        msg = AsyncMock(spec=Message)
        msg.answer = AsyncMock()
        return msg

    @patch("app.bot.handlers.list_open_reviews")  # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—É—Ç—å
    @pytest.mark.asyncio
    async def test_cmd_review_exception(self, mock_list_pending, mock_message):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏—è –≤ –∫–æ–º–∞–Ω–¥–µ /review."""
        mock_message.text = "/review"
        mock_list_pending.side_effect = Exception("Database error")

        await cmd_review(mock_message)

        mock_message.answer.assert_called_once_with("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ review.")

    @patch("app.bot.handlers.get_by_short_id")
    @pytest.mark.asyncio
    async def test_cmd_flip_exception(self, mock_get_by_short_id, mock_message):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏—è –≤ –∫–æ–º–∞–Ω–¥–µ /flip."""
        mock_message.text = "/flip 789012"
        mock_get_by_short_id.side_effect = Exception("API error")

        await cmd_flip(mock_message)

        mock_message.answer.assert_called_once_with("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ flip.")
