"""–¢–µ—Å—Ç—ã –¥–ª—è inline –∫–Ω–æ–ø–æ–∫ Review Queue."""

from unittest.mock import AsyncMock, patch

import pytest
from aiogram.types import CallbackQuery, Message

from app.bot.handlers_inline import (
    build_main_menu_kb,
    build_review_item_kb,
    cb_main_new_file,
    cb_main_review,
    cb_review_assign,
    cb_review_confirm,
    cb_review_confirm_all,
    cb_review_delete,
    cb_review_flip,
)


class TestInlineButtons:
    """–¢–µ—Å—Ç—ã –¥–ª—è inline –∫–Ω–æ–ø–æ–∫."""

    def test_build_main_menu_kb(self):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é."""
        kb = build_main_menu_kb()

        assert kb.inline_keyboard is not None
        assert len(kb.inline_keyboard) == 1  # –û–¥–Ω–∞ —Å—Ç—Ä–æ–∫–∞ –∫–Ω–æ–ø–æ–∫
        assert len(kb.inline_keyboard[0]) == 2  # –î–≤–µ –∫–Ω–æ–ø–∫–∏ –≤ —Å—Ç—Ä–æ–∫–µ

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—Å—Ç –∏ callback_data –∫–Ω–æ–ø–æ–∫
        buttons = kb.inline_keyboard[0]
        assert buttons[0].text == "üìÑ –ù–æ–≤—ã–π —Ñ–∞–π–ª"
        assert buttons[0].callback_data == "main_new_file"
        assert buttons[1].text == "üîç Review"
        assert buttons[1].callback_data == "main_review"

    def test_build_review_item_kb(self):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–∞ Review."""
        short_id = "abc123"
        kb = build_review_item_kb(short_id)

        assert kb.inline_keyboard is not None
        assert len(kb.inline_keyboard) == 2  # –î–≤–µ —Å—Ç—Ä–æ–∫–∏ –∫–Ω–æ–ø–æ–∫
        assert len(kb.inline_keyboard[0]) == 2  # –î–≤–µ –∫–Ω–æ–ø–∫–∏ –≤ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–µ
        assert len(kb.inline_keyboard[1]) == 2  # –î–≤–µ –∫–Ω–æ–ø–∫–∏ –≤–æ –≤—Ç–æ—Ä–æ–π —Å—Ç—Ä–æ–∫–µ

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º callback_data
        buttons_row1 = kb.inline_keyboard[0]
        buttons_row2 = kb.inline_keyboard[1]

        assert buttons_row1[0].callback_data == f"review_confirm:{short_id}"
        assert buttons_row1[1].callback_data == f"review_flip:{short_id}"
        assert buttons_row2[0].callback_data == f"review_delete:{short_id}"
        assert buttons_row2[1].callback_data == f"review_assign:{short_id}"


class TestMainMenuCallbacks:
    """–¢–µ—Å—Ç—ã –¥–ª—è callback'–æ–≤ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é."""

    @pytest.fixture
    def mock_callback(self):
        """–°–æ–∑–¥–∞–µ—Ç mock –æ–±—ä–µ–∫—Ç CallbackQuery."""
        callback = AsyncMock(spec=CallbackQuery)
        callback.answer = AsyncMock()
        callback.message = AsyncMock(spec=Message)
        callback.message.answer = AsyncMock()
        return callback

    @pytest.mark.asyncio
    async def test_cb_main_new_file(self, mock_callback):
        """–¢–µ—Å—Ç –∫–Ω–æ–ø–∫–∏ '–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–æ–≤—ã–π —Ñ–∞–π–ª'."""
        await cb_main_new_file(mock_callback)

        mock_callback.answer.assert_called_once()
        mock_callback.message.answer.assert_called_once()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–æ—Ä–º–∞—Ç–∞—Ö
        call_args = mock_callback.message.answer.call_args[0][0]
        assert "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:" in call_args
        assert ".txt" in call_args
        assert ".pdf" in call_args
        assert ".docx" in call_args
        assert ".vtt" in call_args
        # –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –ù–ï —É–ø–æ–º–∏–Ω–∞–µ–º –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
        assert ".mp3" not in call_args
        assert ".mp4" not in call_args

    @patch("app.bot.handlers_inline.list_open_reviews")
    @pytest.mark.asyncio
    async def test_cb_main_review_success(self, mock_list_pending, mock_callback):
        """–¢–µ—Å—Ç –∫–Ω–æ–ø–∫–∏ 'Review Commits' —Å —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏."""
        mock_list_pending.return_value = [
            {
                "short_id": "abc123",
                "text": "Test commit",
                "direction": "mine",
                "assignees": ["John"],
                "due_iso": "2025-01-15",
                "confidence": 0.75,
            }
        ]

        await cb_main_review(mock_callback)

        mock_callback.answer.assert_called_once()
        assert mock_callback.message.answer.call_count == 2  # –ó–∞–≥–æ–ª–æ–≤–æ–∫ + —ç–ª–µ–º–µ–Ω—Ç

    @patch("app.bot.handlers_inline.list_open_reviews")
    @pytest.mark.asyncio
    async def test_cb_main_review_empty(self, mock_list_pending, mock_callback):
        """–¢–µ—Å—Ç –∫–Ω–æ–ø–∫–∏ 'Review Commits' –±–µ–∑ —ç–ª–µ–º–µ–Ω—Ç–æ–≤."""
        mock_list_pending.return_value = []

        await cb_main_review(mock_callback)

        mock_callback.answer.assert_called_once()
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –Ω–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –∏ –∫–Ω–æ–ø–∫–æ–π
        mock_callback.message.answer.assert_called_once()
        call_args = mock_callback.message.answer.call_args
        assert "üìã Review queue –ø—É—Å—Ç–∞." in call_args[0][0]
        assert "üí°" in call_args[0][0]  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
        assert call_args[1]["reply_markup"] is not None  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã


class TestReviewItemCallbacks:
    """–¢–µ—Å—Ç—ã –¥–ª—è callback'–æ–≤ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ Review."""

    @pytest.fixture
    def mock_callback(self):
        """–°–æ–∑–¥–∞–µ—Ç mock –æ–±—ä–µ–∫—Ç CallbackQuery."""
        callback = AsyncMock(spec=CallbackQuery)
        callback.answer = AsyncMock()
        callback.message = AsyncMock(spec=Message)
        callback.message.answer = AsyncMock()
        callback.message.edit_text = AsyncMock()
        callback.data = "review_action:abc123"
        return callback

    @pytest.fixture
    def sample_review_item(self):
        """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–∏–º–µ—Ä —ç–ª–µ–º–µ–Ω—Ç–∞ Review."""
        return {
            "page_id": "test-page-id-123",
            "short_id": "abc123",
            "text": "Test commit text",
            "direction": "theirs",
            "assignees": ["John Doe"],
            "due_iso": "2025-01-15",
            "confidence": 0.75,
            "meeting_page_id": "meeting-123",
        }

    @patch("app.bot.handlers_inline.get_by_short_id")
    @patch("app.bot.handlers_inline.set_status")
    @pytest.mark.asyncio
    async def test_cb_review_delete_success(
        self, mock_set_status, mock_get_by_short_id, mock_callback, sample_review_item
    ):
        """–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞ Review."""
        mock_get_by_short_id.return_value = sample_review_item
        mock_set_status.return_value = True

        await cb_review_delete(mock_callback)

        mock_get_by_short_id.assert_called_once_with("abc123")
        mock_set_status.assert_called_once_with("test-page-id-123", "dropped")
        mock_callback.answer.assert_called_once_with("üóë –£–¥–∞–ª–µ–Ω–æ")
        mock_callback.message.edit_text.assert_called_once()

    @patch("app.bot.handlers_inline.get_by_short_id")
    @patch("app.bot.handlers_inline.update_fields")
    @pytest.mark.asyncio
    async def test_cb_review_flip_success(
        self, mock_update_fields, mock_get_by_short_id, mock_callback, sample_review_item
    ):
        """–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è direction."""
        mock_get_by_short_id.return_value = sample_review_item
        mock_update_fields.return_value = True

        await cb_review_flip(mock_callback)

        mock_get_by_short_id.assert_called_once_with("abc123")
        mock_update_fields.assert_called_once_with("test-page-id-123", direction="mine")
        mock_callback.answer.assert_called_once_with("üîÑ Direction ‚Üí mine")
        mock_callback.message.edit_text.assert_called_once()

    @patch("app.bot.handlers_inline.get_by_short_id")
    @pytest.mark.asyncio
    async def test_cb_review_assign_success(
        self, mock_get_by_short_id, mock_callback, sample_review_item
    ):
        """–¢–µ—Å—Ç –∫–Ω–æ–ø–∫–∏ Assign - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏."""
        mock_get_by_short_id.return_value = sample_review_item

        await cb_review_assign(mock_callback)

        mock_get_by_short_id.assert_called_once_with("abc123")
        mock_callback.answer.assert_called_once()
        mock_callback.message.answer.assert_called_once()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
        call_args = mock_callback.message.answer.call_args[0][0]
        assert "/assign abc123" in call_args

    @patch("app.bot.handlers_inline.get_by_short_id")
    @patch("app.bot.handlers_inline.upsert_commits")
    @patch("app.bot.handlers_inline.set_status")
    @patch("app.bot.handlers_inline.build_title")
    @patch("app.bot.handlers_inline.build_key")
    @pytest.mark.asyncio
    async def test_cb_review_confirm_success(
        self,
        mock_build_key,
        mock_build_title,
        mock_set_status,
        mock_upsert_commits,
        mock_get_by_short_id,
        mock_callback,
        sample_review_item,
    ):
        """–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞ Review."""
        mock_get_by_short_id.return_value = sample_review_item
        mock_build_title.return_value = "John Doe: Test commit text [due 2025-01-15]"
        mock_build_key.return_value = "test_key_hash"
        mock_upsert_commits.return_value = {"created": ["new_commit_id"], "updated": []}
        mock_set_status.return_value = True

        await cb_review_confirm(mock_callback)

        mock_get_by_short_id.assert_called_once_with("abc123")
        mock_upsert_commits.assert_called_once()
        mock_set_status.assert_called_once_with("test-page-id-123", "resolved", linked_commit_id="new_commit_id")
        mock_callback.answer.assert_called_once_with("‚úÖ Confirmed!")
        mock_callback.message.edit_text.assert_called_once()

    @patch("app.bot.handlers_inline.get_by_short_id")
    @pytest.mark.asyncio
    async def test_cb_review_item_not_found(self, mock_get_by_short_id, mock_callback):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞."""
        mock_get_by_short_id.return_value = None

        await cb_review_confirm(mock_callback)

        mock_callback.answer.assert_called_once_with("‚ùå –≠–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)

    @patch("app.bot.handlers_inline.list_open_reviews")
    @patch("app.bot.handlers_inline.upsert_commits")
    @patch("app.bot.handlers_inline.set_status")
    @patch("app.bot.handlers_inline.build_title")
    @patch("app.bot.handlers_inline.build_key")
    @pytest.mark.asyncio
    async def test_cb_review_confirm_all_success(
        self,
        mock_build_key,
        mock_build_title,
        mock_set_status,
        mock_upsert_commits,
        mock_list_pending,
        mock_callback,
    ):
        """–¢–µ—Å—Ç –º–∞—Å—Å–æ–≤–æ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ Review."""
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫–∏
        items = [
            {
                "page_id": "page-1",
                "short_id": "abc123",
                "text": "Task 1",
                "direction": "mine",
                "assignees": ["John"],
                "due_iso": None,
                "confidence": 0.7,
                "meeting_page_id": "meeting-1",
            },
            {
                "page_id": "page-2",
                "short_id": "def456",
                "text": "Task 2",
                "direction": "theirs",
                "assignees": [],
                "due_iso": "2025-01-15",
                "confidence": 0.6,
                "meeting_page_id": "meeting-1",
            },
        ]
        # –ü–µ—Ä–≤—ã–π –≤—ã–∑–æ–≤ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–ª–µ–º–µ–Ω—Ç—ã, –≤—Ç–æ—Ä–æ–π - –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ (–æ—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏)
        mock_list_pending.side_effect = [items, []]

        mock_build_title.side_effect = ["Title 1", "Title 2"]
        mock_build_key.side_effect = ["key1", "key2"]
        mock_upsert_commits.return_value = {"created": ["commit-1"], "updated": []}
        mock_set_status.return_value = True

        await cb_review_confirm_all(mock_callback)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–∑–æ–≤—ã
        # –¢–µ–ø–µ—Ä—å list_pending –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –¥–≤–∞–∂–¥—ã: —Å–Ω–∞—á–∞–ª–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤, –ø–æ—Ç–æ–º –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—É—Å—Ç–æ–π –æ—á–µ—Ä–µ–¥–∏
        assert mock_list_pending.call_count == 2
        mock_list_pending.assert_any_call(limit=50)
        mock_list_pending.assert_any_call(limit=1)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        assert mock_upsert_commits.call_count == 2  # –ü–æ –æ–¥–Ω–æ–º—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
        assert mock_set_status.call_count == 2  # –ü–æ–º–µ—á–∞–µ–º –æ–±–∞ –∫–∞–∫ resolved
        mock_callback.answer.assert_called_once()
        # –¢–µ–ø–µ—Ä—å –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 2 —Å–æ–æ–±—â–µ–Ω–∏—è: —Ä–µ–∑—É–ª—å—Ç–∞—Ç + —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—É—Å—Ç–æ–π –æ—á–µ—Ä–µ–¥–∏
        assert mock_callback.message.answer.call_count == 2

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
        first_call_args = mock_callback.message.answer.call_args_list[0][0][0]
        assert "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ: 2 —ç–ª–µ–º–µ–Ω—Ç–æ–≤" in first_call_args

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—É—Å—Ç–æ–π –æ—á–µ—Ä–µ–¥–∏
        second_call_args = mock_callback.message.answer.call_args_list[1]
        assert "üìã Review queue –ø—É—Å—Ç–∞." in second_call_args[0][0]
        assert "üí°" in second_call_args[0][0]  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
        assert second_call_args[1]["reply_markup"] is not None  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã

    @patch("app.bot.handlers_inline.list_open_reviews")
    @pytest.mark.asyncio
    async def test_cb_review_confirm_all_empty(self, mock_list_pending, mock_callback):
        """–¢–µ—Å—Ç –º–∞—Å—Å–æ–≤–æ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø—Ä–∏ –ø—É—Å—Ç–æ–π –æ—á–µ—Ä–µ–¥–∏."""
        mock_list_pending.return_value = []

        await cb_review_confirm_all(mock_callback)

        mock_callback.answer.assert_called_once()
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –Ω–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –∏ –∫–Ω–æ–ø–∫–æ–π
        mock_callback.message.answer.assert_called_once()
        call_args = mock_callback.message.answer.call_args
        assert "üìã Review queue –ø—É—Å—Ç–∞." in call_args[0][0]
        assert "üí°" in call_args[0][0]  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
        assert call_args[1]["reply_markup"] is not None  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
