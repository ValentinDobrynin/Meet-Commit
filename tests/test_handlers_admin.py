"""–¢–µ—Å—Ç—ã –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞."""

from unittest.mock import AsyncMock, MagicMock, patch

import pytest
from aiogram.types import Message, User

from app.bot.handlers_admin import (
    admin_help_handler,
    clear_cache_handler,
    reload_tags_handler,
    tags_stats_handler,
)


@pytest.fixture
def mock_message():
    """–§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è mock —Å–æ–æ–±—â–µ–Ω–∏—è."""
    message = AsyncMock(spec=Message)
    message.from_user = MagicMock(spec=User)
    message.from_user.id = 123456789
    message.answer = AsyncMock()
    return message


@pytest.fixture(autouse=True)
def mock_is_admin():
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –º–æ–∫–∞–µ—Ç _is_admin –¥–ª—è –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤."""
    with patch("app.bot.handlers_admin._is_admin", return_value=True):
        yield


class TestReloadTagsHandler:
    """–¢–µ—Å—Ç—ã –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /reload_tags."""

    @pytest.mark.asyncio
    async def test_reload_tags_success(self, mock_message):
        """–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–π –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∞–≤–∏–ª."""
        with patch("app.bot.handlers_admin.reload_tags_rules", return_value=12):
            await reload_tags_handler(mock_message)

            mock_message.answer.assert_called_once()
            call_args = mock_message.answer.call_args[0][0]
            assert "‚ôªÔ∏è" in call_args
            assert "12" in call_args and "–∫–∞—Ç–µ–≥–æ—Ä–∏–π" in call_args
            assert "LRU –∫—ç—à –æ—á–∏—â–µ–Ω" in call_args

    @pytest.mark.asyncio
    async def test_reload_tags_error(self, mock_message):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–∫–∏ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ."""
        with patch("app.bot.handlers_admin.reload_tags_rules", side_effect=Exception("YAML error")):
            await reload_tags_handler(mock_message)

            mock_message.answer.assert_called_once()
            call_args = mock_message.answer.call_args[0][0]
            assert "‚ùå" in call_args
            assert "–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏" in call_args
            assert "YAML error" in call_args


class TestTagsStatsHandler:
    """–¢–µ—Å—Ç—ã –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /tags_stats."""

    @pytest.mark.asyncio
    async def test_tags_stats_success(self, mock_message):
        """–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."""
        mock_stats = {
            "current_mode": "both",
            "valid_modes": ["v0", "v1", "both"],
            "stats": {
                "calls_by_mode": {"v0": 5, "v1": 3, "both": 10},
                "calls_by_kind": {"meeting": 15, "commit": 3},
            },
            "cache_info": {
                "hits": 45,
                "misses": 12,
                "maxsize": 256,
                "currsize": 8,
            },
            "mapping_rules": 18,
            "v1_stats": {
                "total_rules": 21,
                "total_patterns": 143,
                "total_excludes": 5,
                "average_weight": 1.1,
            },
        }

        with patch("app.bot.handlers_admin.get_tagging_stats", return_value=mock_stats):
            await tags_stats_handler(mock_message)

            mock_message.answer.assert_called_once()
            call_args = mock_message.answer.call_args[0][0]
            assert "üìä" in call_args
            assert "both" in call_args
            assert "45 hits" in call_args
            assert "18" in call_args  # mapping rules
            assert "21" in call_args  # total rules

    @pytest.mark.asyncio
    async def test_tags_stats_error(self, mock_message):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–∫–∏ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."""
        with patch(
            "app.bot.handlers_admin.get_tagging_stats", side_effect=Exception("Stats error")
        ):
            await tags_stats_handler(mock_message)

            mock_message.answer.assert_called_once()
            call_args = mock_message.answer.call_args[0][0]
            assert "‚ùå" in call_args
            assert "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏" in call_args
            assert "Stats error" in call_args


class TestClearCacheHandler:
    """–¢–µ—Å—Ç—ã –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /clear_cache."""

    @pytest.mark.asyncio
    async def test_clear_cache_success(self, mock_message):
        """–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞."""
        with patch("app.bot.handlers_admin.clear_cache") as mock_clear:
            await clear_cache_handler(mock_message)

            mock_clear.assert_called_once()
            mock_message.answer.assert_called_once()
            call_args = mock_message.answer.call_args[0][0]
            assert "üßπ" in call_args
            assert "–ö—ç—à –æ—á–∏—â–µ–Ω" in call_args

    @pytest.mark.asyncio
    async def test_clear_cache_error(self, mock_message):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–∫–∏ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫—ç—à–∞."""
        with patch("app.bot.handlers_admin.clear_cache", side_effect=Exception("Cache error")):
            await clear_cache_handler(mock_message)

            mock_message.answer.assert_called_once()
            call_args = mock_message.answer.call_args[0][0]
            assert "‚ùå" in call_args
            assert "–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞" in call_args
            assert "Cache error" in call_args


class TestAdminHelpHandler:
    """–¢–µ—Å—Ç—ã –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /admin_help."""

    @pytest.mark.asyncio
    async def test_admin_help_success(self, mock_message):
        """–¢–µ—Å—Ç –ø–æ–∫–∞–∑–∞ —Å–ø—Ä–∞–≤–∫–∏ –ø–æ –∞–¥–º–∏–Ω –∫–æ–º–∞–Ω–¥–∞–º."""
        await admin_help_handler(mock_message)

        mock_message.answer.assert_called_once()
        call_args = mock_message.answer.call_args[0][0]
        assert "üîß" in call_args
        assert "/reload_tags" in call_args
        assert "/tags_stats" in call_args
        assert "/clear_cache" in call_args
        assert "/admin_help" in call_args


class TestIntegration:
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è admin –∫–æ–º–∞–Ω–¥."""

    @pytest.mark.asyncio
    async def test_admin_commands_workflow(self, mock_message):
        """–¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ workflow –∞–¥–º–∏–Ω—Å–∫–∏—Ö –∫–æ–º–∞–Ω–¥."""
        # 1. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø—Ä–∞–≤–∫—É
        await admin_help_handler(mock_message)
        assert mock_message.answer.call_count == 1

        # 2. –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        mock_stats = {
            "current_mode": "both",
            "stats": {"calls_by_mode": {}, "calls_by_kind": {}},
            "cache_info": {"hits": 0, "misses": 0, "maxsize": 256, "currsize": 0},
            "mapping_rules": 18,
        }

        with patch("app.bot.handlers_admin.get_tagging_stats", return_value=mock_stats):
            await tags_stats_handler(mock_message)
            assert mock_message.answer.call_count == 2

        # 3. –û—á–∏—â–∞–µ–º –∫—ç—à
        with patch("app.bot.handlers_admin.clear_cache"):
            await clear_cache_handler(mock_message)
            assert mock_message.answer.call_count == 3

        # 4. –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–∞–≤–∏–ª–∞
        with patch("app.bot.handlers_admin.reload_tags_rules", return_value=15):
            await reload_tags_handler(mock_message)
            assert mock_message.answer.call_count == 4

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
            last_call_args = mock_message.answer.call_args_list[-1][0][0]
            assert "15" in last_call_args and "–∫–∞—Ç–µ–≥–æ—Ä–∏–π" in last_call_args
